<?xml version="1.0" encoding="UTF-8"?>
<!--
This file was generated by Altova MapForce 2010r3sp1

YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.

Refer to the Altova MapForce Documentation for further details.
http://www.altova.com/mapforce
-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns0="AlschulerAssociates::GreenCDA" xmlns:tbf="http://www.altova.com/MapForce/UDF/tbf" xmlns:user="http://www.altova.com/MapForce/UDF/user" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:ns1="urn:hl7-org:v3" exclude-result-prefixes="ns0 tbf user xs fn">
	<xsl:template name="tbf:tbf1_TS">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@nullFlavor">
			<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf2_INT">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@nullFlavor">
			<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="tbf:tbf3_MO">
		<xsl:param name="input" select="()"/>
		<xsl:for-each select="$input/@nullFlavor">
			<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@value">
			<xsl:attribute name="value" select="fn:string(.)"/>
		</xsl:for-each>
		<xsl:for-each select="$input/@currency">
			<xsl:attribute name="currency" select="fn:string(.)"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:param name="green_ccd10" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd11" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd12" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd13" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd14" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd15" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd16" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd17" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd3" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd4" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd5" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd6" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd7" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd8" select="'green_ccd.xml'"/>
	<xsl:param name="green_ccd9" select="'green_ccd.xml'"/>
	<xsl:template name="user:conditionsNarrative">
		<xsl:param name="conditions" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Condition'"/>
						</th>
						<th>
							<xsl:sequence select="'Effective Date'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$conditions/ns0:condition">
						<tr>
							<xsl:for-each select="ns0:problemName">
								<td>
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:problemDate/ns0:low/@value">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:mapProblemStatus">
		<xsl:param name="problemStatus" select="()"/>
		<ns1:POCD_MT000040.EntryRelationship xsl:exclude-result-prefixes="ns1">
			<xsl:attribute name="typeCode" select="'REFR'"/>
			<ns1:observation xsl:exclude-result-prefixes="ns1">
				<ns1:templateId xsl:exclude-result-prefixes="ns1">
					<xsl:attribute name="root" select="'2.16.840.1.113883.10.20.1.50'"/>
				</ns1:templateId>
				<ns1:code xsl:exclude-result-prefixes="ns1">
					<xsl:attribute name="code" select="'33999-4'"/>
					<xsl:attribute name="codeSystem" select="'2.16.840.1.113883.6.1'"/>
					<xsl:attribute name="displayName" select="'Status'"/>
				</ns1:code>
				<ns1:value xsl:exclude-result-prefixes="ns1">
					<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','CE')"/>
					<xsl:for-each select="$problemStatus/@nullFlavor">
						<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$problemStatus/@code">
						<xsl:attribute name="code" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$problemStatus/@codeSystem">
						<xsl:attribute name="codeSystem" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$problemStatus/@codeSystemName">
						<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$problemStatus/@displayName">
						<xsl:attribute name="displayName" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$problemStatus/ns0:originalText">
						<ns1:originalText xsl:exclude-result-prefixes="ns1">
							<xsl:sequence select="fn:string(.)"/>
						</ns1:originalText>
					</xsl:for-each>
					<xsl:for-each select="$problemStatus/ns0:qualifier">
						<ns1:qualifier xsl:exclude-result-prefixes="ns1">
							<xsl:for-each select="ns0:name">
								<ns1:name xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="@nullFlavor">
										<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@code">
										<xsl:attribute name="code" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@codeSystem">
										<xsl:attribute name="codeSystem" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@codeSystemName">
										<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@displayName">
										<xsl:attribute name="displayName" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="ns0:originalText">
										<ns1:originalText xsl:exclude-result-prefixes="ns1">
											<xsl:sequence select="fn:string(.)"/>
										</ns1:originalText>
									</xsl:for-each>
									<xsl:for-each select="ns0:qualifier">
										<ns1:qualifier xsl:exclude-result-prefixes="ns1">
											<xsl:sequence select="()"/>
										</ns1:qualifier>
									</xsl:for-each>
								</ns1:name>
							</xsl:for-each>
							<xsl:for-each select="ns0:value">
								<ns1:value xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="@nullFlavor">
										<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@code">
										<xsl:attribute name="code" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@codeSystem">
										<xsl:attribute name="codeSystem" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@codeSystemName">
										<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@displayName">
										<xsl:attribute name="displayName" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="ns0:originalText">
										<ns1:originalText xsl:exclude-result-prefixes="ns1">
											<xsl:sequence select="fn:string(.)"/>
										</ns1:originalText>
									</xsl:for-each>
									<xsl:for-each select="ns0:qualifier">
										<ns1:qualifier xsl:exclude-result-prefixes="ns1">
											<xsl:sequence select="()"/>
										</ns1:qualifier>
									</xsl:for-each>
								</ns1:value>
							</xsl:for-each>
						</ns1:qualifier>
					</xsl:for-each>
				</ns1:value>
			</ns1:observation>
		</ns1:POCD_MT000040.EntryRelationship>
	</xsl:template>
	<xsl:template name="user:mapCondition">
		<xsl:param name="condition" select="()"/>
		<xsl:variable name="var1" as="node()" select="$condition"/>
		<xsl:variable name="var2" as="xs:string" select="'EVN'"/>
		<ns1:POCD_MT000040.Act xsl:exclude-result-prefixes="ns1">
			<xsl:attribute name="classCode" select="'ACT'"/>
			<xsl:attribute name="moodCode" select="$var2"/>
			<ns1:templateId xsl:exclude-result-prefixes="ns1">
				<xsl:attribute name="root" select="'2.16.840.1.113883.10.20.1.27'"/>
			</ns1:templateId>
			<ns1:id xsl:exclude-result-prefixes="ns1">
				<xsl:attribute name="root" select="'NI'"/>
			</ns1:id>
			<ns1:code xsl:exclude-result-prefixes="ns1">
				<xsl:attribute name="nullFlavor" select="'NA'"/>
			</ns1:code>
			<xsl:for-each select="$var1/ns0:treatingProvider">
				<ns1:performer xsl:exclude-result-prefixes="ns1">
					<ns1:assignedEntity xsl:exclude-result-prefixes="ns1">
						<xsl:for-each select="ns0:treatingProviderID">
							<ns1:id xsl:exclude-result-prefixes="ns1">
								<xsl:for-each select="@nullFlavor">
									<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@root">
									<xsl:attribute name="root" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@extension">
									<xsl:attribute name="extension" select="fn:string(.)"/>
								</xsl:for-each>
							</ns1:id>
						</xsl:for-each>
					</ns1:assignedEntity>
				</ns1:performer>
			</xsl:for-each>
			<xsl:for-each select="$var1/ns0:problemType">
				<ns1:entryRelationship xsl:exclude-result-prefixes="ns1">
					<xsl:for-each select="@nullFlavor">
						<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:attribute name="typeCode" select="'SUBJ'"/>
					<ns1:sequenceNumber xsl:exclude-result-prefixes="ns1">
						<xsl:for-each select="$var1/ns0:diagnosisPriority">
							<xsl:attribute name="value" select="xs:string(xs:integer(fn:string(.)))"/>
						</xsl:for-each>
					</ns1:sequenceNumber>
					<ns1:observation xsl:exclude-result-prefixes="ns1">
						<xsl:attribute name="classCode" select="'OBS'"/>
						<xsl:attribute name="moodCode" select="$var2"/>
						<ns1:templateId xsl:exclude-result-prefixes="ns1">
							<xsl:attribute name="root" select="'2.16.840.1.113883.10.20.1.28'"/>
						</ns1:templateId>
						<ns1:code xsl:exclude-result-prefixes="ns1">
							<xsl:for-each select="@nullFlavor">
								<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@code">
								<xsl:attribute name="code" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@codeSystem">
								<xsl:attribute name="codeSystem" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@codeSystemName">
								<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@displayName">
								<xsl:attribute name="displayName" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="ns0:originalText">
								<ns1:originalText xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</ns1:originalText>
							</xsl:for-each>
							<xsl:for-each select="ns0:qualifier">
								<ns1:qualifier xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="ns0:name">
										<ns1:name xsl:exclude-result-prefixes="ns1">
											<xsl:for-each select="@nullFlavor">
												<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@code">
												<xsl:attribute name="code" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@codeSystem">
												<xsl:attribute name="codeSystem" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@codeSystemName">
												<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@displayName">
												<xsl:attribute name="displayName" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="ns0:originalText">
												<ns1:originalText xsl:exclude-result-prefixes="ns1">
													<xsl:sequence select="fn:string(.)"/>
												</ns1:originalText>
											</xsl:for-each>
											<xsl:for-each select="ns0:qualifier">
												<ns1:qualifier xsl:exclude-result-prefixes="ns1">
													<xsl:sequence select="()"/>
												</ns1:qualifier>
											</xsl:for-each>
										</ns1:name>
									</xsl:for-each>
									<xsl:for-each select="ns0:value">
										<ns1:value xsl:exclude-result-prefixes="ns1">
											<xsl:for-each select="@nullFlavor">
												<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@code">
												<xsl:attribute name="code" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@codeSystem">
												<xsl:attribute name="codeSystem" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@codeSystemName">
												<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="@displayName">
												<xsl:attribute name="displayName" select="fn:string(.)"/>
											</xsl:for-each>
											<xsl:for-each select="ns0:originalText">
												<ns1:originalText xsl:exclude-result-prefixes="ns1">
													<xsl:sequence select="fn:string(.)"/>
												</ns1:originalText>
											</xsl:for-each>
											<xsl:for-each select="ns0:qualifier">
												<ns1:qualifier xsl:exclude-result-prefixes="ns1">
													<xsl:sequence select="()"/>
												</ns1:qualifier>
											</xsl:for-each>
										</ns1:value>
									</xsl:for-each>
								</ns1:qualifier>
							</xsl:for-each>
						</ns1:code>
						<xsl:for-each select="$var1/ns0:problemName">
							<ns1:text xsl:exclude-result-prefixes="ns1">
								<xsl:for-each select="node()[./self::text()]">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</ns1:text>
						</xsl:for-each>
						<ns1:statusCode xsl:exclude-result-prefixes="ns1">
							<xsl:attribute name="code" select="'completed'"/>
						</ns1:statusCode>
						<xsl:for-each select="$var1/ns0:problemDate">
							<ns1:effectiveTime xsl:exclude-result-prefixes="ns1">
								<xsl:for-each select="@nullFlavor">
									<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@value">
									<xsl:attribute name="value" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@operator">
									<xsl:attribute name="operator" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="ns0:low">
									<ns1:low xsl:exclude-result-prefixes="ns1">
										<xsl:for-each select="@nullFlavor">
											<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@value">
											<xsl:attribute name="value" select="fn:string(.)"/>
										</xsl:for-each>
									</ns1:low>
								</xsl:for-each>
								<xsl:for-each select="ns0:width">
									<ns1:width xsl:exclude-result-prefixes="ns1">
										<xsl:for-each select="@nullFlavor">
											<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@value">
											<xsl:attribute name="value" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@unit">
											<xsl:attribute name="unit" select="fn:string(.)"/>
										</xsl:for-each>
									</ns1:width>
								</xsl:for-each>
								<xsl:for-each select="ns0:high">
									<ns1:high xsl:exclude-result-prefixes="ns1">
										<xsl:for-each select="@nullFlavor">
											<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@value">
											<xsl:attribute name="value" select="fn:string(.)"/>
										</xsl:for-each>
									</ns1:high>
								</xsl:for-each>
								<xsl:for-each select="ns0:center">
									<ns1:center xsl:exclude-result-prefixes="ns1">
										<xsl:call-template name="tbf:tbf1_TS">
											<xsl:with-param name="input" select="." as="node()"/>
										</xsl:call-template>
									</ns1:center>
								</xsl:for-each>
							</ns1:effectiveTime>
						</xsl:for-each>
						<xsl:for-each select="$var1/ns0:problemCode">
							<ns1:value xsl:exclude-result-prefixes="ns1">
								<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','CD')"/>
								<xsl:for-each select="@nullFlavor">
									<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@code">
									<xsl:attribute name="code" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@codeSystem">
									<xsl:attribute name="codeSystem" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@codeSystemName">
									<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@displayName">
									<xsl:attribute name="displayName" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="ns0:originalText">
									<ns1:originalText xsl:exclude-result-prefixes="ns1">
										<xsl:for-each select="node()[./self::text()]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</ns1:originalText>
								</xsl:for-each>
								<xsl:for-each select="ns0:qualifier">
									<ns1:qualifier xsl:exclude-result-prefixes="ns1">
										<xsl:for-each select="ns0:name">
											<ns1:name xsl:exclude-result-prefixes="ns1">
												<xsl:for-each select="@nullFlavor">
													<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@code">
													<xsl:attribute name="code" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@codeSystem">
													<xsl:attribute name="codeSystem" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@codeSystemName">
													<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@displayName">
													<xsl:attribute name="displayName" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="ns0:originalText">
													<ns1:originalText xsl:exclude-result-prefixes="ns1">
														<xsl:sequence select="fn:string(.)"/>
													</ns1:originalText>
												</xsl:for-each>
												<xsl:for-each select="ns0:qualifier">
													<ns1:qualifier xsl:exclude-result-prefixes="ns1">
														<xsl:sequence select="()"/>
													</ns1:qualifier>
												</xsl:for-each>
											</ns1:name>
										</xsl:for-each>
										<xsl:for-each select="ns0:value">
											<ns1:value xsl:exclude-result-prefixes="ns1">
												<xsl:for-each select="@nullFlavor">
													<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@code">
													<xsl:attribute name="code" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@codeSystem">
													<xsl:attribute name="codeSystem" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@codeSystemName">
													<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@displayName">
													<xsl:attribute name="displayName" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="ns0:originalText">
													<ns1:originalText xsl:exclude-result-prefixes="ns1">
														<xsl:sequence select="fn:string(.)"/>
													</ns1:originalText>
												</xsl:for-each>
												<xsl:for-each select="ns0:qualifier">
													<ns1:qualifier xsl:exclude-result-prefixes="ns1">
														<xsl:sequence select="()"/>
													</ns1:qualifier>
												</xsl:for-each>
											</ns1:value>
										</xsl:for-each>
									</ns1:qualifier>
								</xsl:for-each>
							</ns1:value>
						</xsl:for-each>
					</ns1:observation>
				</ns1:entryRelationship>
			</xsl:for-each>
			<xsl:for-each select="$var1/ns0:ageAtOnset">
				<ns1:entryRelationship xsl:exclude-result-prefixes="ns1">
					<xsl:attribute name="typeCode" select="'SUBJ'"/>
					<xsl:attribute name="inversionInd" select="xs:string(xs:boolean('true'))"/>
					<ns1:observation xsl:exclude-result-prefixes="ns1">
						<xsl:attribute name="classCode" select="'OBS'"/>
						<xsl:attribute name="moodCode" select="$var2"/>
						<ns1:templateId xsl:exclude-result-prefixes="ns1">
							<xsl:attribute name="root" select="'2.16.840.1.113883.10.20.1.38'"/>
						</ns1:templateId>
						<ns1:code xsl:exclude-result-prefixes="ns1">
							<xsl:attribute name="code" select="'397659008'"/>
							<xsl:attribute name="codeSystem" select="'2.16.840.1.113883.6.96'"/>
							<xsl:attribute name="displayName" select="'Age'"/>
						</ns1:code>
						<ns1:value xsl:exclude-result-prefixes="ns1">
							<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','INT')"/>
						</ns1:value>
					</ns1:observation>
				</ns1:entryRelationship>
			</xsl:for-each>
			<xsl:for-each select="$var1/ns0:causeOfDeath">
				<ns1:entryRelationship xsl:exclude-result-prefixes="ns1">
					<xsl:attribute name="typeCode" select="'CAUS'"/>
					<ns1:observation xsl:exclude-result-prefixes="ns1">
						<xsl:attribute name="classCode" select="'OBS'"/>
						<xsl:attribute name="moodCode" select="$var2"/>
						<ns1:code xsl:exclude-result-prefixes="ns1">
							<xsl:attribute name="code" select="'ASSERTION'"/>
							<xsl:attribute name="codeSystem" select="'2.16.840.1.113883.5.4'"/>
						</ns1:code>
						<xsl:for-each select="ns0:timeOfDeath">
							<ns1:effectiveTime xsl:exclude-result-prefixes="ns1">
								<xsl:for-each select="@nullFlavor">
									<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@value">
									<xsl:attribute name="value" select="fn:string(.)"/>
								</xsl:for-each>
							</ns1:effectiveTime>
						</xsl:for-each>
						<ns1:value xsl:exclude-result-prefixes="ns1">
							<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','CD')"/>
							<xsl:attribute name="code" select="'419099009'"/>
							<xsl:attribute name="codeSystem" select="'2.16.840.1.113883.6.96'"/>
							<xsl:attribute name="displayName" select="'Dead'"/>
						</ns1:value>
						<ns1:entryRelationship xsl:exclude-result-prefixes="ns1">
							<ns1:observation xsl:exclude-result-prefixes="ns1">
								<xsl:attribute name="classCode" select="'OBS'"/>
								<xsl:attribute name="moodCode" select="$var2"/>
								<ns1:templateId xsl:exclude-result-prefixes="ns1">
									<xsl:attribute name="root" select="'2.16.840.1.113883.10.20.1.38'"/>
								</ns1:templateId>
								<ns1:code xsl:exclude-result-prefixes="ns1">
									<xsl:attribute name="code" select="'397659008'"/>
									<xsl:attribute name="codeSystem" select="'2.16.840.1.113883.6.96'"/>
									<xsl:attribute name="displayName" select="'Age'"/>
								</ns1:code>
								<xsl:for-each select="ns0:ageAtDeath">
									<ns1:value xsl:exclude-result-prefixes="ns1">
										<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','INT')"/>
									</ns1:value>
								</xsl:for-each>
							</ns1:observation>
						</ns1:entryRelationship>
					</ns1:observation>
				</ns1:entryRelationship>
			</xsl:for-each>
			<xsl:for-each select="$var1/ns0:problemStatus">
				<xsl:variable name="var3_resultof_mapProblemStatus" as="node()?">
					<xsl:call-template name="user:mapProblemStatus">
						<xsl:with-param name="problemStatus" as="node()">
							<ns0:problemStatus xsl:exclude-result-prefixes="ns0">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns0:problemStatus>
						</xsl:with-param>
					</xsl:call-template>
				</xsl:variable>
				<xsl:if test="fn:exists($var3_resultof_mapProblemStatus)">
					<ns1:entryRelationship xsl:exclude-result-prefixes="ns1">
						<xsl:for-each select="$var3_resultof_mapProblemStatus/@nullFlavor">
							<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/@typeCode">
							<xsl:attribute name="typeCode" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/@inversionInd">
							<xsl:attribute name="inversionInd" select="xs:string(xs:boolean(fn:string(.)))"/>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/@contextConductionInd">
							<xsl:attribute name="contextConductionInd" select="xs:string(xs:boolean(fn:string(.)))"/>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/@negationInd">
							<xsl:attribute name="negationInd" select="xs:string(xs:boolean(fn:string(.)))"/>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:realmCode">
							<ns1:realmCode xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:realmCode>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:typeId">
							<ns1:typeId xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:typeId>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:templateId">
							<ns1:templateId xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:templateId>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:sequenceNumber">
							<ns1:sequenceNumber xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:sequenceNumber>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:seperatableInd">
							<ns1:seperatableInd xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:seperatableInd>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:act">
							<ns1:act xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:act>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:encounter">
							<ns1:encounter xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:encounter>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:observation">
							<ns1:observation xsl:exclude-result-prefixes="ns1">
								<xsl:for-each select="@nullFlavor">
									<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@classCode">
									<xsl:attribute name="classCode" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@moodCode">
									<xsl:attribute name="moodCode" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@negationInd">
									<xsl:attribute name="negationInd" select="xs:string(xs:boolean(fn:string(.)))"/>
								</xsl:for-each>
								<xsl:for-each select="ns1:realmCode">
									<ns1:realmCode xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:realmCode>
								</xsl:for-each>
								<xsl:for-each select="ns1:typeId">
									<ns1:typeId xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:typeId>
								</xsl:for-each>
								<xsl:for-each select="ns1:templateId">
									<ns1:templateId xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:templateId>
								</xsl:for-each>
								<xsl:for-each select="ns1:id">
									<ns1:id xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:id>
								</xsl:for-each>
								<xsl:for-each select="ns1:code">
									<ns1:code xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:code>
								</xsl:for-each>
								<xsl:for-each select="ns1:derivationExpr">
									<ns1:derivationExpr xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:derivationExpr>
								</xsl:for-each>
								<xsl:for-each select="ns1:text">
									<ns1:text xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:text>
								</xsl:for-each>
								<xsl:for-each select="ns1:statusCode">
									<ns1:statusCode xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:statusCode>
								</xsl:for-each>
								<xsl:for-each select="ns1:effectiveTime">
									<ns1:effectiveTime xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:effectiveTime>
								</xsl:for-each>
								<xsl:for-each select="ns1:priorityCode">
									<ns1:priorityCode xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:priorityCode>
								</xsl:for-each>
								<xsl:for-each select="ns1:repeatNumber">
									<ns1:repeatNumber xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:repeatNumber>
								</xsl:for-each>
								<xsl:for-each select="ns1:languageCode">
									<ns1:languageCode xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:languageCode>
								</xsl:for-each>
								<xsl:for-each select="ns1:interpretationCode">
									<ns1:interpretationCode xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:interpretationCode>
								</xsl:for-each>
								<xsl:for-each select="ns1:methodCode">
									<ns1:methodCode xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:methodCode>
								</xsl:for-each>
								<xsl:for-each select="ns1:targetSiteCode">
									<ns1:targetSiteCode xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:targetSiteCode>
								</xsl:for-each>
								<xsl:for-each select="ns1:subject">
									<ns1:subject xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:subject>
								</xsl:for-each>
								<xsl:for-each select="ns1:specimen">
									<ns1:specimen xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:specimen>
								</xsl:for-each>
								<xsl:for-each select="ns1:performer">
									<ns1:performer xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:performer>
								</xsl:for-each>
								<xsl:for-each select="ns1:author">
									<ns1:author xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:author>
								</xsl:for-each>
								<xsl:for-each select="ns1:informant">
									<ns1:informant xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:informant>
								</xsl:for-each>
								<xsl:for-each select="ns1:participant">
									<ns1:participant xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:participant>
								</xsl:for-each>
								<xsl:for-each select="ns1:entryRelationship">
									<ns1:entryRelationship xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:entryRelationship>
								</xsl:for-each>
								<xsl:for-each select="ns1:reference">
									<ns1:reference xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:reference>
								</xsl:for-each>
								<xsl:for-each select="ns1:precondition">
									<ns1:precondition xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:precondition>
								</xsl:for-each>
								<xsl:for-each select="ns1:referenceRange">
									<ns1:referenceRange xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="(./@node(), ./node())"/>
									</ns1:referenceRange>
								</xsl:for-each>
							</ns1:observation>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:observationMedia">
							<ns1:observationMedia xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:observationMedia>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:organizer">
							<ns1:organizer xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:organizer>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:procedure">
							<ns1:procedure xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:procedure>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:regionOfInterest">
							<ns1:regionOfInterest xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:regionOfInterest>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:substanceAdministration">
							<ns1:substanceAdministration xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:substanceAdministration>
						</xsl:for-each>
						<xsl:for-each select="$var3_resultof_mapProblemStatus/ns1:supply">
							<ns1:supply xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="(./@node(), ./node())"/>
							</ns1:supply>
						</xsl:for-each>
					</ns1:entryRelationship>
				</xsl:if>
			</xsl:for-each>
		</ns1:POCD_MT000040.Act>
	</xsl:template>
	<xsl:template name="user:insuranceProvidersNarrative">
		<xsl:param name="insuranceProviders" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Provider Name'"/>
						</th>
						<th>
							<xsl:sequence select="'Coverage Type'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$insuranceProviders/ns0:insuranceProvider">
						<tr>
							<xsl:for-each select="ns0:payer/ns0:organizationName">
								<td>
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:healthInsuranceType/@displayName">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:proceduresNarrative">
		<xsl:param name="procedures" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Procedure'"/>
						</th>
						<th>
							<xsl:sequence select="'Date'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$procedures/ns0:procedure">
						<tr>
							<xsl:for-each select="ns0:procedureFreeTextType">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:procedureDateTime/@value">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:advanceDirectivesNarrative">
		<xsl:param name="advanceDirectives" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Directive'"/>
						</th>
						<th>
							<xsl:sequence select="'Description'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$advanceDirectives/ns0:advanceDirective">
						<tr>
							<xsl:for-each select="ns0:type/@displayName">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:value/@displayName">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:vitalSignsNarrative">
		<xsl:param name="vitalSigns" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Date'"/>
						</th>
						<th>
							<xsl:sequence select="'Test'"/>
						</th>
						<th>
							<xsl:sequence select="'Result'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$vitalSigns/ns0:vitalSign">
						<tr>
							<xsl:for-each select="ns0:resultDateTime/@value">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:resultType/@displayName">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:resultValue/ns0:physicalQuantity">
								<xsl:variable name="var2" as="node()" select="."/>
								<xsl:for-each select="@value">
									<xsl:variable name="var1" as="node()" select="."/>
									<xsl:for-each select="$var2/@unit">
										<td>
											<xsl:sequence select="fn:concat(fn:concat(fn:string($var1), ' '), fn:string(.))"/>
										</td>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:allergiesNarrative">
		<xsl:param name="allergies" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Substance'"/>
						</th>
						<th>
							<xsl:sequence select="'Reaction'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$allergies/ns0:allergy">
						<tr>
							<xsl:for-each select="ns0:product/@displayName">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:reaction/@displayName">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:immunizationsNarrative">
		<xsl:param name="immunizations" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Vaccine'"/>
						</th>
						<th>
							<xsl:sequence select="'Date'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$immunizations/ns0:immunization">
						<tr>
							<xsl:for-each select="ns0:medicationInformation/ns0:freeTextProductName">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:administeredDate/@value">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:planOfCareNarrative">
		<xsl:param name="planOfCare" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Planned Activity'"/>
						</th>
						<th>
							<xsl:sequence select="'Date'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$planOfCare/ns0:plannedObservation">
						<tr>
							<xsl:for-each select="ns0:planFreeText">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:plannedTime/@value">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:medicationsNarrative">
		<xsl:param name="medications" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Product'"/>
						</th>
						<th>
							<xsl:sequence select="'Dose'"/>
						</th>
						<th>
							<xsl:sequence select="'Form'"/>
						</th>
						<th>
							<xsl:sequence select="'Period'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$medications/ns0:medication">
						<tr>
							<xsl:for-each select="ns0:medicationInformation/ns0:freeTextProductName">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:dose">
								<td>
									<xsl:sequence select="()"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:productForm">
								<td>
									<xsl:sequence select="()"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:admissionTiming/ns0:period">
								<xsl:variable name="var2" as="node()" select="."/>
								<xsl:for-each select="@value">
									<xsl:variable name="var1" as="node()" select="."/>
									<xsl:for-each select="$var2/@unit">
										<td>
											<xsl:sequence select="fn:concat(fn:concat(fn:string($var1), ' '), fn:string(.))"/>
										</td>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:encountersNarrative">
		<xsl:param name="encounters" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Type'"/>
						</th>
						<th>
							<xsl:sequence select="'Date'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$encounters/ns0:encounter">
						<tr>
							<xsl:for-each select="ns0:encounterType/ns0:originalText">
								<td>
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:encounterDateTime/@value">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:resultsNarrative">
		<xsl:param name="results" select="()"/>
		<text xmlns="urn:hl7-org:v3">
			<table>
				<xsl:attribute name="width" namespace="" select="'100%'"/>
				<xsl:attribute name="border" namespace="" select="'1'"/>
				<thead>
					<tr>
						<th>
							<xsl:sequence select="'Date'"/>
						</th>
						<th>
							<xsl:sequence select="'Test'"/>
						</th>
						<th>
							<xsl:sequence select="'Result'"/>
						</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$results/ns0:result">
						<xsl:variable name="var4" as="node()" select="."/>
						<tr>
							<xsl:for-each select="ns0:resultDateTime/@value">
								<td>
									<xsl:sequence select="fn:string(.)"/>
								</td>
							</xsl:for-each>
							<xsl:for-each select="ns0:resultType/@displayName">
								<xsl:variable name="var1" as="node()" select="."/>
								<xsl:for-each select="$var4/ns0:resultReferenceRange">
									<td>
										<xsl:sequence select="fn:concat(fn:concat(fn:concat(fn:string($var1), ' ('), fn:string(.)), ')')"/>
									</td>
								</xsl:for-each>
							</xsl:for-each>
							<xsl:for-each select="ns0:resultValue/ns0:physicalQuantity">
								<xsl:variable name="var3" as="node()" select="."/>
								<xsl:for-each select="@value">
									<xsl:variable name="var2" as="node()" select="."/>
									<xsl:for-each select="$var3/@unit">
										<td>
											<xsl:sequence select="fn:concat(fn:concat(fn:string($var2), ' '), fn:string(.))"/>
										</td>
									</xsl:for-each>
								</xsl:for-each>
							</xsl:for-each>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</text>
	</xsl:template>
	<xsl:template name="user:mapAdvanceDirectiveStatus">
		<xsl:param name="status" select="()"/>
		<ns1:POCD_MT000040.EntryRelationship xsl:exclude-result-prefixes="ns1">
			<xsl:for-each select="$status/@nullFlavor">
				<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
			</xsl:for-each>
			<xsl:attribute name="typeCode" select="'REFR'"/>
			<ns1:observation xsl:exclude-result-prefixes="ns1">
				<xsl:attribute name="classCode" select="'OBS'"/>
				<xsl:attribute name="moodCode" select="'EVN'"/>
				<ns1:templateId xsl:exclude-result-prefixes="ns1">
					<xsl:attribute name="root" select="'2.16.840.1.113883.10.20.1.37'"/>
				</ns1:templateId>
				<ns1:code xsl:exclude-result-prefixes="ns1">
					<xsl:attribute name="code" select="'33999-4'"/>
					<xsl:attribute name="codeSystem" select="'2.16.840.1.113883.6.1'"/>
					<xsl:attribute name="displayName" select="'Status'"/>
				</ns1:code>
				<ns1:statusCode xsl:exclude-result-prefixes="ns1">
					<xsl:attribute name="code" select="'completed'"/>
				</ns1:statusCode>
				<ns1:value xsl:exclude-result-prefixes="ns1">
					<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','CE')"/>
					<xsl:for-each select="$status/@nullFlavor">
						<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$status/@code">
						<xsl:attribute name="code" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$status/@codeSystem">
						<xsl:attribute name="codeSystem" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$status/@codeSystemName">
						<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$status/@displayName">
						<xsl:attribute name="displayName" select="fn:string(.)"/>
					</xsl:for-each>
					<xsl:for-each select="$status/ns0:originalText">
						<ns1:originalText xsl:exclude-result-prefixes="ns1">
							<xsl:sequence select="fn:string(.)"/>
						</ns1:originalText>
					</xsl:for-each>
					<xsl:for-each select="$status/ns0:qualifier">
						<ns1:qualifier xsl:exclude-result-prefixes="ns1">
							<xsl:for-each select="ns0:name">
								<ns1:name xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="@nullFlavor">
										<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@code">
										<xsl:attribute name="code" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@codeSystem">
										<xsl:attribute name="codeSystem" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@codeSystemName">
										<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@displayName">
										<xsl:attribute name="displayName" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="ns0:originalText">
										<ns1:originalText xsl:exclude-result-prefixes="ns1">
											<xsl:sequence select="fn:string(.)"/>
										</ns1:originalText>
									</xsl:for-each>
									<xsl:for-each select="ns0:qualifier">
										<ns1:qualifier xsl:exclude-result-prefixes="ns1">
											<xsl:sequence select="()"/>
										</ns1:qualifier>
									</xsl:for-each>
								</ns1:name>
							</xsl:for-each>
							<xsl:for-each select="ns0:value">
								<ns1:value xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="@nullFlavor">
										<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@code">
										<xsl:attribute name="code" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@codeSystem">
										<xsl:attribute name="codeSystem" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@codeSystemName">
										<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="@displayName">
										<xsl:attribute name="displayName" select="fn:string(.)"/>
									</xsl:for-each>
									<xsl:for-each select="ns0:originalText">
										<ns1:originalText xsl:exclude-result-prefixes="ns1">
											<xsl:sequence select="fn:string(.)"/>
										</ns1:originalText>
									</xsl:for-each>
									<xsl:for-each select="ns0:qualifier">
										<ns1:qualifier xsl:exclude-result-prefixes="ns1">
											<xsl:sequence select="()"/>
										</ns1:qualifier>
									</xsl:for-each>
								</ns1:value>
							</xsl:for-each>
						</ns1:qualifier>
					</xsl:for-each>
				</ns1:value>
			</ns1:observation>
		</ns1:POCD_MT000040.EntryRelationship>
	</xsl:template>
	<xsl:template name="user:mapMedicationInformation">
		<xsl:param name="medicationInformation" select="()"/>
		<xsl:variable name="var1" as="node()" select="$medicationInformation"/>
		<ns1:POCD_MT000040.ManufacturedProduct xsl:exclude-result-prefixes="ns1">
			<ns1:templateId xsl:exclude-result-prefixes="ns1">
				<xsl:attribute name="root" select="'2.16.840.1.113883.10.20.1.53'"/>
			</ns1:templateId>
			<ns1:manufacturedMaterial xsl:exclude-result-prefixes="ns1">
				<xsl:for-each select="$var1/ns0:codedProductName">
					<ns1:code xsl:exclude-result-prefixes="ns1">
						<xsl:for-each select="@nullFlavor">
							<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="@code">
							<xsl:attribute name="code" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="@codeSystem">
							<xsl:attribute name="codeSystem" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="@codeSystemName">
							<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="@displayName">
							<xsl:attribute name="displayName" select="fn:string(.)"/>
						</xsl:for-each>
						<xsl:for-each select="$var1/ns0:freeTextProductName">
							<ns1:originalText xsl:exclude-result-prefixes="ns1">
								<xsl:sequence select="fn:string(.)"/>
							</ns1:originalText>
						</xsl:for-each>
						<xsl:for-each select="ns0:qualifier">
							<ns1:qualifier xsl:exclude-result-prefixes="ns1">
								<xsl:for-each select="ns0:name">
									<ns1:name xsl:exclude-result-prefixes="ns1">
										<xsl:for-each select="@nullFlavor">
											<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@code">
											<xsl:attribute name="code" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@codeSystem">
											<xsl:attribute name="codeSystem" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@codeSystemName">
											<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@displayName">
											<xsl:attribute name="displayName" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="ns0:originalText">
											<ns1:originalText xsl:exclude-result-prefixes="ns1">
												<xsl:sequence select="fn:string(.)"/>
											</ns1:originalText>
										</xsl:for-each>
										<xsl:for-each select="ns0:qualifier">
											<ns1:qualifier xsl:exclude-result-prefixes="ns1">
												<xsl:sequence select="()"/>
											</ns1:qualifier>
										</xsl:for-each>
									</ns1:name>
								</xsl:for-each>
								<xsl:for-each select="ns0:value">
									<ns1:value xsl:exclude-result-prefixes="ns1">
										<xsl:for-each select="@nullFlavor">
											<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@code">
											<xsl:attribute name="code" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@codeSystem">
											<xsl:attribute name="codeSystem" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@codeSystemName">
											<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@displayName">
											<xsl:attribute name="displayName" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="ns0:originalText">
											<ns1:originalText xsl:exclude-result-prefixes="ns1">
												<xsl:sequence select="fn:string(.)"/>
											</ns1:originalText>
										</xsl:for-each>
										<xsl:for-each select="ns0:qualifier">
											<ns1:qualifier xsl:exclude-result-prefixes="ns1">
												<xsl:sequence select="()"/>
											</ns1:qualifier>
										</xsl:for-each>
									</ns1:value>
								</xsl:for-each>
							</ns1:qualifier>
						</xsl:for-each>
						<xsl:for-each select="$var1/ns0:codedBrandName">
							<ns1:translation xsl:exclude-result-prefixes="ns1">
								<xsl:for-each select="@nullFlavor">
									<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@code">
									<xsl:attribute name="code" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@codeSystem">
									<xsl:attribute name="codeSystem" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@codeSystemName">
									<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="@displayName">
									<xsl:attribute name="displayName" select="fn:string(.)"/>
								</xsl:for-each>
								<xsl:for-each select="$var1/ns0:freeTextBrandName">
									<ns1:originalText xsl:exclude-result-prefixes="ns1">
										<xsl:sequence select="fn:string(.)"/>
									</ns1:originalText>
								</xsl:for-each>
								<xsl:for-each select="ns0:qualifier">
									<ns1:qualifier xsl:exclude-result-prefixes="ns1">
										<xsl:for-each select="ns0:name">
											<ns1:name xsl:exclude-result-prefixes="ns1">
												<xsl:for-each select="@nullFlavor">
													<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@code">
													<xsl:attribute name="code" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@codeSystem">
													<xsl:attribute name="codeSystem" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@codeSystemName">
													<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@displayName">
													<xsl:attribute name="displayName" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="ns0:originalText">
													<ns1:originalText xsl:exclude-result-prefixes="ns1">
														<xsl:sequence select="fn:string(.)"/>
													</ns1:originalText>
												</xsl:for-each>
												<xsl:for-each select="ns0:qualifier">
													<ns1:qualifier xsl:exclude-result-prefixes="ns1">
														<xsl:sequence select="()"/>
													</ns1:qualifier>
												</xsl:for-each>
											</ns1:name>
										</xsl:for-each>
										<xsl:for-each select="ns0:value">
											<ns1:value xsl:exclude-result-prefixes="ns1">
												<xsl:for-each select="@nullFlavor">
													<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@code">
													<xsl:attribute name="code" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@codeSystem">
													<xsl:attribute name="codeSystem" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@codeSystemName">
													<xsl:attribute name="codeSystemName" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="@displayName">
													<xsl:attribute name="displayName" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="ns0:originalText">
													<ns1:originalText xsl:exclude-result-prefixes="ns1">
														<xsl:sequence select="fn:string(.)"/>
													</ns1:originalText>
												</xsl:for-each>
												<xsl:for-each select="ns0:qualifier">
													<ns1:qualifier xsl:exclude-result-prefixes="ns1">
														<xsl:sequence select="()"/>
													</ns1:qualifier>
												</xsl:for-each>
											</ns1:value>
										</xsl:for-each>
									</ns1:qualifier>
								</xsl:for-each>
							</ns1:translation>
						</xsl:for-each>
					</ns1:code>
				</xsl:for-each>
			</ns1:manufacturedMaterial>
			<xsl:for-each select="$var1/ns0:drugManufacturer">
				<ns1:manufacturerOrganization xsl:exclude-result-prefixes="ns1">
					<xsl:for-each select="ns0:organizationID">
						<ns1:id xsl:exclude-result-prefixes="ns1">
							<xsl:for-each select="@nullFlavor">
								<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@root">
								<xsl:attribute name="root" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@extension">
								<xsl:attribute name="extension" select="fn:string(.)"/>
							</xsl:for-each>
						</ns1:id>
					</xsl:for-each>
					<xsl:for-each select="ns0:organizationName">
						<ns1:name xsl:exclude-result-prefixes="ns1">
							<xsl:for-each select="@nullFlavor">
								<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="node()[./self::text()]">
								<xsl:sequence select="fn:string(.)"/>
							</xsl:for-each>
						</ns1:name>
					</xsl:for-each>
					<xsl:for-each select="ns0:organizationTelecom">
						<ns1:telecom xsl:exclude-result-prefixes="ns1">
							<xsl:for-each select="@nullFlavor">
								<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="@value">
								<xsl:attribute name="value" select="xs:string(xs:anyURI(fn:string(.)))"/>
							</xsl:for-each>
						</ns1:telecom>
					</xsl:for-each>
					<xsl:for-each select="ns0:organizationAddress">
						<ns1:addr xsl:exclude-result-prefixes="ns1">
							<xsl:for-each select="@nullFlavor">
								<xsl:attribute name="nullFlavor" select="fn:string(.)"/>
							</xsl:for-each>
							<xsl:for-each select="ns0:state">
								<ns1:state xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</ns1:state>
							</xsl:for-each>
							<xsl:for-each select="ns0:city">
								<ns1:city xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</ns1:city>
							</xsl:for-each>
							<xsl:for-each select="ns0:postalCode">
								<ns1:postalCode xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</ns1:postalCode>
							</xsl:for-each>
							<xsl:for-each select="ns0:streetAddressLine">
								<ns1:streetAddressLine xsl:exclude-result-prefixes="ns1">
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</ns1:streetAddressLine>
							</xsl:for-each>
						</ns1:addr>
					</xsl:for-each>
				</ns1:manufacturerOrganization>
			</xsl:for-each>
		</ns1:POCD_MT000040.ManufacturedProduct>
	</xsl:template>
	<xsl:output method="xml" encoding="UTF-8" indent="yes"/>
	<xsl:template match="/">
		<xsl:variable name="var1" as="xs:string" select="'2.16.840.1.113883.6.1'"/>
		<ClinicalDocument xmlns="urn:hl7-org:v3">
			<xsl:attribute name="xsi:schemaLocation" namespace="http://www.w3.org/2001/XMLSchema-instance" select="'urn:hl7-org:v3 Standards/CDA/infrastructure/cda/CDA.xsd'"/>
			<typeId>
				<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.1.3'"/>
				<xsl:attribute name="extension" namespace="" select="'POCD_HD000040'"/>
			</typeId>
			<templateId>
				<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1'"/>
			</templateId>
			<xsl:for-each select="ns0:greenCCD">
				<xsl:variable name="var2_select_extension" as="item()*" select="ns0:header/ns0:documentID/@extension"/>
				<xsl:variable name="var3_select_nullFlavor" as="item()*" select="ns0:header/ns0:documentID/@nullFlavor"/>
				<xsl:variable name="var4_select_root" as="item()*" select="ns0:header/ns0:documentID/@root"/>
				<id>
					<xsl:if test="fn:exists($var3_select_nullFlavor)">
						<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var3_select_nullFlavor)"/>
					</xsl:if>
					<xsl:if test="fn:exists($var4_select_root)">
						<xsl:attribute name="root" namespace="" select="fn:string($var4_select_root)"/>
					</xsl:if>
					<xsl:if test="fn:exists($var2_select_extension)">
						<xsl:attribute name="extension" namespace="" select="fn:string($var2_select_extension)"/>
					</xsl:if>
				</id>
			</xsl:for-each>
			<code>
				<xsl:attribute name="code" namespace="" select="'34133-9'"/>
				<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
			</code>
			<xsl:for-each select="ns0:greenCCD">
				<title>
					<xsl:for-each select="ns0:header/ns0:title/node()[./self::text()]">
						<xsl:sequence select="fn:string(.)"/>
					</xsl:for-each>
				</title>
			</xsl:for-each>
			<xsl:for-each select="ns0:greenCCD">
				<effectiveTime>
					<xsl:call-template name="tbf:tbf1_TS">
						<xsl:with-param name="input" select="ns0:header/ns0:documentTimestamp" as="node()"/>
					</xsl:call-template>
				</effectiveTime>
			</xsl:for-each>
			<xsl:for-each select="ns0:greenCCD">
				<xsl:variable name="var5_select_code" as="item()*" select="ns0:header/ns0:confidentiality/@code"/>
				<xsl:variable name="var6_select_nullFlavor" as="item()*" select="ns0:header/ns0:confidentiality/@nullFlavor"/>
				<xsl:variable name="var7_select_displayName" as="item()*" select="ns0:header/ns0:confidentiality/@displayName"/>
				<xsl:variable name="var8_select_codeSystemName" as="item()*" select="ns0:header/ns0:confidentiality/@codeSystemName"/>
				<xsl:variable name="var9_select_codeSystem" as="item()*" select="ns0:header/ns0:confidentiality/@codeSystem"/>
				<confidentialityCode>
					<xsl:if test="fn:exists($var6_select_nullFlavor)">
						<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var6_select_nullFlavor)"/>
					</xsl:if>
					<xsl:if test="fn:exists($var5_select_code)">
						<xsl:attribute name="code" namespace="" select="fn:string($var5_select_code)"/>
					</xsl:if>
					<xsl:if test="fn:exists($var9_select_codeSystem)">
						<xsl:attribute name="codeSystem" namespace="" select="fn:string($var9_select_codeSystem)"/>
					</xsl:if>
					<xsl:if test="fn:exists($var8_select_codeSystemName)">
						<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var8_select_codeSystemName)"/>
					</xsl:if>
					<xsl:if test="fn:exists($var7_select_displayName)">
						<xsl:attribute name="displayName" namespace="" select="fn:string($var7_select_displayName)"/>
					</xsl:if>
				</confidentialityCode>
			</xsl:for-each>
			<languageCode>
				<xsl:attribute name="code" namespace="" select="'en-US'"/>
			</languageCode>
			<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:version/ns0:setID">
				<xsl:variable name="var10_select_extension" as="item()*" select="@extension"/>
				<xsl:variable name="var11_select_root" as="item()*" select="@root"/>
				<xsl:variable name="var12_select_nullFlavor" as="item()*" select="@nullFlavor"/>
				<setId>
					<xsl:if test="fn:exists($var12_select_nullFlavor)">
						<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var12_select_nullFlavor)"/>
					</xsl:if>
					<xsl:if test="fn:exists($var11_select_root)">
						<xsl:attribute name="root" namespace="" select="fn:string($var11_select_root)"/>
					</xsl:if>
					<xsl:if test="fn:exists($var10_select_extension)">
						<xsl:attribute name="extension" namespace="" select="fn:string($var10_select_extension)"/>
					</xsl:if>
				</setId>
			</xsl:for-each>
			<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:version">
				<versionNumber>
					<xsl:for-each select="ns0:number/node()[./self::text()]">
						<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string(.)))"/>
					</xsl:for-each>
				</versionNumber>
			</xsl:for-each>
			<recordTarget>
				<patientRole>
					<xsl:for-each select="ns0:greenCCD">
						<xsl:variable name="var13_select_extension" as="item()*" select="ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personID/@extension"/>
						<xsl:variable name="var14_select_root" as="item()*" select="ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personID/@root"/>
						<xsl:variable name="var15_select_nullFlavor" as="item()*" select="ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personID/@nullFlavor"/>
						<id>
							<xsl:if test="fn:exists($var15_select_nullFlavor)">
								<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var15_select_nullFlavor)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var14_select_root)">
								<xsl:attribute name="root" namespace="" select="fn:string($var14_select_root)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var13_select_extension)">
								<xsl:attribute name="extension" namespace="" select="fn:string($var13_select_extension)"/>
							</xsl:if>
						</id>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personAddress">
						<xsl:variable name="var16_select_nullFlavor" as="item()*" select="@nullFlavor"/>
						<addr>
							<xsl:if test="fn:exists($var16_select_nullFlavor)">
								<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var16_select_nullFlavor)"/>
							</xsl:if>
							<state>
								<xsl:for-each select="ns0:state/node()[./self::text()]">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</state>
							<city>
								<xsl:for-each select="ns0:city/node()[./self::text()]">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</city>
							<postalCode>
								<xsl:for-each select="ns0:postalCode/node()[./self::text()]">
									<xsl:sequence select="fn:string(.)"/>
								</xsl:for-each>
							</postalCode>
						</addr>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personPhone">
						<xsl:variable name="var17_select_nullFlavor" as="item()*" select="@nullFlavor"/>
						<xsl:variable name="var18_select_value" as="item()*" select="@value"/>
						<telecom>
							<xsl:if test="fn:exists($var17_select_nullFlavor)">
								<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var17_select_nullFlavor)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var18_select_value)">
								<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var18_select_value)))"/>
							</xsl:if>
						</telecom>
					</xsl:for-each>
					<patient>
						<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personInformation/ns0:personName">
							<xsl:variable name="var19_select_nullFlavor" as="item()*" select="@nullFlavor"/>
							<name>
								<xsl:if test="fn:exists($var19_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var19_select_nullFlavor)"/>
								</xsl:if>
								<family>
									<xsl:for-each select="ns0:family/node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</family>
								<given>
									<xsl:for-each select="ns0:given/node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</given>
								<xsl:for-each select="ns0:prefix">
									<prefix>
										<xsl:for-each select="node()[./self::text()]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</prefix>
								</xsl:for-each>
							</name>
						</xsl:for-each>
						<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personInformation">
							<xsl:variable name="var20_select_code" as="item()*" select="ns0:gender/@code"/>
							<xsl:variable name="var21_select_nullFlavor" as="item()*" select="ns0:gender/@nullFlavor"/>
							<xsl:variable name="var22_select_displayName" as="item()*" select="ns0:gender/@displayName"/>
							<xsl:variable name="var23_select_codeSystemName" as="item()*" select="ns0:gender/@codeSystemName"/>
							<xsl:variable name="var24_select_codeSystem" as="item()*" select="ns0:gender/@codeSystem"/>
							<administrativeGenderCode>
								<xsl:if test="fn:exists($var21_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var21_select_nullFlavor)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var20_select_code)">
									<xsl:attribute name="code" namespace="" select="fn:string($var20_select_code)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var24_select_codeSystem)">
									<xsl:attribute name="codeSystem" namespace="" select="fn:string($var24_select_codeSystem)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var23_select_codeSystemName)">
									<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var23_select_codeSystemName)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var22_select_displayName)">
									<xsl:attribute name="displayName" namespace="" select="fn:string($var22_select_displayName)"/>
								</xsl:if>
							</administrativeGenderCode>
						</xsl:for-each>
						<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personInformation">
							<xsl:variable name="var25_select_nullFlavor" as="item()*" select="ns0:personDateOfBirth/@nullFlavor"/>
							<xsl:variable name="var26_select_value" as="item()*" select="ns0:personDateOfBirth/@value"/>
							<birthTime>
								<xsl:if test="fn:exists($var25_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var25_select_nullFlavor)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var26_select_value)">
									<xsl:attribute name="value" namespace="" select="fn:string($var26_select_value)"/>
								</xsl:if>
							</birthTime>
						</xsl:for-each>
						<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personInformation/ns0:maritalStatus">
							<xsl:variable name="var27_select_displayName" as="item()*" select="@displayName"/>
							<xsl:variable name="var28_select_code" as="item()*" select="@code"/>
							<xsl:variable name="var29_select_nullFlavor" as="item()*" select="@nullFlavor"/>
							<xsl:variable name="var30_select_codeSystemName" as="item()*" select="@codeSystemName"/>
							<xsl:variable name="var31_select_codeSystem" as="item()*" select="@codeSystem"/>
							<maritalStatusCode>
								<xsl:if test="fn:exists($var29_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var29_select_nullFlavor)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var28_select_code)">
									<xsl:attribute name="code" namespace="" select="fn:string($var28_select_code)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var31_select_codeSystem)">
									<xsl:attribute name="codeSystem" namespace="" select="fn:string($var31_select_codeSystem)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var30_select_codeSystemName)">
									<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var30_select_codeSystemName)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var27_select_displayName)">
									<xsl:attribute name="displayName" namespace="" select="fn:string($var27_select_displayName)"/>
								</xsl:if>
							</maritalStatusCode>
						</xsl:for-each>
						<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personInformation/ns0:religiousAffiliation">
							<xsl:variable name="var32_select_displayName" as="item()*" select="@displayName"/>
							<xsl:variable name="var33_select_codeSystemName" as="item()*" select="@codeSystemName"/>
							<xsl:variable name="var34_select_code" as="item()*" select="@code"/>
							<xsl:variable name="var35_select_nullFlavor" as="item()*" select="@nullFlavor"/>
							<xsl:variable name="var36_select_codeSystem" as="item()*" select="@codeSystem"/>
							<religiousAffiliationCode>
								<xsl:if test="fn:exists($var35_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var35_select_nullFlavor)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var34_select_code)">
									<xsl:attribute name="code" namespace="" select="fn:string($var34_select_code)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var36_select_codeSystem)">
									<xsl:attribute name="codeSystem" namespace="" select="fn:string($var36_select_codeSystem)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var33_select_codeSystemName)">
									<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var33_select_codeSystemName)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var32_select_displayName)">
									<xsl:attribute name="displayName" namespace="" select="fn:string($var32_select_displayName)"/>
								</xsl:if>
							</religiousAffiliationCode>
						</xsl:for-each>
						<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personInformation/ns0:race">
							<xsl:variable name="var37_select_codeSystemName" as="item()*" select="@codeSystemName"/>
							<xsl:variable name="var38_select_code" as="item()*" select="@code"/>
							<xsl:variable name="var39_select_nullFlavor" as="item()*" select="@nullFlavor"/>
							<xsl:variable name="var40_select_codeSystem" as="item()*" select="@codeSystem"/>
							<xsl:variable name="var41_select_displayName" as="item()*" select="@displayName"/>
							<raceCode>
								<xsl:if test="fn:exists($var39_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var39_select_nullFlavor)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var38_select_code)">
									<xsl:attribute name="code" namespace="" select="fn:string($var38_select_code)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var40_select_codeSystem)">
									<xsl:attribute name="codeSystem" namespace="" select="fn:string($var40_select_codeSystem)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var37_select_codeSystemName)">
									<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var37_select_codeSystemName)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var41_select_displayName)">
									<xsl:attribute name="displayName" namespace="" select="fn:string($var41_select_displayName)"/>
								</xsl:if>
							</raceCode>
						</xsl:for-each>
						<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personInformation/ns0:ethnicity">
							<xsl:variable name="var42_select_codeSystem" as="item()*" select="@codeSystem"/>
							<xsl:variable name="var43_select_nullFlavor" as="item()*" select="@nullFlavor"/>
							<xsl:variable name="var44_select_codeSystemName" as="item()*" select="@codeSystemName"/>
							<xsl:variable name="var45_select_code" as="item()*" select="@code"/>
							<xsl:variable name="var46_select_displayName" as="item()*" select="@displayName"/>
							<ethnicGroupCode>
								<xsl:if test="fn:exists($var43_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var43_select_nullFlavor)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var45_select_code)">
									<xsl:attribute name="code" namespace="" select="fn:string($var45_select_code)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var42_select_codeSystem)">
									<xsl:attribute name="codeSystem" namespace="" select="fn:string($var42_select_codeSystem)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var44_select_codeSystemName)">
									<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var44_select_codeSystemName)"/>
								</xsl:if>
								<xsl:if test="fn:exists($var46_select_displayName)">
									<xsl:attribute name="displayName" namespace="" select="fn:string($var46_select_displayName)"/>
								</xsl:if>
							</ethnicGroupCode>
						</xsl:for-each>
						<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:personalInformation/ns0:patientInformation/ns0:personInformation/ns0:birthPlace">
							<xsl:variable name="var47_select_name" as="item()*" select="@name"/>
							<xsl:variable name="var48_select_nullFlavor" as="item()*" select="@nullFlavor"/>
							<birthplace>
								<xsl:if test="fn:exists($var48_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var48_select_nullFlavor)"/>
								</xsl:if>
								<place>
									<name>
										<xsl:if test="fn:exists($var47_select_name)">
											<xsl:sequence select="fn:string($var47_select_name)"/>
										</xsl:if>
									</name>
									<addr>
										<state>
											<xsl:for-each select="ns0:state/node()[./self::text()]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</state>
										<city>
											<xsl:for-each select="ns0:city/node()[./self::text()]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</city>
										<postalCode>
											<xsl:for-each select="ns0:postalCode/node()[./self::text()]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</postalCode>
									</addr>
								</place>
							</birthplace>
						</xsl:for-each>
					</patient>
				</patientRole>
			</recordTarget>
			<xsl:for-each select="ns0:greenCCD">
				<xsl:variable name="var49_select_value" as="item()*" select="ns0:header/ns0:informationSource/ns0:author/ns0:authorTime/@value"/>
				<xsl:variable name="var50_select_nullFlavor" as="item()*" select="ns0:header/ns0:informationSource/ns0:author/ns0:authorTime/@nullFlavor"/>
				<xsl:variable name="var51_select_nullFlavor" as="item()*" select="ns0:header/ns0:informationSource/ns0:author/ns0:authorName/@nullFlavor"/>
				<author>
					<time>
						<xsl:if test="fn:exists($var50_select_nullFlavor)">
							<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var50_select_nullFlavor)"/>
						</xsl:if>
						<xsl:if test="fn:exists($var49_select_value)">
							<xsl:attribute name="value" namespace="" select="fn:string($var49_select_value)"/>
						</xsl:if>
					</time>
					<assignedAuthor>
						<id>
							<xsl:attribute name="nullFlavor" namespace="" select="'UNK'"/>
						</id>
						<assignedPerson>
							<name>
								<xsl:if test="fn:exists($var51_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var51_select_nullFlavor)"/>
								</xsl:if>
								<family>
									<xsl:for-each select="ns0:header/ns0:informationSource/ns0:author/ns0:authorName/ns0:family/node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</family>
								<given>
									<xsl:for-each select="ns0:header/ns0:informationSource/ns0:author/ns0:authorName/ns0:given/node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</given>
								<xsl:for-each select="ns0:header/ns0:informationSource/ns0:author/ns0:authorName/ns0:prefix">
									<prefix>
										<xsl:for-each select="node()[./self::text()]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</prefix>
								</xsl:for-each>
							</name>
						</assignedPerson>
					</assignedAuthor>
				</author>
			</xsl:for-each>
			<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:informationSource/ns0:informationSourceName">
				<informant>
					<assignedEntity>
						<assignedPerson>
							<xsl:for-each select="ns0:personName">
								<xsl:variable name="var52_select_nullFlavor" as="item()*" select="@nullFlavor"/>
								<name>
									<xsl:if test="fn:exists($var52_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var52_select_nullFlavor)"/>
									</xsl:if>
									<family>
										<xsl:for-each select="ns0:family/node()[./self::text()]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</family>
									<given>
										<xsl:for-each select="ns0:given/node()[./self::text()]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</given>
									<xsl:for-each select="ns0:prefix">
										<prefix>
											<xsl:for-each select="node()[./self::text()]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</prefix>
									</xsl:for-each>
								</name>
							</xsl:for-each>
						</assignedPerson>
						<representedOrganization>
							<xsl:for-each select="ns0:organizationName">
								<xsl:variable name="var53_select_nullFlavor" as="item()*" select="@nullFlavor"/>
								<xsl:if test="fn:exists($var53_select_nullFlavor)">
									<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var53_select_nullFlavor)"/>
								</xsl:if>
							</xsl:for-each>
							<xsl:for-each select="ns0:organizationName">
								<xsl:variable name="var54_select_nullFlavor" as="item()*" select="@nullFlavor"/>
								<name>
									<xsl:if test="fn:exists($var54_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var54_select_nullFlavor)"/>
									</xsl:if>
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</name>
							</xsl:for-each>
						</representedOrganization>
					</assignedEntity>
					<relatedEntity>
						<relatedPerson>
							<xsl:for-each select="ns0:relatedPersonName">
								<xsl:variable name="var55_select_nullFlavor" as="item()*" select="@nullFlavor"/>
								<name>
									<xsl:if test="fn:exists($var55_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var55_select_nullFlavor)"/>
									</xsl:if>
									<family>
										<xsl:for-each select="ns0:family/node()[./self::text()]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</family>
									<given>
										<xsl:for-each select="ns0:given/node()[./self::text()]">
											<xsl:sequence select="fn:string(.)"/>
										</xsl:for-each>
									</given>
									<xsl:for-each select="ns0:prefix">
										<prefix>
											<xsl:for-each select="node()[./self::text()]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</prefix>
									</xsl:for-each>
								</name>
							</xsl:for-each>
						</relatedPerson>
					</relatedEntity>
				</informant>
			</xsl:for-each>
			<xsl:for-each select="ns0:greenCCD">
				<custodian>
					<assignedCustodian>
						<representedCustodianOrganization>
							<xsl:for-each select="ns0:header/ns0:custodian/ns0:custodianID">
								<xsl:variable name="var56_select_nullFlavor" as="item()*" select="@nullFlavor"/>
								<xsl:variable name="var57_select_extension" as="item()*" select="@extension"/>
								<xsl:variable name="var58_select_root" as="item()*" select="@root"/>
								<id>
									<xsl:if test="fn:exists($var56_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var56_select_nullFlavor)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var58_select_root)">
										<xsl:attribute name="root" namespace="" select="fn:string($var58_select_root)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var57_select_extension)">
										<xsl:attribute name="extension" namespace="" select="fn:string($var57_select_extension)"/>
									</xsl:if>
								</id>
							</xsl:for-each>
							<xsl:for-each select="ns0:header/ns0:custodian/ns0:custodianName">
								<xsl:variable name="var59_select_nullFlavor" as="item()*" select="@nullFlavor"/>
								<name>
									<xsl:if test="fn:exists($var59_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var59_select_nullFlavor)"/>
									</xsl:if>
									<xsl:for-each select="node()[./self::text()]">
										<xsl:sequence select="fn:string(.)"/>
									</xsl:for-each>
								</name>
							</xsl:for-each>
						</representedCustodianOrganization>
					</assignedCustodian>
				</custodian>
			</xsl:for-each>
			<xsl:for-each select="ns0:greenCCD/ns0:header/ns0:healthcareProviders">
				<xsl:variable name="var60_select_operator" as="item()*" select="ns0:careProvisionDateRange/@operator"/>
				<xsl:variable name="var61_select_nullFlavor" as="item()*" select="ns0:careProvisionDateRange/@nullFlavor"/>
				<xsl:variable name="var62_select_value" as="item()*" select="ns0:careProvisionDateRange/@value"/>
				<documentationOf>
					<serviceEvent>
						<xsl:attribute name="classCode" namespace="" select="'PCPR'"/>
						<effectiveTime>
							<xsl:if test="fn:exists($var61_select_nullFlavor)">
								<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var61_select_nullFlavor)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var62_select_value)">
								<xsl:attribute name="value" namespace="" select="fn:string($var62_select_value)"/>
							</xsl:if>
							<xsl:if test="fn:exists($var60_select_operator)">
								<xsl:attribute name="operator" namespace="" select="fn:string($var60_select_operator)"/>
							</xsl:if>
							<xsl:for-each select="ns0:careProvisionDateRange/ns0:low">
								<xsl:variable name="var63_select_value" as="item()*" select="@value"/>
								<xsl:variable name="var64_select_nullFlavor" as="item()*" select="@nullFlavor"/>
								<low>
									<xsl:if test="fn:exists($var64_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var64_select_nullFlavor)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var63_select_value)">
										<xsl:attribute name="value" namespace="" select="fn:string($var63_select_value)"/>
									</xsl:if>
								</low>
							</xsl:for-each>
							<xsl:for-each select="ns0:careProvisionDateRange/ns0:width">
								<xsl:variable name="var65_select_unit" as="item()*" select="@unit"/>
								<xsl:variable name="var66_select_nullFlavor" as="item()*" select="@nullFlavor"/>
								<xsl:variable name="var67_select_value" as="item()*" select="@value"/>
								<width>
									<xsl:if test="fn:exists($var66_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var66_select_nullFlavor)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var67_select_value)">
										<xsl:attribute name="value" namespace="" select="fn:string($var67_select_value)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var65_select_unit)">
										<xsl:attribute name="unit" namespace="" select="fn:string($var65_select_unit)"/>
									</xsl:if>
								</width>
							</xsl:for-each>
							<xsl:for-each select="ns0:careProvisionDateRange/ns0:high">
								<xsl:variable name="var68_select_nullFlavor" as="item()*" select="@nullFlavor"/>
								<xsl:variable name="var69_select_value" as="item()*" select="@value"/>
								<high>
									<xsl:if test="fn:exists($var68_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var68_select_nullFlavor)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var69_select_value)">
										<xsl:attribute name="value" namespace="" select="fn:string($var69_select_value)"/>
									</xsl:if>
								</high>
							</xsl:for-each>
							<xsl:for-each select="ns0:careProvisionDateRange/ns0:center">
								<center>
									<xsl:call-template name="tbf:tbf1_TS">
										<xsl:with-param name="input" select="." as="node()"/>
									</xsl:call-template>
								</center>
							</xsl:for-each>
						</effectiveTime>
						<xsl:for-each select="ns0:healthcareProvider">
							<xsl:variable name="var70_select_codeSystem" as="item()*" select="ns0:role/@codeSystem"/>
							<xsl:variable name="var71_select_value" as="item()*" select="ns0:dateRange/@value"/>
							<xsl:variable name="var72_select_operator" as="item()*" select="ns0:dateRange/@operator"/>
							<xsl:variable name="var73_select_displayName" as="item()*" select="ns0:role/@displayName"/>
							<xsl:variable name="var74_select_nullFlavor" as="item()*" select="ns0:dateRange/@nullFlavor"/>
							<xsl:variable name="var75_select_codeSystemName" as="item()*" select="ns0:role/@codeSystemName"/>
							<xsl:variable name="var76_select_nullFlavor" as="item()*" select="ns0:role/@nullFlavor"/>
							<xsl:variable name="var77_select_code" as="item()*" select="ns0:role/@code"/>
							<performer>
								<xsl:attribute name="typeCode" namespace="" select="'PRF'"/>
								<functionCode>
									<xsl:if test="fn:exists($var76_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var76_select_nullFlavor)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var77_select_code)">
										<xsl:attribute name="code" namespace="" select="fn:string($var77_select_code)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var70_select_codeSystem)">
										<xsl:attribute name="codeSystem" namespace="" select="fn:string($var70_select_codeSystem)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var75_select_codeSystemName)">
										<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var75_select_codeSystemName)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var73_select_displayName)">
										<xsl:attribute name="displayName" namespace="" select="fn:string($var73_select_displayName)"/>
									</xsl:if>
									<xsl:for-each select="ns0:role/ns0:originalText">
										<originalText>
											<xsl:for-each select="node()[./self::text()]">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:for-each>
										</originalText>
									</xsl:for-each>
									<xsl:for-each select="ns0:role/ns0:qualifier">
										<xsl:variable name="var78_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
										<xsl:variable name="var79_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
										<xsl:variable name="var80_select_displayName" as="item()*" select="ns0:value/@displayName"/>
										<xsl:variable name="var81_select_displayName" as="item()*" select="ns0:name/@displayName"/>
										<xsl:variable name="var82_select_code" as="item()*" select="ns0:value/@code"/>
										<xsl:variable name="var83_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
										<xsl:variable name="var84_select_code" as="item()*" select="ns0:name/@code"/>
										<xsl:variable name="var85_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
										<xsl:variable name="var86_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
										<xsl:variable name="var87_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
										<qualifier>
											<name>
												<xsl:if test="fn:exists($var85_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var85_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var84_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var84_select_code)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var78_select_codeSystem)">
													<xsl:attribute name="codeSystem" namespace="" select="fn:string($var78_select_codeSystem)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var86_select_codeSystemName)">
													<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var86_select_codeSystemName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var81_select_displayName)">
													<xsl:attribute name="displayName" namespace="" select="fn:string($var81_select_displayName)"/>
												</xsl:if>
												<xsl:for-each select="ns0:name/ns0:originalText">
													<originalText>
														<xsl:sequence select="fn:string(.)"/>
													</originalText>
												</xsl:for-each>
												<xsl:for-each select="ns0:name/ns0:qualifier">
													<qualifier>
														<xsl:sequence select="()"/>
													</qualifier>
												</xsl:for-each>
											</name>
											<value>
												<xsl:if test="fn:exists($var79_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var79_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var82_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var82_select_code)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var87_select_codeSystem)">
													<xsl:attribute name="codeSystem" namespace="" select="fn:string($var87_select_codeSystem)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var83_select_codeSystemName)">
													<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var83_select_codeSystemName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var80_select_displayName)">
													<xsl:attribute name="displayName" namespace="" select="fn:string($var80_select_displayName)"/>
												</xsl:if>
												<xsl:for-each select="ns0:value/ns0:originalText">
													<originalText>
														<xsl:sequence select="fn:string(.)"/>
													</originalText>
												</xsl:for-each>
												<xsl:for-each select="ns0:value/ns0:qualifier">
													<qualifier>
														<xsl:sequence select="()"/>
													</qualifier>
												</xsl:for-each>
											</value>
										</qualifier>
									</xsl:for-each>
								</functionCode>
								<time>
									<xsl:if test="fn:exists($var74_select_nullFlavor)">
										<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var74_select_nullFlavor)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var71_select_value)">
										<xsl:attribute name="value" namespace="" select="fn:string($var71_select_value)"/>
									</xsl:if>
									<xsl:if test="fn:exists($var72_select_operator)">
										<xsl:attribute name="operator" namespace="" select="fn:string($var72_select_operator)"/>
									</xsl:if>
									<xsl:for-each select="ns0:dateRange/ns0:low">
										<xsl:variable name="var88_select_value" as="item()*" select="@value"/>
										<xsl:variable name="var89_select_nullFlavor" as="item()*" select="@nullFlavor"/>
										<low>
											<xsl:if test="fn:exists($var89_select_nullFlavor)">
												<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var89_select_nullFlavor)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var88_select_value)">
												<xsl:attribute name="value" namespace="" select="fn:string($var88_select_value)"/>
											</xsl:if>
										</low>
									</xsl:for-each>
									<xsl:for-each select="ns0:dateRange/ns0:width">
										<xsl:variable name="var90_select_unit" as="item()*" select="@unit"/>
										<xsl:variable name="var91_select_value" as="item()*" select="@value"/>
										<xsl:variable name="var92_select_nullFlavor" as="item()*" select="@nullFlavor"/>
										<width>
											<xsl:if test="fn:exists($var92_select_nullFlavor)">
												<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var92_select_nullFlavor)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var91_select_value)">
												<xsl:attribute name="value" namespace="" select="fn:string($var91_select_value)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var90_select_unit)">
												<xsl:attribute name="unit" namespace="" select="fn:string($var90_select_unit)"/>
											</xsl:if>
										</width>
									</xsl:for-each>
									<xsl:for-each select="ns0:dateRange/ns0:high">
										<xsl:variable name="var93_select_value" as="item()*" select="@value"/>
										<xsl:variable name="var94_select_nullFlavor" as="item()*" select="@nullFlavor"/>
										<high>
											<xsl:if test="fn:exists($var94_select_nullFlavor)">
												<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var94_select_nullFlavor)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var93_select_value)">
												<xsl:attribute name="value" namespace="" select="fn:string($var93_select_value)"/>
											</xsl:if>
										</high>
									</xsl:for-each>
									<xsl:for-each select="ns0:dateRange/ns0:center">
										<center>
											<xsl:call-template name="tbf:tbf1_TS">
												<xsl:with-param name="input" select="." as="node()"/>
											</xsl:call-template>
										</center>
									</xsl:for-each>
								</time>
								<assignedEntity>
									<xsl:for-each select="ns0:providerEntity/ns0:providerID">
										<xsl:variable name="var95_select_root" as="item()*" select="@root"/>
										<xsl:variable name="var96_select_nullFlavor" as="item()*" select="@nullFlavor"/>
										<xsl:variable name="var97_select_extension" as="item()*" select="@extension"/>
										<id>
											<xsl:if test="fn:exists($var96_select_nullFlavor)">
												<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var96_select_nullFlavor)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var95_select_root)">
												<xsl:attribute name="root" namespace="" select="fn:string($var95_select_root)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var97_select_extension)">
												<xsl:attribute name="extension" namespace="" select="fn:string($var97_select_extension)"/>
											</xsl:if>
										</id>
									</xsl:for-each>
									<xsl:for-each select="ns0:providerEntity/ns0:providerType">
										<xsl:variable name="var98_select_displayName" as="item()*" select="@displayName"/>
										<xsl:variable name="var99_select_codeSystem" as="item()*" select="@codeSystem"/>
										<xsl:variable name="var100_select_codeSystemName" as="item()*" select="@codeSystemName"/>
										<xsl:variable name="var101_select_code" as="item()*" select="@code"/>
										<xsl:variable name="var102_select_nullFlavor" as="item()*" select="@nullFlavor"/>
										<code>
											<xsl:if test="fn:exists($var102_select_nullFlavor)">
												<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var102_select_nullFlavor)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var101_select_code)">
												<xsl:attribute name="code" namespace="" select="fn:string($var101_select_code)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var99_select_codeSystem)">
												<xsl:attribute name="codeSystem" namespace="" select="fn:string($var99_select_codeSystem)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var100_select_codeSystemName)">
												<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var100_select_codeSystemName)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var98_select_displayName)">
												<xsl:attribute name="displayName" namespace="" select="fn:string($var98_select_displayName)"/>
											</xsl:if>
											<xsl:for-each select="ns0:originalText">
												<originalText>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</originalText>
											</xsl:for-each>
											<xsl:for-each select="ns0:qualifier">
												<xsl:variable name="var103_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
												<xsl:variable name="var104_select_code" as="item()*" select="ns0:name/@code"/>
												<xsl:variable name="var105_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
												<xsl:variable name="var106_select_displayName" as="item()*" select="ns0:name/@displayName"/>
												<xsl:variable name="var107_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
												<xsl:variable name="var108_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
												<xsl:variable name="var109_select_displayName" as="item()*" select="ns0:value/@displayName"/>
												<xsl:variable name="var110_select_code" as="item()*" select="ns0:value/@code"/>
												<xsl:variable name="var111_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
												<xsl:variable name="var112_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
												<qualifier>
													<name>
														<xsl:if test="fn:exists($var103_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var103_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var104_select_code)">
															<xsl:attribute name="code" namespace="" select="fn:string($var104_select_code)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var111_select_codeSystem)">
															<xsl:attribute name="codeSystem" namespace="" select="fn:string($var111_select_codeSystem)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var105_select_codeSystemName)">
															<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var105_select_codeSystemName)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var106_select_displayName)">
															<xsl:attribute name="displayName" namespace="" select="fn:string($var106_select_displayName)"/>
														</xsl:if>
														<xsl:for-each select="ns0:name/ns0:originalText">
															<originalText>
																<xsl:sequence select="fn:string(.)"/>
															</originalText>
														</xsl:for-each>
														<xsl:for-each select="ns0:name/ns0:qualifier">
															<qualifier>
																<xsl:sequence select="()"/>
															</qualifier>
														</xsl:for-each>
													</name>
													<value>
														<xsl:if test="fn:exists($var108_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var108_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var110_select_code)">
															<xsl:attribute name="code" namespace="" select="fn:string($var110_select_code)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var107_select_codeSystem)">
															<xsl:attribute name="codeSystem" namespace="" select="fn:string($var107_select_codeSystem)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var112_select_codeSystemName)">
															<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var112_select_codeSystemName)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var109_select_displayName)">
															<xsl:attribute name="displayName" namespace="" select="fn:string($var109_select_displayName)"/>
														</xsl:if>
														<xsl:for-each select="ns0:value/ns0:originalText">
															<originalText>
																<xsl:sequence select="fn:string(.)"/>
															</originalText>
														</xsl:for-each>
														<xsl:for-each select="ns0:value/ns0:qualifier">
															<qualifier>
																<xsl:sequence select="()"/>
															</qualifier>
														</xsl:for-each>
													</value>
												</qualifier>
											</xsl:for-each>
										</code>
									</xsl:for-each>
									<xsl:for-each select="ns0:providerEntity/ns0:providerAddress">
										<xsl:variable name="var113_select_nullFlavor" as="item()*" select="@nullFlavor"/>
										<addr>
											<xsl:if test="fn:exists($var113_select_nullFlavor)">
												<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var113_select_nullFlavor)"/>
											</xsl:if>
											<xsl:for-each select="ns0:state">
												<state>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</state>
											</xsl:for-each>
											<xsl:for-each select="ns0:city">
												<city>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</city>
											</xsl:for-each>
											<xsl:for-each select="ns0:postalCode">
												<postalCode>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</postalCode>
											</xsl:for-each>
											<xsl:for-each select="ns0:streetAddressLine">
												<streetAddressLine>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</streetAddressLine>
											</xsl:for-each>
										</addr>
									</xsl:for-each>
									<xsl:for-each select="ns0:providerEntity/ns0:providerTelecom">
										<xsl:variable name="var114_select_nullFlavor" as="item()*" select="@nullFlavor"/>
										<xsl:variable name="var115_select_value" as="item()*" select="@value"/>
										<telecom>
											<xsl:if test="fn:exists($var114_select_nullFlavor)">
												<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var114_select_nullFlavor)"/>
											</xsl:if>
											<xsl:if test="fn:exists($var115_select_value)">
												<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var115_select_value)))"/>
											</xsl:if>
										</telecom>
									</xsl:for-each>
									<assignedPerson>
										<xsl:for-each select="ns0:providerEntity/ns0:providerName">
											<xsl:variable name="var116_select_nullFlavor" as="item()*" select="@nullFlavor"/>
											<name>
												<xsl:if test="fn:exists($var116_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var116_select_nullFlavor)"/>
												</xsl:if>
												<family>
													<xsl:for-each select="ns0:family/node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</family>
												<given>
													<xsl:for-each select="ns0:given/node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</given>
												<xsl:for-each select="ns0:prefix">
													<prefix>
														<xsl:for-each select="node()[./self::text()]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</prefix>
												</xsl:for-each>
												<xsl:for-each select="ns0:suffix">
													<suffix>
														<xsl:for-each select="node()[./self::text()]">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:for-each>
													</suffix>
												</xsl:for-each>
											</name>
										</xsl:for-each>
									</assignedPerson>
									<representedOrganization>
										<xsl:for-each select="ns0:providerEntity/ns0:providerOrganizationName">
											<xsl:variable name="var117_select_nullFlavor" as="item()*" select="@nullFlavor"/>
											<name>
												<xsl:if test="fn:exists($var117_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var117_select_nullFlavor)"/>
												</xsl:if>
												<xsl:for-each select="node()[./self::text()]">
													<xsl:sequence select="fn:string(.)"/>
												</xsl:for-each>
											</name>
										</xsl:for-each>
									</representedOrganization>
								</assignedEntity>
							</performer>
						</xsl:for-each>
					</serviceEvent>
				</documentationOf>
			</xsl:for-each>
			<component>
				<structuredBody>
					<component>
						<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:results">
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.14'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'30954-2'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Results'"/>
								</title>
								<xsl:variable name="var118" as="node()?">
									<xsl:call-template name="user:resultsNarrative">
										<xsl:with-param name="results" as="node()">
											<ns0:results xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:results>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var118">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:result">
									<xsl:variable name="var119_select_nullFlavor" as="item()*" select="ns0:resultDateTime/@nullFlavor"/>
									<xsl:variable name="var120_select_codeSystemName" as="item()*" select="ns0:resultType/@codeSystemName"/>
									<xsl:variable name="var121_select_code" as="item()*" select="ns0:resultType/@code"/>
									<xsl:variable name="var122_select_code" as="item()*" select="ns0:resultStatus/@code"/>
									<xsl:variable name="var123_select_value" as="item()*" select="ns0:resultDateTime/@value"/>
									<xsl:variable name="var124_select_displayName" as="item()*" select="ns0:resultType/@displayName"/>
									<xsl:variable name="var125_select_codeSystem" as="item()*" select="ns0:resultType/@codeSystem"/>
									<xsl:variable name="var126_select_nullFlavor" as="item()*" select="ns0:resultType/@nullFlavor"/>
									<entry>
										<observation>
											<xsl:attribute name="classCode" namespace="" select="'OBS'"/>
											<xsl:attribute name="moodCode" namespace="" select="'EVN'"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.31'"/>
											</templateId>
											<xsl:for-each select="ns0:resultID">
												<xsl:variable name="var127_select_root" as="item()*" select="@root"/>
												<xsl:variable name="var128_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var129_select_extension" as="item()*" select="@extension"/>
												<id>
													<xsl:if test="fn:exists($var128_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var128_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var127_select_root)">
														<xsl:attribute name="root" namespace="" select="fn:string($var127_select_root)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var129_select_extension)">
														<xsl:attribute name="extension" namespace="" select="fn:string($var129_select_extension)"/>
													</xsl:if>
												</id>
											</xsl:for-each>
											<code>
												<xsl:if test="fn:exists($var126_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var126_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var121_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var121_select_code)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var125_select_codeSystem)">
													<xsl:attribute name="codeSystem" namespace="" select="fn:string($var125_select_codeSystem)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var120_select_codeSystemName)">
													<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var120_select_codeSystemName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var124_select_displayName)">
													<xsl:attribute name="displayName" namespace="" select="fn:string($var124_select_displayName)"/>
												</xsl:if>
											</code>
											<xsl:for-each select="ns0:comment">
												<text>
													<xsl:for-each select="ns0:text/node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</text>
											</xsl:for-each>
											<statusCode>
												<xsl:if test="fn:exists($var122_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var122_select_code)"/>
												</xsl:if>
											</statusCode>
											<effectiveTime>
												<xsl:if test="fn:exists($var119_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var119_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var123_select_value)">
													<xsl:attribute name="value" namespace="" select="fn:string($var123_select_value)"/>
												</xsl:if>
												<xsl:for-each select="ns0:resultDateTime/ns0:low">
													<xsl:variable name="var130_select_value" as="item()*" select="@value"/>
													<xsl:variable name="var131_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<low>
														<xsl:if test="fn:exists($var131_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var131_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var130_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var130_select_value)"/>
														</xsl:if>
													</low>
												</xsl:for-each>
												<xsl:for-each select="ns0:resultDateTime/ns0:width">
													<xsl:variable name="var132_select_unit" as="item()*" select="@unit"/>
													<xsl:variable name="var133_select_value" as="item()*" select="@value"/>
													<xsl:variable name="var134_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<width>
														<xsl:if test="fn:exists($var134_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var134_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var133_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var133_select_value)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var132_select_unit)">
															<xsl:attribute name="unit" namespace="" select="fn:string($var132_select_unit)"/>
														</xsl:if>
													</width>
												</xsl:for-each>
												<xsl:for-each select="ns0:resultDateTime/ns0:high">
													<xsl:variable name="var135_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<xsl:variable name="var136_select_value" as="item()*" select="@value"/>
													<high>
														<xsl:if test="fn:exists($var135_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var135_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var136_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var136_select_value)"/>
														</xsl:if>
													</high>
												</xsl:for-each>
												<xsl:for-each select="ns0:resultDateTime/ns0:center">
													<center>
														<xsl:call-template name="tbf:tbf1_TS">
															<xsl:with-param name="input" select="." as="node()"/>
														</xsl:call-template>
													</center>
												</xsl:for-each>
											</effectiveTime>
											<xsl:for-each select="ns0:resultValue/ns0:integer">
												<value>
													<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','INT')"/>
													<xsl:call-template name="tbf:tbf2_INT">
														<xsl:with-param name="input" select="." as="node()"/>
													</xsl:call-template>
												</value>
											</xsl:for-each>
											<xsl:for-each select="ns0:resultValue/ns0:monetaryAmount">
												<value>
													<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','MO')"/>
													<xsl:call-template name="tbf:tbf3_MO">
														<xsl:with-param name="input" select="." as="node()"/>
													</xsl:call-template>
												</value>
											</xsl:for-each>
											<xsl:for-each select="ns0:resultValue/ns0:physicalQuantity">
												<xsl:variable name="var137_select_value" as="item()*" select="@value"/>
												<xsl:variable name="var138_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var139_select_unit" as="item()*" select="@unit"/>
												<value>
													<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','PQ')"/>
													<xsl:if test="fn:exists($var138_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var138_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var137_select_value)">
														<xsl:attribute name="value" namespace="" select="fn:string($var137_select_value)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var139_select_unit)">
														<xsl:attribute name="unit" namespace="" select="fn:string($var139_select_unit)"/>
													</xsl:if>
												</value>
											</xsl:for-each>
											<xsl:for-each select="ns0:resultInterpretation">
												<xsl:variable name="var140_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var141_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var142_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var143_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var144_select_displayName" as="item()*" select="@displayName"/>
												<interpretationCode>
													<xsl:if test="fn:exists($var140_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var140_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var143_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var143_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var142_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var142_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var141_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var141_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var144_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var144_select_displayName)"/>
													</xsl:if>
												</interpretationCode>
											</xsl:for-each>
											<xsl:for-each select="ns0:comment/ns0:reason">
												<entryRelationship>
													<xsl:attribute name="typeCode" namespace="" select="'RSON'"/>
													<act>
														<templateId>
															<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.27'"/>
														</templateId>
													</act>
												</entryRelationship>
											</xsl:for-each>
											<referenceRange>
												<xsl:for-each select="ns0:resultReferenceRange">
													<observationRange>
														<text>
															<xsl:for-each select="node()[./self::text()]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</text>
													</observationRange>
												</xsl:for-each>
											</referenceRange>
										</observation>
									</entry>
								</xsl:for-each>
							</section>
						</xsl:for-each>
					</component>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:encounters">
						<xsl:variable name="var184" as="node()" select="."/>
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.3'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'46240-8'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Encounters'"/>
								</title>
								<xsl:variable name="var145" as="node()?">
									<xsl:call-template name="user:encountersNarrative">
										<xsl:with-param name="encounters" as="node()">
											<ns0:encounters xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:encounters>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var145">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
										<xsl:for-each select="$var184/ns0:text/ns0:br">
											<br>
												<xsl:sequence select="()"/>
											</br>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:encounter">
									<xsl:variable name="var146_select_nullFlavor" as="item()*" select="ns0:encounterDateTime/@nullFlavor"/>
									<xsl:variable name="var147_select_value" as="item()*" select="ns0:encounterDateTime/@value"/>
									<entry>
										<encounter>
											<xsl:attribute name="classCode" namespace="" select="'ENC'"/>
											<xsl:attribute name="moodCode" namespace="" select="'EVN'"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.21'"/>
											</templateId>
											<xsl:for-each select="ns0:encounterID">
												<xsl:variable name="var148_select_extension" as="item()*" select="@extension"/>
												<xsl:variable name="var149_select_root" as="item()*" select="@root"/>
												<xsl:variable name="var150_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<id>
													<xsl:if test="fn:exists($var150_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var150_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var149_select_root)">
														<xsl:attribute name="root" namespace="" select="fn:string($var149_select_root)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var148_select_extension)">
														<xsl:attribute name="extension" namespace="" select="fn:string($var148_select_extension)"/>
													</xsl:if>
												</id>
											</xsl:for-each>
											<xsl:for-each select="ns0:encounterType">
												<xsl:variable name="var151_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var152_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var153_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var154_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var155_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<code>
													<xsl:if test="fn:exists($var155_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var155_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var154_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var154_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var153_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var153_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var152_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var152_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var151_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var151_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:sequence select="fn:string(.)"/>
														</originalText>
													</xsl:for-each>
												</code>
											</xsl:for-each>
											<effectiveTime>
												<xsl:if test="fn:exists($var146_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var146_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var147_select_value)">
													<xsl:attribute name="value" namespace="" select="fn:string($var147_select_value)"/>
												</xsl:if>
												<xsl:for-each select="ns0:encounterDateTime/ns0:low">
													<xsl:variable name="var156_select_value" as="item()*" select="@value"/>
													<xsl:variable name="var157_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<low>
														<xsl:if test="fn:exists($var157_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var157_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var156_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var156_select_value)"/>
														</xsl:if>
													</low>
												</xsl:for-each>
												<xsl:for-each select="ns0:encounterDateTime/ns0:width">
													<xsl:variable name="var158_select_unit" as="item()*" select="@unit"/>
													<xsl:variable name="var159_select_value" as="item()*" select="@value"/>
													<xsl:variable name="var160_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<width>
														<xsl:if test="fn:exists($var160_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var160_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var159_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var159_select_value)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var158_select_unit)">
															<xsl:attribute name="unit" namespace="" select="fn:string($var158_select_unit)"/>
														</xsl:if>
													</width>
												</xsl:for-each>
												<xsl:for-each select="ns0:encounterDateTime/ns0:high">
													<xsl:variable name="var161_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<xsl:variable name="var162_select_value" as="item()*" select="@value"/>
													<high>
														<xsl:if test="fn:exists($var161_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var161_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var162_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var162_select_value)"/>
														</xsl:if>
													</high>
												</xsl:for-each>
												<xsl:for-each select="ns0:encounterDateTime/ns0:center">
													<center>
														<xsl:call-template name="tbf:tbf1_TS">
															<xsl:with-param name="input" select="." as="node()"/>
														</xsl:call-template>
													</center>
												</xsl:for-each>
											</effectiveTime>
											<xsl:for-each select="ns0:admissionType">
												<xsl:variable name="var163_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var164_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var165_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var166_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var167_select_code" as="item()*" select="@code"/>
												<priorityCode>
													<xsl:if test="fn:exists($var166_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var166_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var167_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var167_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var163_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var163_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var165_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var165_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var164_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var164_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:sequence select="fn:string(.)"/>
														</originalText>
													</xsl:for-each>
												</priorityCode>
											</xsl:for-each>
											<performer>
												<assignedEntity>
													<id>
														<xsl:attribute name="root" namespace="" select="'NI'"/>
													</id>
													<xsl:for-each select="ns0:encounterProvider">
														<representedOrganization>
															<xsl:for-each select="ns0:organizationID">
																<xsl:variable name="var168_select_root" as="item()*" select="@root"/>
																<xsl:variable name="var169_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<xsl:variable name="var170_select_extension" as="item()*" select="@extension"/>
																<id>
																	<xsl:if test="fn:exists($var169_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var169_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var168_select_root)">
																		<xsl:attribute name="root" namespace="" select="fn:string($var168_select_root)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var170_select_extension)">
																		<xsl:attribute name="extension" namespace="" select="fn:string($var170_select_extension)"/>
																	</xsl:if>
																</id>
															</xsl:for-each>
															<xsl:for-each select="ns0:organizationName">
																<xsl:variable name="var171_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<name>
																	<xsl:if test="fn:exists($var171_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var171_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</name>
															</xsl:for-each>
															<xsl:for-each select="ns0:organizationTelecom">
																<xsl:variable name="var172_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var173_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<telecom>
																	<xsl:if test="fn:exists($var173_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var173_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var172_select_value)">
																		<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var172_select_value)))"/>
																	</xsl:if>
																</telecom>
															</xsl:for-each>
															<xsl:for-each select="ns0:organizationAddress">
																<xsl:variable name="var174_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<addr>
																	<xsl:if test="fn:exists($var174_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var174_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:for-each select="ns0:state">
																		<state>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</state>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:city">
																		<city>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</city>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:postalCode">
																		<postalCode>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</postalCode>
																	</xsl:for-each>
																</addr>
															</xsl:for-each>
														</representedOrganization>
													</xsl:for-each>
												</assignedEntity>
											</performer>
											<xsl:for-each select="ns0:facilityLocation">
												<xsl:variable name="var175_select_value" as="item()*" select="ns0:locationDuration/@value"/>
												<xsl:variable name="var176_select_nullFlavor" as="item()*" select="ns0:locationDuration/@nullFlavor"/>
												<participant>
													<xsl:attribute name="typeCode" namespace="" select="'ORG'"/>
													<time>
														<xsl:if test="fn:exists($var176_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var176_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var175_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var175_select_value)"/>
														</xsl:if>
														<xsl:for-each select="ns0:locationDuration/ns0:low">
															<xsl:variable name="var177_select_value" as="item()*" select="@value"/>
															<xsl:variable name="var178_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<low>
																<xsl:if test="fn:exists($var178_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var178_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var177_select_value)">
																	<xsl:attribute name="value" namespace="" select="fn:string($var177_select_value)"/>
																</xsl:if>
															</low>
														</xsl:for-each>
														<xsl:for-each select="ns0:locationDuration/ns0:width">
															<xsl:variable name="var179_select_value" as="item()*" select="@value"/>
															<xsl:variable name="var180_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<xsl:variable name="var181_select_unit" as="item()*" select="@unit"/>
															<width>
																<xsl:if test="fn:exists($var180_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var180_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var179_select_value)">
																	<xsl:attribute name="value" namespace="" select="fn:string($var179_select_value)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var181_select_unit)">
																	<xsl:attribute name="unit" namespace="" select="fn:string($var181_select_unit)"/>
																</xsl:if>
															</width>
														</xsl:for-each>
														<xsl:for-each select="ns0:locationDuration/ns0:high">
															<xsl:variable name="var182_select_value" as="item()*" select="@value"/>
															<xsl:variable name="var183_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<high>
																<xsl:if test="fn:exists($var183_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var183_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var182_select_value)">
																	<xsl:attribute name="value" namespace="" select="fn:string($var182_select_value)"/>
																</xsl:if>
															</high>
														</xsl:for-each>
														<xsl:for-each select="ns0:locationDuration/ns0:center">
															<center>
																<xsl:call-template name="tbf:tbf1_TS">
																	<xsl:with-param name="input" select="." as="node()"/>
																</xsl:call-template>
															</center>
														</xsl:for-each>
													</time>
												</participant>
											</xsl:for-each>
											<xsl:for-each select="ns0:reasonForVisit">
												<entryRelationship>
													<xsl:attribute name="typeCode" namespace="" select="'RSON'"/>
													<encounter>
														<xsl:for-each select="ns0:text">
															<text>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</text>
														</xsl:for-each>
													</encounter>
												</entryRelationship>
											</xsl:for-each>
										</encounter>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:medications">
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.8'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'10160-0'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Medications'"/>
								</title>
								<xsl:variable name="var185" as="node()?">
									<xsl:call-template name="user:medicationsNarrative">
										<xsl:with-param name="medications" as="node()">
											<ns0:medications xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:medications>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var185">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:medication">
									<xsl:variable name="var324" as="node()" select="."/>
									<xsl:variable name="var186" as="xs:string" select="'EVN'"/>
									<entry>
										<substanceAdministration>
											<xsl:attribute name="classCode" namespace="" select="'SBADM'"/>
											<xsl:attribute name="moodCode" namespace="" select="$var186"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.24'"/>
											</templateId>
											<id>
												<xsl:attribute name="nullFlavor" namespace="" select="'NI'"/>
											</id>
											<xsl:for-each select="ns0:deliveryMethod">
												<xsl:variable name="var187_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var188_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var189_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var190_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var191_select_codeSystem" as="item()*" select="@codeSystem"/>
												<code>
													<xsl:if test="fn:exists($var189_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var189_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var188_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var188_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var191_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var191_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var187_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var187_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var190_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var190_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:for-each select="node()[./self::text()]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</originalText>
													</xsl:for-each>
												</code>
											</xsl:for-each>
											<xsl:for-each select="ns0:indicateMedicationStopped">
												<xsl:variable name="var192_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var193_select_value" as="item()*" select="@value"/>
												<effectiveTime>
													<xsl:if test="fn:exists($var192_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var192_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var193_select_value)">
														<xsl:attribute name="value" namespace="" select="fn:string($var193_select_value)"/>
													</xsl:if>
												</effectiveTime>
											</xsl:for-each>
											<xsl:for-each select="ns0:route">
												<xsl:variable name="var194_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var195_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var196_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var197_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var198_select_displayName" as="item()*" select="@displayName"/>
												<routeCode>
													<xsl:if test="fn:exists($var197_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var197_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var196_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var196_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var195_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var195_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var194_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var194_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var198_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var198_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:for-each select="node()[./self::text()]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</originalText>
													</xsl:for-each>
												</routeCode>
											</xsl:for-each>
											<xsl:for-each select="ns0:site">
												<xsl:variable name="var199_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var200_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var201_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var202_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var203_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<approachSiteCode>
													<xsl:if test="fn:exists($var201_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var201_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var200_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var200_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var199_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var199_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var203_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var203_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var202_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var202_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:for-each select="node()[./self::text()]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</originalText>
													</xsl:for-each>
												</approachSiteCode>
											</xsl:for-each>
											<xsl:for-each select="ns0:dose">
												<xsl:variable name="var204_select_value" as="item()*" select="@value"/>
												<xsl:variable name="var205_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var206_select_unit" as="item()*" select="@unit"/>
												<doseQuantity>
													<xsl:if test="fn:exists($var205_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var205_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var204_select_value)">
														<xsl:attribute name="value" namespace="" select="fn:string($var204_select_value)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var206_select_unit)">
														<xsl:attribute name="unit" namespace="" select="fn:string($var206_select_unit)"/>
													</xsl:if>
												</doseQuantity>
											</xsl:for-each>
											<xsl:for-each select="ns0:doseRestriction">
												<xsl:variable name="var207_select_unit" as="item()*" select="ns0:denominator/@unit"/>
												<xsl:variable name="var208_select_unit" as="item()*" select="ns0:numerator/@unit"/>
												<xsl:variable name="var209_select_value" as="item()*" select="ns0:denominator/@value"/>
												<xsl:variable name="var210_select_nullFlavor" as="item()*" select="ns0:denominator/@nullFlavor"/>
												<xsl:variable name="var211_select_value" as="item()*" select="ns0:numerator/@value"/>
												<xsl:variable name="var212_select_nullFlavor" as="item()*" select="ns0:numerator/@nullFlavor"/>
												<maxDoseQuantity>
													<numerator>
														<xsl:if test="fn:exists($var212_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var212_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var211_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var211_select_value)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var208_select_unit)">
															<xsl:attribute name="unit" namespace="" select="fn:string($var208_select_unit)"/>
														</xsl:if>
													</numerator>
													<denominator>
														<xsl:if test="fn:exists($var210_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var210_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var209_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var209_select_value)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var207_select_unit)">
															<xsl:attribute name="unit" namespace="" select="fn:string($var207_select_unit)"/>
														</xsl:if>
													</denominator>
												</maxDoseQuantity>
											</xsl:for-each>
											<xsl:for-each select="ns0:productForm">
												<xsl:variable name="var213_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var214_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var215_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var216_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var217_select_displayName" as="item()*" select="@displayName"/>
												<administrationUnitCode>
													<xsl:if test="fn:exists($var214_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var214_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var213_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var213_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var216_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var216_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var215_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var215_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var217_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var217_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:for-each select="node()[./self::text()]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</originalText>
													</xsl:for-each>
												</administrationUnitCode>
											</xsl:for-each>
											<consumable>
												<xsl:for-each select="ns0:medicationInformation">
													<xsl:variable name="var218_resultof_mapMedicationInformation" as="node()?">
														<xsl:call-template name="user:mapMedicationInformation">
															<xsl:with-param name="medicationInformation" as="node()">
																<ns0:medicationInformation xsl:exclude-result-prefixes="ns0">
																	<xsl:sequence select="(./@node(), ./node())"/>
																</ns0:medicationInformation>
															</xsl:with-param>
														</xsl:call-template>
													</xsl:variable>
													<xsl:if test="fn:exists($var218_resultof_mapMedicationInformation)">
														<manufacturedProduct>
															<xsl:sequence select="($var218_resultof_mapMedicationInformation/@node(), $var218_resultof_mapMedicationInformation/node())"/>
														</manufacturedProduct>
													</xsl:if>
												</xsl:for-each>
											</consumable>
											<xsl:for-each select="ns0:vehicle">
												<xsl:variable name="var219_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var220_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var221_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var222_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var223_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var224_select_name" as="item()*" select="@name"/>
												<participant>
													<xsl:if test="fn:exists($var219_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var219_select_nullFlavor)"/>
													</xsl:if>
													<xsl:attribute name="typeCode" namespace="" select="'CSM'"/>
													<participantRole>
														<xsl:attribute name="classCode" namespace="" select="'MANU'"/>
														<code>
															<xsl:attribute name="code" namespace="" select="'412307009'"/>
															<xsl:attribute name="codeSystem" namespace="" select="'2.16.840.1.113883.6.96'"/>
														</code>
														<playingEntity>
															<xsl:attribute name="classCode" namespace="" select="'MMAT'"/>
															<code>
																<xsl:if test="fn:exists($var219_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var219_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var220_select_code)">
																	<xsl:attribute name="code" namespace="" select="fn:string($var220_select_code)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var223_select_codeSystem)">
																	<xsl:attribute name="codeSystem" namespace="" select="fn:string($var223_select_codeSystem)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var222_select_codeSystemName)">
																	<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var222_select_codeSystemName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var221_select_displayName)">
																	<xsl:attribute name="displayName" namespace="" select="fn:string($var221_select_displayName)"/>
																</xsl:if>
																<xsl:for-each select="ns0:originalText">
																	<originalText>
																		<xsl:sequence select="fn:string(.)"/>
																	</originalText>
																</xsl:for-each>
																<xsl:for-each select="ns0:qualifier">
																	<xsl:variable name="var225_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																	<xsl:variable name="var226_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																	<xsl:variable name="var227_select_code" as="item()*" select="ns0:value/@code"/>
																	<xsl:variable name="var228_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																	<xsl:variable name="var229_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																	<xsl:variable name="var230_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																	<xsl:variable name="var231_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																	<xsl:variable name="var232_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																	<xsl:variable name="var233_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																	<xsl:variable name="var234_select_code" as="item()*" select="ns0:name/@code"/>
																	<qualifier>
																		<name>
																			<xsl:if test="fn:exists($var230_select_nullFlavor)">
																				<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var230_select_nullFlavor)"/>
																			</xsl:if>
																			<xsl:if test="fn:exists($var234_select_code)">
																				<xsl:attribute name="code" namespace="" select="fn:string($var234_select_code)"/>
																			</xsl:if>
																			<xsl:if test="fn:exists($var229_select_codeSystem)">
																				<xsl:attribute name="codeSystem" namespace="" select="fn:string($var229_select_codeSystem)"/>
																			</xsl:if>
																			<xsl:if test="fn:exists($var228_select_codeSystemName)">
																				<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var228_select_codeSystemName)"/>
																			</xsl:if>
																			<xsl:if test="fn:exists($var226_select_displayName)">
																				<xsl:attribute name="displayName" namespace="" select="fn:string($var226_select_displayName)"/>
																			</xsl:if>
																			<xsl:for-each select="ns0:name/ns0:originalText">
																				<originalText>
																					<xsl:sequence select="fn:string(.)"/>
																				</originalText>
																			</xsl:for-each>
																			<xsl:for-each select="ns0:name/ns0:qualifier">
																				<qualifier>
																					<xsl:sequence select="()"/>
																				</qualifier>
																			</xsl:for-each>
																		</name>
																		<value>
																			<xsl:if test="fn:exists($var231_select_nullFlavor)">
																				<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var231_select_nullFlavor)"/>
																			</xsl:if>
																			<xsl:if test="fn:exists($var227_select_code)">
																				<xsl:attribute name="code" namespace="" select="fn:string($var227_select_code)"/>
																			</xsl:if>
																			<xsl:if test="fn:exists($var225_select_codeSystem)">
																				<xsl:attribute name="codeSystem" namespace="" select="fn:string($var225_select_codeSystem)"/>
																			</xsl:if>
																			<xsl:if test="fn:exists($var232_select_codeSystemName)">
																				<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var232_select_codeSystemName)"/>
																			</xsl:if>
																			<xsl:if test="fn:exists($var233_select_displayName)">
																				<xsl:attribute name="displayName" namespace="" select="fn:string($var233_select_displayName)"/>
																			</xsl:if>
																			<xsl:for-each select="ns0:value/ns0:originalText">
																				<originalText>
																					<xsl:sequence select="fn:string(.)"/>
																				</originalText>
																			</xsl:for-each>
																			<xsl:for-each select="ns0:value/ns0:qualifier">
																				<qualifier>
																					<xsl:sequence select="()"/>
																				</qualifier>
																			</xsl:for-each>
																		</value>
																	</qualifier>
																</xsl:for-each>
															</code>
															<name>
																<xsl:if test="fn:exists($var224_select_name)">
																	<xsl:sequence select="fn:string($var224_select_name)"/>
																</xsl:if>
															</name>
														</playingEntity>
													</participantRole>
												</participant>
											</xsl:for-each>
											<xsl:for-each select="ns0:typeOfMedication">
												<xsl:variable name="var235_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var236_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var237_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var238_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var239_select_codeSystem" as="item()*" select="@codeSystem"/>
												<entryRelationship>
													<xsl:if test="fn:exists($var235_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var235_select_nullFlavor)"/>
													</xsl:if>
													<xsl:attribute name="typeCode" namespace="" select="'SUBJ'"/>
													<observation>
														<xsl:attribute name="classCode" namespace="" select="'OBS'"/>
														<xsl:attribute name="moodCode" namespace="" select="$var186"/>
														<templateId>
															<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.3.88.11.83.8.1'"/>
														</templateId>
														<value>
															<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','CD')"/>
															<xsl:if test="fn:exists($var235_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var235_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var238_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var238_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var239_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var239_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var236_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var236_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var237_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var237_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:qualifier">
																<xsl:variable name="var240_select_code" as="item()*" select="ns0:name/@code"/>
																<xsl:variable name="var241_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																<xsl:variable name="var242_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																<xsl:variable name="var243_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																<xsl:variable name="var244_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																<xsl:variable name="var245_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																<xsl:variable name="var246_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																<xsl:variable name="var247_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																<xsl:variable name="var248_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																<xsl:variable name="var249_select_code" as="item()*" select="ns0:value/@code"/>
																<qualifier>
																	<name>
																		<xsl:if test="fn:exists($var243_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var243_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var240_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var240_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var245_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var245_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var248_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var248_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var247_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var247_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:name/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:name/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</name>
																	<value>
																		<xsl:if test="fn:exists($var242_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var242_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var249_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var249_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var246_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var246_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var244_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var244_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var241_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var241_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:value/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:value/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</value>
																</qualifier>
															</xsl:for-each>
														</value>
													</observation>
												</entryRelationship>
											</xsl:for-each>
											<xsl:for-each select="ns0:statusOfMedication">
												<xsl:variable name="var250_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var251_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var252_select_status" as="item()*" select="@status"/>
												<xsl:variable name="var253_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var254_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var255_select_codeSystem" as="item()*" select="@codeSystem"/>
												<entryRelationship>
													<xsl:if test="fn:exists($var251_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var251_select_nullFlavor)"/>
													</xsl:if>
													<xsl:attribute name="typeCode" namespace="" select="'REFR'"/>
													<observation>
														<xsl:attribute name="classCode" namespace="" select="'OBS'"/>
														<xsl:attribute name="moodCode" namespace="" select="$var186"/>
														<templateId>
															<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.47'"/>
														</templateId>
														<statusCode>
															<xsl:if test="fn:exists($var252_select_status)">
																<xsl:attribute name="code" namespace="" select="fn:string($var252_select_status)"/>
															</xsl:if>
														</statusCode>
														<value>
															<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','CD')"/>
															<xsl:if test="fn:exists($var251_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var251_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var254_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var254_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var255_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var255_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var253_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var253_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var250_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var250_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:qualifier">
																<xsl:variable name="var256_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																<xsl:variable name="var257_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																<xsl:variable name="var258_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																<xsl:variable name="var259_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																<xsl:variable name="var260_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																<xsl:variable name="var261_select_code" as="item()*" select="ns0:value/@code"/>
																<xsl:variable name="var262_select_code" as="item()*" select="ns0:name/@code"/>
																<xsl:variable name="var263_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																<xsl:variable name="var264_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																<xsl:variable name="var265_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																<qualifier>
																	<name>
																		<xsl:if test="fn:exists($var265_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var265_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var262_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var262_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var260_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var260_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var257_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var257_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var263_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var263_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:name/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:name/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</name>
																	<value>
																		<xsl:if test="fn:exists($var258_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var258_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var261_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var261_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var259_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var259_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var264_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var264_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var256_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var256_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:value/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:value/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</value>
																</qualifier>
															</xsl:for-each>
														</value>
													</observation>
												</entryRelationship>
											</xsl:for-each>
											<xsl:for-each select="ns0:indication">
												<xsl:variable name="var266_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var267_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var268_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var269_select_status" as="item()*" select="@status"/>
												<xsl:variable name="var270_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var271_select_code" as="item()*" select="@code"/>
												<entryRelationship>
													<xsl:if test="fn:exists($var268_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var268_select_nullFlavor)"/>
													</xsl:if>
													<xsl:attribute name="typeCode" namespace="" select="'RSON'"/>
													<observation>
														<xsl:attribute name="classCode" namespace="" select="'OBS'"/>
														<xsl:attribute name="moodCode" namespace="" select="$var186"/>
														<templateId>
															<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.28'"/>
														</templateId>
														<code>
															<xsl:if test="fn:exists($var268_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var268_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var271_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var271_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var270_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var270_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var267_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var267_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var266_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var266_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:qualifier">
																<xsl:variable name="var272_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																<xsl:variable name="var273_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																<xsl:variable name="var274_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																<xsl:variable name="var275_select_code" as="item()*" select="ns0:name/@code"/>
																<xsl:variable name="var276_select_code" as="item()*" select="ns0:value/@code"/>
																<xsl:variable name="var277_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																<xsl:variable name="var278_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																<xsl:variable name="var279_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																<xsl:variable name="var280_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																<xsl:variable name="var281_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																<qualifier>
																	<name>
																		<xsl:if test="fn:exists($var280_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var280_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var275_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var275_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var278_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var278_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var281_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var281_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var273_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var273_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:name/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:name/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</name>
																	<value>
																		<xsl:if test="fn:exists($var272_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var272_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var276_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var276_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var274_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var274_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var279_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var279_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var277_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var277_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:value/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:value/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</value>
																</qualifier>
															</xsl:for-each>
														</code>
														<statusCode>
															<xsl:if test="fn:exists($var269_select_status)">
																<xsl:attribute name="code" namespace="" select="fn:string($var269_select_status)"/>
															</xsl:if>
														</statusCode>
													</observation>
												</entryRelationship>
											</xsl:for-each>
											<xsl:for-each select="ns0:patientInstructions">
												<entryRelationship>
													<act>
														<templateId>
															<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.49'"/>
														</templateId>
														<text>
															<xsl:for-each select="node()[./self::text()]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</text>
													</act>
												</entryRelationship>
											</xsl:for-each>
											<xsl:for-each select="ns0:reaction">
												<xsl:variable name="var282_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var283_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var284_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var285_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var286_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<entryRelationship>
													<xsl:if test="fn:exists($var285_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var285_select_nullFlavor)"/>
													</xsl:if>
													<xsl:attribute name="typeCode" namespace="" select="'CAUS'"/>
													<observation>
														<templateId>
															<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.54'"/>
														</templateId>
														<code>
															<xsl:if test="fn:exists($var285_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var285_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var284_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var284_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var283_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var283_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var286_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var286_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var282_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var282_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:qualifier">
																<xsl:variable name="var287_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																<xsl:variable name="var288_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																<xsl:variable name="var289_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																<xsl:variable name="var290_select_code" as="item()*" select="ns0:name/@code"/>
																<xsl:variable name="var291_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																<xsl:variable name="var292_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																<xsl:variable name="var293_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																<xsl:variable name="var294_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																<xsl:variable name="var295_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																<xsl:variable name="var296_select_code" as="item()*" select="ns0:value/@code"/>
																<qualifier>
																	<name>
																		<xsl:if test="fn:exists($var293_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var293_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var290_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var290_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var288_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var288_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var287_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var287_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var289_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var289_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:name/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:name/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</name>
																	<value>
																		<xsl:if test="fn:exists($var291_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var291_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var296_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var296_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var292_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var292_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var294_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var294_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var295_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var295_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:value/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:value/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</value>
																</qualifier>
															</xsl:for-each>
														</code>
													</observation>
												</entryRelationship>
											</xsl:for-each>
											<xsl:for-each select="ns0:orderInformation">
												<entryRelationship>
													<xsl:attribute name="typeCode" namespace="" select="'REFR'"/>
													<supply>
														<xsl:attribute name="moodCode" namespace="" select="'INT'"/>
														<xsl:for-each select="ns0:orderNumber">
															<xsl:variable name="var297_select_extension" as="item()*" select="@extension"/>
															<xsl:variable name="var298_select_root" as="item()*" select="@root"/>
															<xsl:variable name="var299_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<id>
																<xsl:if test="fn:exists($var299_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var299_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var298_select_root)">
																	<xsl:attribute name="root" namespace="" select="fn:string($var298_select_root)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var297_select_extension)">
																	<xsl:attribute name="extension" namespace="" select="fn:string($var297_select_extension)"/>
																</xsl:if>
															</id>
														</xsl:for-each>
														<xsl:for-each select="ns0:orderExpirationDateTime">
															<xsl:variable name="var300_select_value" as="item()*" select="@value"/>
															<xsl:variable name="var301_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<effectiveTime>
																<xsl:if test="fn:exists($var301_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var301_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var300_select_value)">
																	<xsl:attribute name="value" namespace="" select="fn:string($var300_select_value)"/>
																</xsl:if>
															</effectiveTime>
														</xsl:for-each>
														<xsl:for-each select="ns0:fills">
															<xsl:variable name="var302_select_value" as="item()*" select="@value"/>
															<repeatNumber>
																<xsl:if test="fn:exists($var302_select_value)">
																	<xsl:attribute name="value" namespace="" select="xs:string(xs:integer(fn:string($var302_select_value)))"/>
																</xsl:if>
															</repeatNumber>
														</xsl:for-each>
														<xsl:for-each select="ns0:quantityOrdered">
															<xsl:variable name="var303_select_value" as="item()*" select="@value"/>
															<xsl:variable name="var304_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<xsl:variable name="var305_select_unit" as="item()*" select="@unit"/>
															<quantity>
																<xsl:if test="fn:exists($var304_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var304_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var303_select_value)">
																	<xsl:attribute name="value" namespace="" select="fn:string($var303_select_value)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var305_select_unit)">
																	<xsl:attribute name="unit" namespace="" select="fn:string($var305_select_unit)"/>
																</xsl:if>
															</quantity>
														</xsl:for-each>
														<author>
															<xsl:for-each select="ns0:orderDateTime">
																<xsl:variable name="var306_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var307_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<time>
																	<xsl:if test="fn:exists($var307_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var307_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var306_select_value)">
																		<xsl:attribute name="value" namespace="" select="fn:string($var306_select_value)"/>
																	</xsl:if>
																</time>
															</xsl:for-each>
														</author>
													</supply>
												</entryRelationship>
											</xsl:for-each>
											<xsl:for-each select="ns0:fulfillmentInstructions">
												<entryRelationship>
													<act>
														<templateId>
															<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.43'"/>
														</templateId>
														<text>
															<xsl:for-each select="node()[./self::text()]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</text>
													</act>
													<xsl:for-each select="$var324/ns0:fulfillmentHistory">
														<supply>
															<xsl:attribute name="moodCode" namespace="" select="$var186"/>
															<xsl:for-each select="ns0:prescriptionNumber">
																<xsl:variable name="var308_select_extension" as="item()*" select="@extension"/>
																<xsl:variable name="var309_select_root" as="item()*" select="@root"/>
																<xsl:variable name="var310_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<id>
																	<xsl:if test="fn:exists($var310_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var310_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var309_select_root)">
																		<xsl:attribute name="root" namespace="" select="fn:string($var309_select_root)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var308_select_extension)">
																		<xsl:attribute name="extension" namespace="" select="fn:string($var308_select_extension)"/>
																	</xsl:if>
																</id>
															</xsl:for-each>
															<xsl:for-each select="ns0:dispenseDate">
																<xsl:variable name="var311_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var312_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<effectiveTime>
																	<xsl:if test="fn:exists($var312_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var312_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var311_select_value)">
																		<xsl:attribute name="value" namespace="" select="fn:string($var311_select_value)"/>
																	</xsl:if>
																</effectiveTime>
															</xsl:for-each>
															<xsl:for-each select="ns0:quantityDispensed">
																<xsl:variable name="var313_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var314_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<xsl:variable name="var315_select_unit" as="item()*" select="@unit"/>
																<quantity>
																	<xsl:if test="fn:exists($var314_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var314_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var313_select_value)">
																		<xsl:attribute name="value" namespace="" select="fn:string($var313_select_value)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var315_select_unit)">
																		<xsl:attribute name="unit" namespace="" select="fn:string($var315_select_unit)"/>
																	</xsl:if>
																</quantity>
															</xsl:for-each>
															<performer>
																<assignedEntity>
																	<xsl:for-each select="ns0:dispensingPharmacyLocation">
																		<xsl:variable name="var316_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																		<addr>
																			<xsl:if test="fn:exists($var316_select_nullFlavor)">
																				<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var316_select_nullFlavor)"/>
																			</xsl:if>
																			<xsl:for-each select="ns0:state">
																				<state>
																					<xsl:for-each select="node()[./self::text()]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</state>
																			</xsl:for-each>
																			<xsl:for-each select="ns0:city">
																				<city>
																					<xsl:for-each select="node()[./self::text()]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</city>
																			</xsl:for-each>
																			<xsl:for-each select="ns0:postalCode">
																				<postalCode>
																					<xsl:for-each select="node()[./self::text()]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</postalCode>
																			</xsl:for-each>
																			<xsl:for-each select="ns0:streetAddressLine">
																				<streetAddressLine>
																					<xsl:for-each select="node()[./self::text()]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</streetAddressLine>
																			</xsl:for-each>
																		</addr>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:provider">
																		<representedOrganization>
																			<xsl:for-each select="ns0:organizationID">
																				<xsl:variable name="var317_select_root" as="item()*" select="@root"/>
																				<xsl:variable name="var318_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																				<xsl:variable name="var319_select_extension" as="item()*" select="@extension"/>
																				<id>
																					<xsl:if test="fn:exists($var318_select_nullFlavor)">
																						<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var318_select_nullFlavor)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var317_select_root)">
																						<xsl:attribute name="root" namespace="" select="fn:string($var317_select_root)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var319_select_extension)">
																						<xsl:attribute name="extension" namespace="" select="fn:string($var319_select_extension)"/>
																					</xsl:if>
																				</id>
																			</xsl:for-each>
																			<xsl:for-each select="ns0:organizationName">
																				<xsl:variable name="var320_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																				<name>
																					<xsl:if test="fn:exists($var320_select_nullFlavor)">
																						<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var320_select_nullFlavor)"/>
																					</xsl:if>
																					<xsl:for-each select="node()[./self::text()]">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:for-each>
																				</name>
																			</xsl:for-each>
																			<xsl:for-each select="ns0:organizationTelecom">
																				<xsl:variable name="var321_select_value" as="item()*" select="@value"/>
																				<xsl:variable name="var322_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																				<telecom>
																					<xsl:if test="fn:exists($var322_select_nullFlavor)">
																						<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var322_select_nullFlavor)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var321_select_value)">
																						<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var321_select_value)))"/>
																					</xsl:if>
																				</telecom>
																			</xsl:for-each>
																			<xsl:for-each select="ns0:organizationAddress">
																				<xsl:variable name="var323_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																				<addr>
																					<xsl:if test="fn:exists($var323_select_nullFlavor)">
																						<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var323_select_nullFlavor)"/>
																					</xsl:if>
																					<xsl:for-each select="ns0:state">
																						<state>
																							<xsl:for-each select="node()[./self::text()]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</state>
																					</xsl:for-each>
																					<xsl:for-each select="ns0:city">
																						<city>
																							<xsl:for-each select="node()[./self::text()]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</city>
																					</xsl:for-each>
																					<xsl:for-each select="ns0:postalCode">
																						<postalCode>
																							<xsl:for-each select="node()[./self::text()]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</postalCode>
																					</xsl:for-each>
																					<xsl:for-each select="ns0:streetAddressLine">
																						<streetAddressLine>
																							<xsl:for-each select="node()[./self::text()]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</streetAddressLine>
																					</xsl:for-each>
																				</addr>
																			</xsl:for-each>
																		</representedOrganization>
																	</xsl:for-each>
																</assignedEntity>
															</performer>
															<entryRelationship>
																<xsl:attribute name="typeCode" namespace="" select="'COMP'"/>
																<xsl:for-each select="ns0:fillNumber">
																	<sequenceNumber>
																		<xsl:call-template name="tbf:tbf2_INT">
																			<xsl:with-param name="input" select="." as="node()"/>
																		</xsl:call-template>
																	</sequenceNumber>
																</xsl:for-each>
															</entryRelationship>
														</supply>
													</xsl:for-each>
												</entryRelationship>
											</xsl:for-each>
											<xsl:for-each select="ns0:doseIndicator">
												<precondition>
													<criterion>
														<xsl:for-each select="node()[./self::text()]">
															<text>
																<xsl:sequence select="fn:string(.)"/>
															</text>
														</xsl:for-each>
													</criterion>
												</precondition>
											</xsl:for-each>
										</substanceAdministration>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:planOfCare">
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.10'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'18776-5'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Plan of Care'"/>
								</title>
								<xsl:variable name="var325" as="node()?">
									<xsl:call-template name="user:planOfCareNarrative">
										<xsl:with-param name="planOfCare" as="node()">
											<ns0:planOfCare xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:planOfCare>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var325">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:plannedAct">
									<xsl:variable name="var326_select_displayName" as="item()*" select="ns0:planType/@displayName"/>
									<xsl:variable name="var327_select_extension" as="item()*" select="ns0:planId/@extension"/>
									<xsl:variable name="var328_select_codeSystemName" as="item()*" select="ns0:planType/@codeSystemName"/>
									<xsl:variable name="var329_select_root" as="item()*" select="ns0:planId/@root"/>
									<xsl:variable name="var330_select_nullFlavor" as="item()*" select="ns0:planId/@nullFlavor"/>
									<xsl:variable name="var331_select_code" as="item()*" select="ns0:planType/@code"/>
									<xsl:variable name="var332_select_nullFlavor" as="item()*" select="ns0:planType/@nullFlavor"/>
									<xsl:variable name="var333_select_codeSystem" as="item()*" select="ns0:planType/@codeSystem"/>
									<entry>
										<templateId>
											<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.25'"/>
										</templateId>
										<act>
											<xsl:attribute name="moodCode" namespace="" select="'INT'"/>
											<id>
												<xsl:if test="fn:exists($var330_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var330_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var329_select_root)">
													<xsl:attribute name="root" namespace="" select="fn:string($var329_select_root)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var327_select_extension)">
													<xsl:attribute name="extension" namespace="" select="fn:string($var327_select_extension)"/>
												</xsl:if>
											</id>
											<code>
												<xsl:if test="fn:exists($var332_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var332_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var331_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var331_select_code)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var333_select_codeSystem)">
													<xsl:attribute name="codeSystem" namespace="" select="fn:string($var333_select_codeSystem)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var328_select_codeSystemName)">
													<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var328_select_codeSystemName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var326_select_displayName)">
													<xsl:attribute name="displayName" namespace="" select="fn:string($var326_select_displayName)"/>
												</xsl:if>
											</code>
											<xsl:for-each select="ns0:planFreeText">
												<text>
													<xsl:sequence select="fn:string(.)"/>
												</text>
											</xsl:for-each>
											<xsl:for-each select="ns0:plannedTime">
												<xsl:variable name="var334_select_value" as="item()*" select="@value"/>
												<xsl:variable name="var335_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<effectiveTime>
													<xsl:if test="fn:exists($var335_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var335_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var334_select_value)">
														<xsl:attribute name="value" namespace="" select="fn:string($var334_select_value)"/>
													</xsl:if>
													<xsl:for-each select="ns0:low">
														<xsl:variable name="var336_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var337_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<low>
															<xsl:if test="fn:exists($var337_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var337_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var336_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var336_select_value)"/>
															</xsl:if>
														</low>
													</xsl:for-each>
													<xsl:for-each select="ns0:width">
														<xsl:variable name="var338_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var339_select_unit" as="item()*" select="@unit"/>
														<xsl:variable name="var340_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<width>
															<xsl:if test="fn:exists($var340_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var340_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var338_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var338_select_value)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var339_select_unit)">
																<xsl:attribute name="unit" namespace="" select="fn:string($var339_select_unit)"/>
															</xsl:if>
														</width>
													</xsl:for-each>
													<xsl:for-each select="ns0:high">
														<xsl:variable name="var341_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var342_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<high>
															<xsl:if test="fn:exists($var342_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var342_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var341_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var341_select_value)"/>
															</xsl:if>
														</high>
													</xsl:for-each>
													<xsl:for-each select="ns0:center">
														<center>
															<xsl:call-template name="tbf:tbf1_TS">
																<xsl:with-param name="input" select="." as="node()"/>
															</xsl:call-template>
														</center>
													</xsl:for-each>
												</effectiveTime>
											</xsl:for-each>
										</act>
									</entry>
								</xsl:for-each>
								<xsl:for-each select="ns0:plannedObservation">
									<xsl:variable name="var343_select_root" as="item()*" select="ns0:planId/@root"/>
									<xsl:variable name="var344_select_displayName" as="item()*" select="ns0:planType/@displayName"/>
									<xsl:variable name="var345_select_extension" as="item()*" select="ns0:planId/@extension"/>
									<xsl:variable name="var346_select_code" as="item()*" select="ns0:planType/@code"/>
									<xsl:variable name="var347_select_nullFlavor" as="item()*" select="ns0:planType/@nullFlavor"/>
									<xsl:variable name="var348_select_codeSystem" as="item()*" select="ns0:planType/@codeSystem"/>
									<xsl:variable name="var349_select_nullFlavor" as="item()*" select="ns0:planId/@nullFlavor"/>
									<xsl:variable name="var350_select_codeSystemName" as="item()*" select="ns0:planType/@codeSystemName"/>
									<entry>
										<observation>
											<xsl:attribute name="classCode" namespace="" select="'OBS'"/>
											<xsl:attribute name="moodCode" namespace="" select="'INT'"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.25'"/>
											</templateId>
											<id>
												<xsl:if test="fn:exists($var349_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var349_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var343_select_root)">
													<xsl:attribute name="root" namespace="" select="fn:string($var343_select_root)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var345_select_extension)">
													<xsl:attribute name="extension" namespace="" select="fn:string($var345_select_extension)"/>
												</xsl:if>
											</id>
											<code>
												<xsl:if test="fn:exists($var347_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var347_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var346_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var346_select_code)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var348_select_codeSystem)">
													<xsl:attribute name="codeSystem" namespace="" select="fn:string($var348_select_codeSystem)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var350_select_codeSystemName)">
													<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var350_select_codeSystemName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var344_select_displayName)">
													<xsl:attribute name="displayName" namespace="" select="fn:string($var344_select_displayName)"/>
												</xsl:if>
											</code>
											<xsl:for-each select="ns0:planFreeText">
												<text>
													<xsl:sequence select="fn:string(.)"/>
												</text>
											</xsl:for-each>
											<xsl:for-each select="ns0:plannedTime">
												<xsl:variable name="var351_select_value" as="item()*" select="@value"/>
												<xsl:variable name="var352_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<effectiveTime>
													<xsl:if test="fn:exists($var352_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var352_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var351_select_value)">
														<xsl:attribute name="value" namespace="" select="fn:string($var351_select_value)"/>
													</xsl:if>
													<xsl:for-each select="ns0:low">
														<xsl:variable name="var353_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var354_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<low>
															<xsl:if test="fn:exists($var354_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var354_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var353_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var353_select_value)"/>
															</xsl:if>
														</low>
													</xsl:for-each>
													<xsl:for-each select="ns0:width">
														<xsl:variable name="var355_select_unit" as="item()*" select="@unit"/>
														<xsl:variable name="var356_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var357_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<width>
															<xsl:if test="fn:exists($var357_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var357_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var356_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var356_select_value)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var355_select_unit)">
																<xsl:attribute name="unit" namespace="" select="fn:string($var355_select_unit)"/>
															</xsl:if>
														</width>
													</xsl:for-each>
													<xsl:for-each select="ns0:high">
														<xsl:variable name="var358_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var359_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<high>
															<xsl:if test="fn:exists($var359_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var359_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var358_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var358_select_value)"/>
															</xsl:if>
														</high>
													</xsl:for-each>
													<xsl:for-each select="ns0:center">
														<center>
															<xsl:call-template name="tbf:tbf1_TS">
																<xsl:with-param name="input" select="." as="node()"/>
															</xsl:call-template>
														</center>
													</xsl:for-each>
												</effectiveTime>
											</xsl:for-each>
										</observation>
									</entry>
								</xsl:for-each>
								<xsl:for-each select="ns0:plannedProcedure">
									<xsl:variable name="var360_select_codeSystemName" as="item()*" select="ns0:planType/@codeSystemName"/>
									<xsl:variable name="var361_select_displayName" as="item()*" select="ns0:planType/@displayName"/>
									<xsl:variable name="var362_select_nullFlavor" as="item()*" select="ns0:planId/@nullFlavor"/>
									<xsl:variable name="var363_select_code" as="item()*" select="ns0:planType/@code"/>
									<xsl:variable name="var364_select_nullFlavor" as="item()*" select="ns0:planType/@nullFlavor"/>
									<xsl:variable name="var365_select_root" as="item()*" select="ns0:planId/@root"/>
									<xsl:variable name="var366_select_codeSystem" as="item()*" select="ns0:planType/@codeSystem"/>
									<xsl:variable name="var367_select_extension" as="item()*" select="ns0:planId/@extension"/>
									<entry>
										<procedure>
											<xsl:attribute name="moodCode" namespace="" select="'INT'"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.25'"/>
											</templateId>
											<id>
												<xsl:if test="fn:exists($var362_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var362_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var365_select_root)">
													<xsl:attribute name="root" namespace="" select="fn:string($var365_select_root)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var367_select_extension)">
													<xsl:attribute name="extension" namespace="" select="fn:string($var367_select_extension)"/>
												</xsl:if>
											</id>
											<code>
												<xsl:if test="fn:exists($var364_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var364_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var363_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var363_select_code)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var366_select_codeSystem)">
													<xsl:attribute name="codeSystem" namespace="" select="fn:string($var366_select_codeSystem)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var360_select_codeSystemName)">
													<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var360_select_codeSystemName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var361_select_displayName)">
													<xsl:attribute name="displayName" namespace="" select="fn:string($var361_select_displayName)"/>
												</xsl:if>
											</code>
											<xsl:for-each select="ns0:planFreeText">
												<text>
													<xsl:sequence select="fn:string(.)"/>
												</text>
											</xsl:for-each>
											<xsl:for-each select="ns0:plannedTime">
												<xsl:variable name="var368_select_value" as="item()*" select="@value"/>
												<xsl:variable name="var369_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<effectiveTime>
													<xsl:if test="fn:exists($var369_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var369_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var368_select_value)">
														<xsl:attribute name="value" namespace="" select="fn:string($var368_select_value)"/>
													</xsl:if>
													<xsl:for-each select="ns0:low">
														<xsl:variable name="var370_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<xsl:variable name="var371_select_value" as="item()*" select="@value"/>
														<low>
															<xsl:if test="fn:exists($var370_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var370_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var371_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var371_select_value)"/>
															</xsl:if>
														</low>
													</xsl:for-each>
													<xsl:for-each select="ns0:width">
														<xsl:variable name="var372_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var373_select_unit" as="item()*" select="@unit"/>
														<xsl:variable name="var374_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<width>
															<xsl:if test="fn:exists($var374_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var374_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var372_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var372_select_value)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var373_select_unit)">
																<xsl:attribute name="unit" namespace="" select="fn:string($var373_select_unit)"/>
															</xsl:if>
														</width>
													</xsl:for-each>
													<xsl:for-each select="ns0:high">
														<xsl:variable name="var375_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var376_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<high>
															<xsl:if test="fn:exists($var376_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var376_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var375_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var375_select_value)"/>
															</xsl:if>
														</high>
													</xsl:for-each>
													<xsl:for-each select="ns0:center">
														<center>
															<xsl:call-template name="tbf:tbf1_TS">
																<xsl:with-param name="input" select="." as="node()"/>
															</xsl:call-template>
														</center>
													</xsl:for-each>
												</effectiveTime>
											</xsl:for-each>
										</procedure>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:immunizations">
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.6'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'11369-6'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Immunizations'"/>
								</title>
								<xsl:variable name="var377" as="node()?">
									<xsl:call-template name="user:immunizationsNarrative">
										<xsl:with-param name="immunizations" as="node()">
											<ns0:immunizations xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:immunizations>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var377">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:immunization">
									<xsl:variable name="var378_select_refusalInd" as="item()*" select="@refusalInd"/>
									<entry>
										<substanceAdministration>
											<xsl:attribute name="classCode" namespace="" select="'SBADM'"/>
											<xsl:attribute name="moodCode" namespace="" select="'EVN'"/>
											<xsl:if test="fn:exists($var378_select_refusalInd)">
												<xsl:attribute name="negationInd" namespace="" select="xs:string(xs:boolean(fn:string($var378_select_refusalInd)))"/>
											</xsl:if>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.24'"/>
											</templateId>
											<id>
												<xsl:attribute name="nullFlavor" namespace="" select="'NI'"/>
											</id>
											<xsl:for-each select="ns0:administeredDate">
												<xsl:variable name="var379_select_value" as="item()*" select="@value"/>
												<xsl:variable name="var380_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<effectiveTime>
													<xsl:if test="fn:exists($var380_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var380_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var379_select_value)">
														<xsl:attribute name="value" namespace="" select="fn:string($var379_select_value)"/>
													</xsl:if>
												</effectiveTime>
											</xsl:for-each>
											<consumable>
												<xsl:for-each select="ns0:medicationInformation">
													<xsl:variable name="var381_resultof_mapMedicationInformation" as="node()?">
														<xsl:call-template name="user:mapMedicationInformation">
															<xsl:with-param name="medicationInformation" as="node()">
																<ns0:medicationInformation xsl:exclude-result-prefixes="ns0">
																	<xsl:sequence select="(./@node(), ./node())"/>
																</ns0:medicationInformation>
															</xsl:with-param>
														</xsl:call-template>
													</xsl:variable>
													<xsl:if test="fn:exists($var381_resultof_mapMedicationInformation)">
														<manufacturedProduct>
															<xsl:sequence select="($var381_resultof_mapMedicationInformation/@node(), $var381_resultof_mapMedicationInformation/node())"/>
														</manufacturedProduct>
													</xsl:if>
												</xsl:for-each>
											</consumable>
											<xsl:for-each select="ns0:provider">
												<performer>
													<assignedEntity>
														<representedOrganization>
															<xsl:for-each select="ns0:organizationID">
																<xsl:variable name="var382_select_root" as="item()*" select="@root"/>
																<xsl:variable name="var383_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<xsl:variable name="var384_select_extension" as="item()*" select="@extension"/>
																<id>
																	<xsl:if test="fn:exists($var383_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var383_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var382_select_root)">
																		<xsl:attribute name="root" namespace="" select="fn:string($var382_select_root)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var384_select_extension)">
																		<xsl:attribute name="extension" namespace="" select="fn:string($var384_select_extension)"/>
																	</xsl:if>
																</id>
															</xsl:for-each>
															<xsl:for-each select="ns0:organizationName">
																<xsl:variable name="var385_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<name>
																	<xsl:if test="fn:exists($var385_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var385_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</name>
															</xsl:for-each>
															<xsl:for-each select="ns0:organizationTelecom">
																<xsl:variable name="var386_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var387_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<telecom>
																	<xsl:if test="fn:exists($var387_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var387_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var386_select_value)">
																		<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var386_select_value)))"/>
																	</xsl:if>
																</telecom>
															</xsl:for-each>
															<xsl:for-each select="ns0:organizationAddress">
																<xsl:variable name="var388_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<addr>
																	<xsl:if test="fn:exists($var388_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var388_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:for-each select="ns0:state">
																		<state>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</state>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:city">
																		<city>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</city>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:postalCode">
																		<postalCode>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</postalCode>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:streetAddressLine">
																		<streetAddressLine>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</streetAddressLine>
																	</xsl:for-each>
																</addr>
															</xsl:for-each>
														</representedOrganization>
													</assignedEntity>
												</performer>
											</xsl:for-each>
											<xsl:for-each select="ns0:medicationSeriesNumber">
												<xsl:variable name="var389_select_unit" as="item()*" select="@unit"/>
												<xsl:variable name="var390_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var391_select_value" as="item()*" select="@value"/>
												<entryRelationship>
													<xsl:if test="fn:exists($var390_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var390_select_nullFlavor)"/>
													</xsl:if>
													<xsl:attribute name="typeCode" namespace="" select="'SUBJ'"/>
													<observation>
														<value>
															<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','PQ')"/>
															<xsl:if test="fn:exists($var390_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var390_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var391_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var391_select_value)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var389_select_unit)">
																<xsl:attribute name="unit" namespace="" select="fn:string($var389_select_unit)"/>
															</xsl:if>
														</value>
													</observation>
												</entryRelationship>
											</xsl:for-each>
											<xsl:for-each select="ns0:reaction">
												<xsl:variable name="var392_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var393_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var394_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var395_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var396_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<entryRelationship>
													<xsl:if test="fn:exists($var392_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var392_select_nullFlavor)"/>
													</xsl:if>
													<xsl:attribute name="typeCode" namespace="" select="'CAUS'"/>
													<observation>
														<templateId>
															<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.54'"/>
														</templateId>
														<code>
															<xsl:if test="fn:exists($var392_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var392_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var393_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var393_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var395_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var395_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var396_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var396_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var394_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var394_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:qualifier">
																<xsl:variable name="var397_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																<xsl:variable name="var398_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																<xsl:variable name="var399_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																<xsl:variable name="var400_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																<xsl:variable name="var401_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																<xsl:variable name="var402_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																<xsl:variable name="var403_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																<xsl:variable name="var404_select_code" as="item()*" select="ns0:name/@code"/>
																<xsl:variable name="var405_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																<xsl:variable name="var406_select_code" as="item()*" select="ns0:value/@code"/>
																<qualifier>
																	<name>
																		<xsl:if test="fn:exists($var398_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var398_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var404_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var404_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var397_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var397_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var402_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var402_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var403_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var403_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:name/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:name/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</name>
																	<value>
																		<xsl:if test="fn:exists($var401_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var401_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var406_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var406_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var405_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var405_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var399_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var399_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var400_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var400_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:value/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:value/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</value>
																</qualifier>
															</xsl:for-each>
														</code>
													</observation>
												</entryRelationship>
											</xsl:for-each>
											<xsl:for-each select="ns0:refusalReason">
												<entryRelationship>
													<xsl:attribute name="typeCode" namespace="" select="'RSON'"/>
													<act>
														<templateId>
															<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.27'"/>
														</templateId>
														<text>
															<xsl:for-each select="node()[./self::text()]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</text>
													</act>
												</entryRelationship>
											</xsl:for-each>
										</substanceAdministration>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:allergies">
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.2'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'48765-2'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Allergies, Adverse Reactions, Alerts'"/>
								</title>
								<xsl:variable name="var407" as="node()?">
									<xsl:call-template name="user:allergiesNarrative">
										<xsl:with-param name="allergies" as="node()">
											<ns0:allergies xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:allergies>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var407">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:allergy">
									<xsl:variable name="var408" as="xs:string" select="'OBS'"/>
									<xsl:variable name="var409" as="xs:string" select="'EVN'"/>
									<xsl:variable name="var410" as="xs:string" select="'SUBJ'"/>
									<xsl:variable name="var411_select_code" as="item()*" select="ns0:adverseEventType/@code"/>
									<xsl:variable name="var412_select_nullFlavor" as="item()*" select="ns0:adverseEventType/@nullFlavor"/>
									<xsl:variable name="var413_select_codeSystemName" as="item()*" select="ns0:adverseEventType/@codeSystemName"/>
									<xsl:variable name="var414_select_displayName" as="item()*" select="ns0:adverseEventType/@displayName"/>
									<xsl:variable name="var415_select_codeSystem" as="item()*" select="ns0:adverseEventType/@codeSystem"/>
									<entry>
										<act>
											<xsl:attribute name="classCode" namespace="" select="'ACT'"/>
											<xsl:attribute name="moodCode" namespace="" select="$var409"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.27'"/>
											</templateId>
											<id>
												<xsl:attribute name="nullFlavor" namespace="" select="'NI'"/>
											</id>
											<code>
												<xsl:attribute name="nullFlavor" namespace="" select="'NA'"/>
											</code>
											<entryRelationship>
												<xsl:attribute name="typeCode" namespace="" select="$var410"/>
												<observation>
													<xsl:attribute name="classCode" namespace="" select="$var408"/>
													<xsl:attribute name="moodCode" namespace="" select="$var409"/>
													<templateId>
														<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.18'"/>
													</templateId>
													<code>
														<xsl:if test="fn:exists($var412_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var412_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var411_select_code)">
															<xsl:attribute name="code" namespace="" select="fn:string($var411_select_code)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var415_select_codeSystem)">
															<xsl:attribute name="codeSystem" namespace="" select="fn:string($var415_select_codeSystem)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var413_select_codeSystemName)">
															<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var413_select_codeSystemName)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var414_select_displayName)">
															<xsl:attribute name="displayName" namespace="" select="fn:string($var414_select_displayName)"/>
														</xsl:if>
														<xsl:for-each select="ns0:adverseEventType/ns0:originalText">
															<originalText>
																<xsl:sequence select="fn:string(.)"/>
															</originalText>
														</xsl:for-each>
														<xsl:for-each select="ns0:adverseEventType/ns0:qualifier">
															<xsl:variable name="var416_select_displayName" as="item()*" select="ns0:value/@displayName"/>
															<xsl:variable name="var417_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
															<xsl:variable name="var418_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
															<xsl:variable name="var419_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
															<xsl:variable name="var420_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
															<xsl:variable name="var421_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
															<xsl:variable name="var422_select_code" as="item()*" select="ns0:name/@code"/>
															<xsl:variable name="var423_select_displayName" as="item()*" select="ns0:name/@displayName"/>
															<xsl:variable name="var424_select_code" as="item()*" select="ns0:value/@code"/>
															<xsl:variable name="var425_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
															<qualifier>
																<name>
																	<xsl:if test="fn:exists($var418_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var418_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var422_select_code)">
																		<xsl:attribute name="code" namespace="" select="fn:string($var422_select_code)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var425_select_codeSystem)">
																		<xsl:attribute name="codeSystem" namespace="" select="fn:string($var425_select_codeSystem)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var417_select_codeSystemName)">
																		<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var417_select_codeSystemName)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var423_select_displayName)">
																		<xsl:attribute name="displayName" namespace="" select="fn:string($var423_select_displayName)"/>
																	</xsl:if>
																	<xsl:for-each select="ns0:name/ns0:originalText">
																		<originalText>
																			<xsl:sequence select="fn:string(.)"/>
																		</originalText>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:name/ns0:qualifier">
																		<qualifier>
																			<xsl:sequence select="()"/>
																		</qualifier>
																	</xsl:for-each>
																</name>
																<value>
																	<xsl:if test="fn:exists($var420_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var420_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var424_select_code)">
																		<xsl:attribute name="code" namespace="" select="fn:string($var424_select_code)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var419_select_codeSystem)">
																		<xsl:attribute name="codeSystem" namespace="" select="fn:string($var419_select_codeSystem)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var421_select_codeSystemName)">
																		<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var421_select_codeSystemName)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var416_select_displayName)">
																		<xsl:attribute name="displayName" namespace="" select="fn:string($var416_select_displayName)"/>
																	</xsl:if>
																	<xsl:for-each select="ns0:value/ns0:originalText">
																		<originalText>
																			<xsl:sequence select="fn:string(.)"/>
																		</originalText>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:value/ns0:qualifier">
																		<qualifier>
																			<xsl:sequence select="()"/>
																		</qualifier>
																	</xsl:for-each>
																</value>
															</qualifier>
														</xsl:for-each>
													</code>
													<statusCode>
														<xsl:attribute name="code" namespace="" select="'completed'"/>
													</statusCode>
													<xsl:for-each select="ns0:adverseEventDate">
														<xsl:variable name="var426_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var427_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<effectiveTime>
															<xsl:if test="fn:exists($var427_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var427_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var426_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var426_select_value)"/>
															</xsl:if>
															<xsl:for-each select="ns0:low">
																<xsl:variable name="var428_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var429_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<low>
																	<xsl:if test="fn:exists($var429_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var429_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var428_select_value)">
																		<xsl:attribute name="value" namespace="" select="fn:string($var428_select_value)"/>
																	</xsl:if>
																</low>
															</xsl:for-each>
															<xsl:for-each select="ns0:width">
																<xsl:variable name="var430_select_unit" as="item()*" select="@unit"/>
																<xsl:variable name="var431_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var432_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<width>
																	<xsl:if test="fn:exists($var432_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var432_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var431_select_value)">
																		<xsl:attribute name="value" namespace="" select="fn:string($var431_select_value)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var430_select_unit)">
																		<xsl:attribute name="unit" namespace="" select="fn:string($var430_select_unit)"/>
																	</xsl:if>
																</width>
															</xsl:for-each>
															<xsl:for-each select="ns0:high">
																<xsl:variable name="var433_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var434_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<high>
																	<xsl:if test="fn:exists($var434_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var434_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var433_select_value)">
																		<xsl:attribute name="value" namespace="" select="fn:string($var433_select_value)"/>
																	</xsl:if>
																</high>
															</xsl:for-each>
															<xsl:for-each select="ns0:center">
																<center>
																	<xsl:call-template name="tbf:tbf1_TS">
																		<xsl:with-param name="input" select="." as="node()"/>
																	</xsl:call-template>
																</center>
															</xsl:for-each>
														</effectiveTime>
													</xsl:for-each>
													<participant>
														<xsl:attribute name="typeCode" namespace="" select="'CSM'"/>
														<participantRole>
															<xsl:attribute name="classCode" namespace="" select="'MANU'"/>
															<playingEntity>
																<xsl:attribute name="classCode" namespace="" select="'MMAT'"/>
																<xsl:for-each select="ns0:product">
																	<xsl:variable name="var435_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																	<xsl:variable name="var436_select_code" as="item()*" select="@code"/>
																	<xsl:variable name="var437_select_codeSystem" as="item()*" select="@codeSystem"/>
																	<xsl:variable name="var438_select_displayName" as="item()*" select="@displayName"/>
																	<xsl:variable name="var439_select_codeSystemName" as="item()*" select="@codeSystemName"/>
																	<code>
																		<xsl:if test="fn:exists($var435_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var435_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var436_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var436_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var437_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var437_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var439_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var439_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var438_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var438_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:qualifier">
																			<xsl:variable name="var440_select_code" as="item()*" select="ns0:name/@code"/>
																			<xsl:variable name="var441_select_code" as="item()*" select="ns0:value/@code"/>
																			<xsl:variable name="var442_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																			<xsl:variable name="var443_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																			<xsl:variable name="var444_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																			<xsl:variable name="var445_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																			<xsl:variable name="var446_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																			<xsl:variable name="var447_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																			<xsl:variable name="var448_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																			<xsl:variable name="var449_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																			<qualifier>
																				<name>
																					<xsl:if test="fn:exists($var446_select_nullFlavor)">
																						<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var446_select_nullFlavor)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var440_select_code)">
																						<xsl:attribute name="code" namespace="" select="fn:string($var440_select_code)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var442_select_codeSystem)">
																						<xsl:attribute name="codeSystem" namespace="" select="fn:string($var442_select_codeSystem)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var444_select_codeSystemName)">
																						<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var444_select_codeSystemName)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var447_select_displayName)">
																						<xsl:attribute name="displayName" namespace="" select="fn:string($var447_select_displayName)"/>
																					</xsl:if>
																					<xsl:for-each select="ns0:name/ns0:originalText">
																						<originalText>
																							<xsl:sequence select="fn:string(.)"/>
																						</originalText>
																					</xsl:for-each>
																					<xsl:for-each select="ns0:name/ns0:qualifier">
																						<qualifier>
																							<xsl:sequence select="()"/>
																						</qualifier>
																					</xsl:for-each>
																				</name>
																				<value>
																					<xsl:if test="fn:exists($var448_select_nullFlavor)">
																						<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var448_select_nullFlavor)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var441_select_code)">
																						<xsl:attribute name="code" namespace="" select="fn:string($var441_select_code)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var449_select_codeSystem)">
																						<xsl:attribute name="codeSystem" namespace="" select="fn:string($var449_select_codeSystem)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var443_select_codeSystemName)">
																						<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var443_select_codeSystemName)"/>
																					</xsl:if>
																					<xsl:if test="fn:exists($var445_select_displayName)">
																						<xsl:attribute name="displayName" namespace="" select="fn:string($var445_select_displayName)"/>
																					</xsl:if>
																					<xsl:for-each select="ns0:value/ns0:originalText">
																						<originalText>
																							<xsl:sequence select="fn:string(.)"/>
																						</originalText>
																					</xsl:for-each>
																					<xsl:for-each select="ns0:value/ns0:qualifier">
																						<qualifier>
																							<xsl:sequence select="()"/>
																						</qualifier>
																					</xsl:for-each>
																				</value>
																			</qualifier>
																		</xsl:for-each>
																	</code>
																</xsl:for-each>
															</playingEntity>
														</participantRole>
													</participant>
													<entryRelationship>
														<xsl:attribute name="typeCode" namespace="" select="'MFST'"/>
														<observation>
															<xsl:attribute name="classCode" namespace="" select="$var408"/>
															<xsl:attribute name="moodCode" namespace="" select="$var409"/>
															<templateId>
																<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.54'"/>
															</templateId>
															<xsl:for-each select="ns0:reaction">
																<xsl:variable name="var450_select_displayName" as="item()*" select="@displayName"/>
																<xsl:variable name="var451_select_codeSystemName" as="item()*" select="@codeSystemName"/>
																<xsl:variable name="var452_select_codeSystem" as="item()*" select="@codeSystem"/>
																<xsl:variable name="var453_select_code" as="item()*" select="@code"/>
																<xsl:variable name="var454_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<code>
																	<xsl:if test="fn:exists($var454_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var454_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var453_select_code)">
																		<xsl:attribute name="code" namespace="" select="fn:string($var453_select_code)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var452_select_codeSystem)">
																		<xsl:attribute name="codeSystem" namespace="" select="fn:string($var452_select_codeSystem)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var451_select_codeSystemName)">
																		<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var451_select_codeSystemName)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var450_select_displayName)">
																		<xsl:attribute name="displayName" namespace="" select="fn:string($var450_select_displayName)"/>
																	</xsl:if>
																	<xsl:for-each select="ns0:originalText">
																		<originalText>
																			<xsl:sequence select="fn:string(.)"/>
																		</originalText>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:qualifier">
																		<xsl:variable name="var455_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																		<xsl:variable name="var456_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																		<xsl:variable name="var457_select_code" as="item()*" select="ns0:name/@code"/>
																		<xsl:variable name="var458_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																		<xsl:variable name="var459_select_code" as="item()*" select="ns0:value/@code"/>
																		<xsl:variable name="var460_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																		<xsl:variable name="var461_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																		<xsl:variable name="var462_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																		<xsl:variable name="var463_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																		<xsl:variable name="var464_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																		<qualifier>
																			<name>
																				<xsl:if test="fn:exists($var460_select_nullFlavor)">
																					<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var460_select_nullFlavor)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var457_select_code)">
																					<xsl:attribute name="code" namespace="" select="fn:string($var457_select_code)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var464_select_codeSystem)">
																					<xsl:attribute name="codeSystem" namespace="" select="fn:string($var464_select_codeSystem)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var462_select_codeSystemName)">
																					<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var462_select_codeSystemName)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var455_select_displayName)">
																					<xsl:attribute name="displayName" namespace="" select="fn:string($var455_select_displayName)"/>
																				</xsl:if>
																				<xsl:for-each select="ns0:name/ns0:originalText">
																					<originalText>
																						<xsl:sequence select="fn:string(.)"/>
																					</originalText>
																				</xsl:for-each>
																				<xsl:for-each select="ns0:name/ns0:qualifier">
																					<qualifier>
																						<xsl:sequence select="()"/>
																					</qualifier>
																				</xsl:for-each>
																			</name>
																			<value>
																				<xsl:if test="fn:exists($var456_select_nullFlavor)">
																					<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var456_select_nullFlavor)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var459_select_code)">
																					<xsl:attribute name="code" namespace="" select="fn:string($var459_select_code)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var463_select_codeSystem)">
																					<xsl:attribute name="codeSystem" namespace="" select="fn:string($var463_select_codeSystem)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var458_select_codeSystemName)">
																					<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var458_select_codeSystemName)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var461_select_displayName)">
																					<xsl:attribute name="displayName" namespace="" select="fn:string($var461_select_displayName)"/>
																				</xsl:if>
																				<xsl:for-each select="ns0:value/ns0:originalText">
																					<originalText>
																						<xsl:sequence select="fn:string(.)"/>
																					</originalText>
																				</xsl:for-each>
																				<xsl:for-each select="ns0:value/ns0:qualifier">
																					<qualifier>
																						<xsl:sequence select="()"/>
																					</qualifier>
																				</xsl:for-each>
																			</value>
																		</qualifier>
																	</xsl:for-each>
																</code>
															</xsl:for-each>
															<statusCode>
																<xsl:attribute name="code" namespace="" select="'completed'"/>
															</statusCode>
														</observation>
													</entryRelationship>
													<xsl:for-each select="ns0:severity">
														<xsl:variable name="var465_select_displayName" as="item()*" select="@displayName"/>
														<xsl:variable name="var466_select_codeSystemName" as="item()*" select="@codeSystemName"/>
														<xsl:variable name="var467_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<xsl:variable name="var468_select_codeSystem" as="item()*" select="@codeSystem"/>
														<xsl:variable name="var469_select_code" as="item()*" select="@code"/>
														<entryRelationship>
															<xsl:if test="fn:exists($var467_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var467_select_nullFlavor)"/>
															</xsl:if>
															<xsl:attribute name="typeCode" namespace="" select="$var410"/>
															<observation>
																<xsl:attribute name="classCode" namespace="" select="$var408"/>
																<xsl:attribute name="moodCode" namespace="" select="$var409"/>
																<templateId>
																	<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.55'"/>
																</templateId>
																<code>
																	<xsl:if test="fn:exists($var467_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var467_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var469_select_code)">
																		<xsl:attribute name="code" namespace="" select="fn:string($var469_select_code)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var468_select_codeSystem)">
																		<xsl:attribute name="codeSystem" namespace="" select="fn:string($var468_select_codeSystem)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var466_select_codeSystemName)">
																		<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var466_select_codeSystemName)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var465_select_displayName)">
																		<xsl:attribute name="displayName" namespace="" select="fn:string($var465_select_displayName)"/>
																	</xsl:if>
																	<xsl:for-each select="ns0:originalText">
																		<originalText>
																			<xsl:sequence select="fn:string(.)"/>
																		</originalText>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:qualifier">
																		<xsl:variable name="var470_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																		<xsl:variable name="var471_select_code" as="item()*" select="ns0:name/@code"/>
																		<xsl:variable name="var472_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																		<xsl:variable name="var473_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																		<xsl:variable name="var474_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																		<xsl:variable name="var475_select_code" as="item()*" select="ns0:value/@code"/>
																		<xsl:variable name="var476_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																		<xsl:variable name="var477_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																		<xsl:variable name="var478_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																		<xsl:variable name="var479_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																		<qualifier>
																			<name>
																				<xsl:if test="fn:exists($var477_select_nullFlavor)">
																					<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var477_select_nullFlavor)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var471_select_code)">
																					<xsl:attribute name="code" namespace="" select="fn:string($var471_select_code)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var472_select_codeSystem)">
																					<xsl:attribute name="codeSystem" namespace="" select="fn:string($var472_select_codeSystem)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var474_select_codeSystemName)">
																					<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var474_select_codeSystemName)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var476_select_displayName)">
																					<xsl:attribute name="displayName" namespace="" select="fn:string($var476_select_displayName)"/>
																				</xsl:if>
																				<xsl:for-each select="ns0:name/ns0:originalText">
																					<originalText>
																						<xsl:sequence select="fn:string(.)"/>
																					</originalText>
																				</xsl:for-each>
																				<xsl:for-each select="ns0:name/ns0:qualifier">
																					<qualifier>
																						<xsl:sequence select="()"/>
																					</qualifier>
																				</xsl:for-each>
																			</name>
																			<value>
																				<xsl:if test="fn:exists($var470_select_nullFlavor)">
																					<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var470_select_nullFlavor)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var475_select_code)">
																					<xsl:attribute name="code" namespace="" select="fn:string($var475_select_code)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var473_select_codeSystem)">
																					<xsl:attribute name="codeSystem" namespace="" select="fn:string($var473_select_codeSystem)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var479_select_codeSystemName)">
																					<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var479_select_codeSystemName)"/>
																				</xsl:if>
																				<xsl:if test="fn:exists($var478_select_displayName)">
																					<xsl:attribute name="displayName" namespace="" select="fn:string($var478_select_displayName)"/>
																				</xsl:if>
																				<xsl:for-each select="ns0:value/ns0:originalText">
																					<originalText>
																						<xsl:sequence select="fn:string(.)"/>
																					</originalText>
																				</xsl:for-each>
																				<xsl:for-each select="ns0:value/ns0:qualifier">
																					<qualifier>
																						<xsl:sequence select="()"/>
																					</qualifier>
																				</xsl:for-each>
																			</value>
																		</qualifier>
																	</xsl:for-each>
																</code>
															</observation>
														</entryRelationship>
													</xsl:for-each>
												</observation>
											</entryRelationship>
										</act>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:vitalSigns">
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.16'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'8716-3'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Vital Signs'"/>
								</title>
								<xsl:variable name="var480" as="node()?">
									<xsl:call-template name="user:vitalSignsNarrative">
										<xsl:with-param name="vitalSigns" as="node()">
											<ns0:vitalSigns xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:vitalSigns>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var480">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:vitalSign">
									<xsl:variable name="var481_select_code" as="item()*" select="ns0:resultStatus/@code"/>
									<xsl:variable name="var482_select_codeSystem" as="item()*" select="ns0:resultType/@codeSystem"/>
									<xsl:variable name="var483_select_nullFlavor" as="item()*" select="ns0:resultType/@nullFlavor"/>
									<xsl:variable name="var484_select_displayName" as="item()*" select="ns0:resultType/@displayName"/>
									<xsl:variable name="var485_select_code" as="item()*" select="ns0:resultType/@code"/>
									<xsl:variable name="var486_select_codeSystemName" as="item()*" select="ns0:resultType/@codeSystemName"/>
									<xsl:variable name="var487_select_value" as="item()*" select="ns0:resultDateTime/@value"/>
									<xsl:variable name="var488_select_nullFlavor" as="item()*" select="ns0:resultDateTime/@nullFlavor"/>
									<entry>
										<observation>
											<xsl:attribute name="classCode" namespace="" select="'OBS'"/>
											<xsl:attribute name="moodCode" namespace="" select="'EVN'"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.3.88.11.83.14'"/>
											</templateId>
											<xsl:for-each select="ns0:resultID">
												<xsl:variable name="var489_select_root" as="item()*" select="@root"/>
												<xsl:variable name="var490_select_extension" as="item()*" select="@extension"/>
												<xsl:variable name="var491_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<id>
													<xsl:if test="fn:exists($var491_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var491_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var489_select_root)">
														<xsl:attribute name="root" namespace="" select="fn:string($var489_select_root)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var490_select_extension)">
														<xsl:attribute name="extension" namespace="" select="fn:string($var490_select_extension)"/>
													</xsl:if>
												</id>
											</xsl:for-each>
											<code>
												<xsl:if test="fn:exists($var483_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var483_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var485_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var485_select_code)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var482_select_codeSystem)">
													<xsl:attribute name="codeSystem" namespace="" select="fn:string($var482_select_codeSystem)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var486_select_codeSystemName)">
													<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var486_select_codeSystemName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var484_select_displayName)">
													<xsl:attribute name="displayName" namespace="" select="fn:string($var484_select_displayName)"/>
												</xsl:if>
												<xsl:for-each select="ns0:resultType/ns0:originalText">
													<originalText>
														<xsl:sequence select="fn:string(.)"/>
													</originalText>
												</xsl:for-each>
												<xsl:for-each select="ns0:resultType/ns0:qualifier">
													<xsl:variable name="var492_select_displayName" as="item()*" select="ns0:value/@displayName"/>
													<xsl:variable name="var493_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
													<xsl:variable name="var494_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
													<xsl:variable name="var495_select_displayName" as="item()*" select="ns0:name/@displayName"/>
													<xsl:variable name="var496_select_code" as="item()*" select="ns0:value/@code"/>
													<xsl:variable name="var497_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
													<xsl:variable name="var498_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
													<xsl:variable name="var499_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
													<xsl:variable name="var500_select_code" as="item()*" select="ns0:name/@code"/>
													<xsl:variable name="var501_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
													<qualifier>
														<name>
															<xsl:if test="fn:exists($var494_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var494_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var500_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var500_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var499_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var499_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var501_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var501_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var495_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var495_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:name/ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:name/ns0:qualifier">
																<qualifier>
																	<xsl:sequence select="()"/>
																</qualifier>
															</xsl:for-each>
														</name>
														<value>
															<xsl:if test="fn:exists($var493_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var493_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var496_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var496_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var498_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var498_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var497_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var497_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var492_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var492_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:value/ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:value/ns0:qualifier">
																<qualifier>
																	<xsl:sequence select="()"/>
																</qualifier>
															</xsl:for-each>
														</value>
													</qualifier>
												</xsl:for-each>
											</code>
											<statusCode>
												<xsl:if test="fn:exists($var481_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var481_select_code)"/>
												</xsl:if>
											</statusCode>
											<effectiveTime>
												<xsl:if test="fn:exists($var488_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var488_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var487_select_value)">
													<xsl:attribute name="value" namespace="" select="fn:string($var487_select_value)"/>
												</xsl:if>
												<xsl:for-each select="ns0:resultDateTime/ns0:low">
													<xsl:variable name="var502_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<xsl:variable name="var503_select_value" as="item()*" select="@value"/>
													<low>
														<xsl:if test="fn:exists($var502_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var502_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var503_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var503_select_value)"/>
														</xsl:if>
													</low>
												</xsl:for-each>
												<xsl:for-each select="ns0:resultDateTime/ns0:width">
													<xsl:variable name="var504_select_unit" as="item()*" select="@unit"/>
													<xsl:variable name="var505_select_value" as="item()*" select="@value"/>
													<xsl:variable name="var506_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<width>
														<xsl:if test="fn:exists($var506_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var506_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var505_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var505_select_value)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var504_select_unit)">
															<xsl:attribute name="unit" namespace="" select="fn:string($var504_select_unit)"/>
														</xsl:if>
													</width>
												</xsl:for-each>
												<xsl:for-each select="ns0:resultDateTime/ns0:high">
													<xsl:variable name="var507_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<xsl:variable name="var508_select_value" as="item()*" select="@value"/>
													<high>
														<xsl:if test="fn:exists($var507_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var507_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var508_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var508_select_value)"/>
														</xsl:if>
													</high>
												</xsl:for-each>
												<xsl:for-each select="ns0:resultDateTime/ns0:center">
													<center>
														<xsl:call-template name="tbf:tbf1_TS">
															<xsl:with-param name="input" select="." as="node()"/>
														</xsl:call-template>
													</center>
												</xsl:for-each>
											</effectiveTime>
											<xsl:for-each select="ns0:resultValue/ns0:integer">
												<value>
													<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','INT')"/>
													<xsl:call-template name="tbf:tbf2_INT">
														<xsl:with-param name="input" select="." as="node()"/>
													</xsl:call-template>
												</value>
											</xsl:for-each>
											<xsl:for-each select="ns0:resultValue/ns0:monetaryAmount">
												<value>
													<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','MO')"/>
													<xsl:call-template name="tbf:tbf3_MO">
														<xsl:with-param name="input" select="." as="node()"/>
													</xsl:call-template>
												</value>
											</xsl:for-each>
											<xsl:for-each select="ns0:resultValue/ns0:physicalQuantity">
												<xsl:variable name="var509_select_unit" as="item()*" select="@unit"/>
												<xsl:variable name="var510_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var511_select_value" as="item()*" select="@value"/>
												<value>
													<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','PQ')"/>
													<xsl:if test="fn:exists($var510_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var510_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var511_select_value)">
														<xsl:attribute name="value" namespace="" select="fn:string($var511_select_value)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var509_select_unit)">
														<xsl:attribute name="unit" namespace="" select="fn:string($var509_select_unit)"/>
													</xsl:if>
												</value>
											</xsl:for-each>
											<xsl:for-each select="ns0:resultInterpretation">
												<xsl:variable name="var512_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var513_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var514_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var515_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var516_select_displayName" as="item()*" select="@displayName"/>
												<interpretationCode>
													<xsl:if test="fn:exists($var514_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var514_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var513_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var513_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var512_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var512_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var515_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var515_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var516_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var516_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:sequence select="fn:string(.)"/>
														</originalText>
													</xsl:for-each>
													<xsl:for-each select="ns0:qualifier">
														<xsl:variable name="var517_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
														<xsl:variable name="var518_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
														<xsl:variable name="var519_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
														<xsl:variable name="var520_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
														<xsl:variable name="var521_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
														<xsl:variable name="var522_select_displayName" as="item()*" select="ns0:value/@displayName"/>
														<xsl:variable name="var523_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
														<xsl:variable name="var524_select_code" as="item()*" select="ns0:value/@code"/>
														<xsl:variable name="var525_select_code" as="item()*" select="ns0:name/@code"/>
														<xsl:variable name="var526_select_displayName" as="item()*" select="ns0:name/@displayName"/>
														<qualifier>
															<name>
																<xsl:if test="fn:exists($var517_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var517_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var525_select_code)">
																	<xsl:attribute name="code" namespace="" select="fn:string($var525_select_code)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var518_select_codeSystem)">
																	<xsl:attribute name="codeSystem" namespace="" select="fn:string($var518_select_codeSystem)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var521_select_codeSystemName)">
																	<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var521_select_codeSystemName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var526_select_displayName)">
																	<xsl:attribute name="displayName" namespace="" select="fn:string($var526_select_displayName)"/>
																</xsl:if>
																<xsl:for-each select="ns0:name/ns0:originalText">
																	<originalText>
																		<xsl:sequence select="fn:string(.)"/>
																	</originalText>
																</xsl:for-each>
																<xsl:for-each select="ns0:name/ns0:qualifier">
																	<qualifier>
																		<xsl:sequence select="()"/>
																	</qualifier>
																</xsl:for-each>
															</name>
															<value>
																<xsl:if test="fn:exists($var520_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var520_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var524_select_code)">
																	<xsl:attribute name="code" namespace="" select="fn:string($var524_select_code)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var523_select_codeSystem)">
																	<xsl:attribute name="codeSystem" namespace="" select="fn:string($var523_select_codeSystem)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var519_select_codeSystemName)">
																	<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var519_select_codeSystemName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var522_select_displayName)">
																	<xsl:attribute name="displayName" namespace="" select="fn:string($var522_select_displayName)"/>
																</xsl:if>
																<xsl:for-each select="ns0:value/ns0:originalText">
																	<originalText>
																		<xsl:sequence select="fn:string(.)"/>
																	</originalText>
																</xsl:for-each>
																<xsl:for-each select="ns0:value/ns0:qualifier">
																	<qualifier>
																		<xsl:sequence select="()"/>
																	</qualifier>
																</xsl:for-each>
															</value>
														</qualifier>
													</xsl:for-each>
												</interpretationCode>
											</xsl:for-each>
										</observation>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:advanceDirectives">
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.1'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'42348-3'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Advance Directives'"/>
								</title>
								<xsl:variable name="var527" as="node()?">
									<xsl:call-template name="user:advanceDirectivesNarrative">
										<xsl:with-param name="advanceDirectives" as="node()">
											<ns0:advanceDirectives xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:advanceDirectives>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var527">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:advanceDirective">
									<xsl:variable name="var528_select_codeSystem" as="item()*" select="ns0:type/@codeSystem"/>
									<xsl:variable name="var529_select_displayName" as="item()*" select="ns0:type/@displayName"/>
									<xsl:variable name="var530_select_codeSystemName" as="item()*" select="ns0:type/@codeSystemName"/>
									<xsl:variable name="var531_select_nullFlavor" as="item()*" select="ns0:effectiveDate/@nullFlavor"/>
									<xsl:variable name="var532_select_nullFlavor" as="item()*" select="ns0:type/@nullFlavor"/>
									<xsl:variable name="var533_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
									<xsl:variable name="var534_select_code" as="item()*" select="ns0:value/@code"/>
									<xsl:variable name="var535_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
									<xsl:variable name="var536_select_code" as="item()*" select="ns0:type/@code"/>
									<xsl:variable name="var537_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
									<xsl:variable name="var538_select_displayName" as="item()*" select="ns0:value/@displayName"/>
									<xsl:variable name="var539_select_value" as="item()*" select="ns0:effectiveDate/@value"/>
									<xsl:variable name="var540_resultof_mapAdvanceDirectiveStatus" as="node()?">
										<xsl:call-template name="user:mapAdvanceDirectiveStatus">
											<xsl:with-param name="status" as="node()">
												<ns0:status xsl:exclude-result-prefixes="ns0">
													<xsl:sequence select="(./ns0:status/@node(), ./ns0:status/node())"/>
												</ns0:status>
											</xsl:with-param>
										</xsl:call-template>
									</xsl:variable>
									<entry>
										<observation>
											<xsl:attribute name="classCode" namespace="" select="'OBS'"/>
											<xsl:attribute name="moodCode" namespace="" select="'EVN'"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.17'"/>
											</templateId>
											<id>
												<xsl:attribute name="nullFlavor" namespace="" select="'NI'"/>
											</id>
											<code>
												<xsl:if test="fn:exists($var532_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var532_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var536_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var536_select_code)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var528_select_codeSystem)">
													<xsl:attribute name="codeSystem" namespace="" select="fn:string($var528_select_codeSystem)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var530_select_codeSystemName)">
													<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var530_select_codeSystemName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var529_select_displayName)">
													<xsl:attribute name="displayName" namespace="" select="fn:string($var529_select_displayName)"/>
												</xsl:if>
												<xsl:for-each select="ns0:type/ns0:originalText">
													<originalText>
														<xsl:sequence select="fn:string(.)"/>
													</originalText>
												</xsl:for-each>
												<xsl:for-each select="ns0:type/ns0:qualifier">
													<xsl:variable name="var541_select_displayName" as="item()*" select="ns0:value/@displayName"/>
													<xsl:variable name="var542_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
													<xsl:variable name="var543_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
													<xsl:variable name="var544_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
													<xsl:variable name="var545_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
													<xsl:variable name="var546_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
													<xsl:variable name="var547_select_code" as="item()*" select="ns0:value/@code"/>
													<xsl:variable name="var548_select_displayName" as="item()*" select="ns0:name/@displayName"/>
													<xsl:variable name="var549_select_code" as="item()*" select="ns0:name/@code"/>
													<xsl:variable name="var550_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
													<qualifier>
														<name>
															<xsl:if test="fn:exists($var542_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var542_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var549_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var549_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var550_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var550_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var546_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var546_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var548_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var548_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:name/ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:name/ns0:qualifier">
																<qualifier>
																	<xsl:sequence select="()"/>
																</qualifier>
															</xsl:for-each>
														</name>
														<value>
															<xsl:if test="fn:exists($var543_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var543_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var547_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var547_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var544_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var544_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var545_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var545_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var541_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var541_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:value/ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:value/ns0:qualifier">
																<qualifier>
																	<xsl:sequence select="()"/>
																</qualifier>
															</xsl:for-each>
														</value>
													</qualifier>
												</xsl:for-each>
											</code>
											<statusCode>
												<xsl:attribute name="code" namespace="" select="'completed'"/>
											</statusCode>
											<effectiveTime>
												<xsl:if test="fn:exists($var531_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var531_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var539_select_value)">
													<xsl:attribute name="value" namespace="" select="fn:string($var539_select_value)"/>
												</xsl:if>
												<xsl:for-each select="ns0:effectiveDate/ns0:low">
													<xsl:variable name="var551_select_value" as="item()*" select="@value"/>
													<xsl:variable name="var552_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<low>
														<xsl:if test="fn:exists($var552_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var552_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var551_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var551_select_value)"/>
														</xsl:if>
													</low>
												</xsl:for-each>
												<xsl:for-each select="ns0:effectiveDate/ns0:width">
													<xsl:variable name="var553_select_value" as="item()*" select="@value"/>
													<xsl:variable name="var554_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<xsl:variable name="var555_select_unit" as="item()*" select="@unit"/>
													<width>
														<xsl:if test="fn:exists($var554_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var554_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var553_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var553_select_value)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var555_select_unit)">
															<xsl:attribute name="unit" namespace="" select="fn:string($var555_select_unit)"/>
														</xsl:if>
													</width>
												</xsl:for-each>
												<xsl:for-each select="ns0:effectiveDate/ns0:high">
													<xsl:variable name="var556_select_value" as="item()*" select="@value"/>
													<xsl:variable name="var557_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<high>
														<xsl:if test="fn:exists($var557_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var557_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var556_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var556_select_value)"/>
														</xsl:if>
													</high>
												</xsl:for-each>
												<xsl:for-each select="ns0:effectiveDate/ns0:center">
													<center>
														<xsl:call-template name="tbf:tbf1_TS">
															<xsl:with-param name="input" select="." as="node()"/>
														</xsl:call-template>
													</center>
												</xsl:for-each>
											</effectiveTime>
											<value>
												<xsl:attribute name="type" namespace="http://www.w3.org/2001/XMLSchema-instance" select="fn:QName('urn:hl7-org:v3','CD')"/>
												<xsl:if test="fn:exists($var535_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var535_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var534_select_code)">
													<xsl:attribute name="code" namespace="" select="fn:string($var534_select_code)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var537_select_codeSystem)">
													<xsl:attribute name="codeSystem" namespace="" select="fn:string($var537_select_codeSystem)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var533_select_codeSystemName)">
													<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var533_select_codeSystemName)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var538_select_displayName)">
													<xsl:attribute name="displayName" namespace="" select="fn:string($var538_select_displayName)"/>
												</xsl:if>
												<xsl:for-each select="ns0:value/ns0:originalText">
													<originalText>
														<xsl:sequence select="fn:string(.)"/>
													</originalText>
												</xsl:for-each>
												<xsl:for-each select="ns0:value/ns0:qualifier">
													<xsl:variable name="var558_select_code" as="item()*" select="ns0:name/@code"/>
													<xsl:variable name="var559_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
													<xsl:variable name="var560_select_displayName" as="item()*" select="ns0:name/@displayName"/>
													<xsl:variable name="var561_select_code" as="item()*" select="ns0:value/@code"/>
													<xsl:variable name="var562_select_displayName" as="item()*" select="ns0:value/@displayName"/>
													<xsl:variable name="var563_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
													<xsl:variable name="var564_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
													<xsl:variable name="var565_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
													<xsl:variable name="var566_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
													<xsl:variable name="var567_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
													<qualifier>
														<name>
															<xsl:if test="fn:exists($var563_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var563_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var558_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var558_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var566_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var566_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var565_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var565_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var560_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var560_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:name/ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:name/ns0:qualifier">
																<qualifier>
																	<xsl:sequence select="()"/>
																</qualifier>
															</xsl:for-each>
														</name>
														<value>
															<xsl:if test="fn:exists($var564_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var564_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var561_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var561_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var559_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var559_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var567_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var567_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var562_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var562_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:value/ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:value/ns0:qualifier">
																<qualifier>
																	<xsl:sequence select="()"/>
																</qualifier>
															</xsl:for-each>
														</value>
													</qualifier>
												</xsl:for-each>
											</value>
											<participant>
												<xsl:attribute name="typeCode" namespace="" select="'CST'"/>
												<participantRole>
													<xsl:attribute name="classCode" namespace="" select="'AGNT'"/>
													<xsl:for-each select="ns0:documentCustodian/ns0:organizationID">
														<xsl:variable name="var568_select_extension" as="item()*" select="@extension"/>
														<xsl:variable name="var569_select_root" as="item()*" select="@root"/>
														<xsl:variable name="var570_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<id>
															<xsl:if test="fn:exists($var570_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var570_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var569_select_root)">
																<xsl:attribute name="root" namespace="" select="fn:string($var569_select_root)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var568_select_extension)">
																<xsl:attribute name="extension" namespace="" select="fn:string($var568_select_extension)"/>
															</xsl:if>
														</id>
													</xsl:for-each>
													<xsl:for-each select="ns0:documentCustodian/ns0:organizationAddress">
														<xsl:variable name="var571_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<addr>
															<xsl:if test="fn:exists($var571_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var571_select_nullFlavor)"/>
															</xsl:if>
															<xsl:for-each select="ns0:state">
																<state>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</state>
															</xsl:for-each>
															<xsl:for-each select="ns0:city">
																<city>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</city>
															</xsl:for-each>
															<xsl:for-each select="ns0:postalCode">
																<postalCode>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</postalCode>
															</xsl:for-each>
															<xsl:for-each select="ns0:streetAddressLine">
																<streetAddressLine>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</streetAddressLine>
															</xsl:for-each>
														</addr>
													</xsl:for-each>
													<xsl:for-each select="ns0:documentCustodian/ns0:organizationTelecom">
														<xsl:variable name="var572_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var573_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<telecom>
															<xsl:if test="fn:exists($var573_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var573_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var572_select_value)">
																<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var572_select_value)))"/>
															</xsl:if>
														</telecom>
													</xsl:for-each>
													<playingEntity>
														<xsl:for-each select="ns0:documentCustodian/ns0:organizationName">
															<xsl:variable name="var574_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<name>
																<xsl:if test="fn:exists($var574_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var574_select_nullFlavor)"/>
																</xsl:if>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</name>
														</xsl:for-each>
													</playingEntity>
												</participantRole>
											</participant>
											<xsl:if test="fn:exists($var540_resultof_mapAdvanceDirectiveStatus)">
												<entryRelationship>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/@nullFlavor">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/@typeCode">
														<xsl:attribute name="typeCode" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/@inversionInd">
														<xsl:attribute name="inversionInd" namespace="" select="xs:string(xs:boolean(fn:string(.)))"/>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/@contextConductionInd">
														<xsl:attribute name="contextConductionInd" namespace="" select="xs:string(xs:boolean(fn:string(.)))"/>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/@negationInd">
														<xsl:attribute name="negationInd" namespace="" select="xs:string(xs:boolean(fn:string(.)))"/>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:realmCode">
														<realmCode>
															<xsl:sequence select="(./@node(), ./node())"/>
														</realmCode>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:typeId">
														<typeId>
															<xsl:sequence select="(./@node(), ./node())"/>
														</typeId>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:templateId">
														<templateId>
															<xsl:sequence select="(./@node(), ./node())"/>
														</templateId>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:sequenceNumber">
														<sequenceNumber>
															<xsl:sequence select="(./@node(), ./node())"/>
														</sequenceNumber>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:seperatableInd">
														<seperatableInd>
															<xsl:sequence select="(./@node(), ./node())"/>
														</seperatableInd>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:act">
														<act>
															<xsl:sequence select="(./@node(), ./node())"/>
														</act>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:encounter">
														<encounter>
															<xsl:sequence select="(./@node(), ./node())"/>
														</encounter>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:observation">
														<observation>
															<xsl:for-each select="@nullFlavor">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:for-each select="@classCode">
																<xsl:attribute name="classCode" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:for-each select="@moodCode">
																<xsl:attribute name="moodCode" namespace="" select="fn:string(.)"/>
															</xsl:for-each>
															<xsl:for-each select="@negationInd">
																<xsl:attribute name="negationInd" namespace="" select="xs:string(xs:boolean(fn:string(.)))"/>
															</xsl:for-each>
															<xsl:for-each select="ns1:realmCode">
																<realmCode>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</realmCode>
															</xsl:for-each>
															<xsl:for-each select="ns1:typeId">
																<typeId>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</typeId>
															</xsl:for-each>
															<xsl:for-each select="ns1:templateId">
																<templateId>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</templateId>
															</xsl:for-each>
															<xsl:for-each select="ns1:id">
																<id>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</id>
															</xsl:for-each>
															<xsl:for-each select="ns1:code">
																<code>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</code>
															</xsl:for-each>
															<xsl:for-each select="ns1:derivationExpr">
																<derivationExpr>
																	<xsl:for-each select="@nullFlavor">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@representation">
																		<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@mediaType">
																		<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@language">
																		<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@compression">
																		<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@integrityCheck">
																		<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
																	</xsl:for-each>
																	<xsl:for-each select="@integrityCheckAlgorithm">
																		<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="node()">
																		<xsl:if test="self::text()">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:if>
																		<xsl:if test="self::ns1:reference">
																			<reference>
																				<xsl:sequence select="(./@node(), ./node())"/>
																			</reference>
																		</xsl:if>
																		<xsl:if test="self::ns1:thumbnail">
																			<thumbnail>
																				<xsl:for-each select="@nullFlavor">
																					<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@representation">
																					<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@mediaType">
																					<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@language">
																					<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@compression">
																					<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@integrityCheck">
																					<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
																				</xsl:for-each>
																				<xsl:for-each select="@integrityCheckAlgorithm">
																					<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="node()">
																					<xsl:if test="self::text()">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:if>
																					<xsl:if test="self::ns1:reference">
																						<reference>
																							<xsl:sequence select="(./@node(), ./node())"/>
																						</reference>
																					</xsl:if>
																					<xsl:if test="self::ns1:thumbnail">
																						<thumbnail>
																							<xsl:for-each select="node()[./self::text()]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</thumbnail>
																					</xsl:if>
																				</xsl:for-each>
																			</thumbnail>
																		</xsl:if>
																	</xsl:for-each>
																</derivationExpr>
															</xsl:for-each>
															<xsl:for-each select="ns1:text">
																<text>
																	<xsl:for-each select="@nullFlavor">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@representation">
																		<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@mediaType">
																		<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@language">
																		<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@compression">
																		<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@integrityCheck">
																		<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
																	</xsl:for-each>
																	<xsl:for-each select="@integrityCheckAlgorithm">
																		<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="node()">
																		<xsl:if test="self::text()">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:if>
																		<xsl:if test="self::ns1:reference">
																			<reference>
																				<xsl:sequence select="(./@node(), ./node())"/>
																			</reference>
																		</xsl:if>
																		<xsl:if test="self::ns1:thumbnail">
																			<thumbnail>
																				<xsl:for-each select="@nullFlavor">
																					<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@representation">
																					<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@mediaType">
																					<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@language">
																					<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@compression">
																					<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="@integrityCheck">
																					<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
																				</xsl:for-each>
																				<xsl:for-each select="@integrityCheckAlgorithm">
																					<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
																				</xsl:for-each>
																				<xsl:for-each select="node()">
																					<xsl:if test="self::text()">
																						<xsl:sequence select="fn:string(.)"/>
																					</xsl:if>
																					<xsl:if test="self::ns1:reference">
																						<reference>
																							<xsl:sequence select="(./@node(), ./node())"/>
																						</reference>
																					</xsl:if>
																					<xsl:if test="self::ns1:thumbnail">
																						<thumbnail>
																							<xsl:for-each select="node()[./self::text()]">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:for-each>
																						</thumbnail>
																					</xsl:if>
																				</xsl:for-each>
																			</thumbnail>
																		</xsl:if>
																	</xsl:for-each>
																</text>
															</xsl:for-each>
															<xsl:for-each select="ns1:statusCode">
																<statusCode>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</statusCode>
															</xsl:for-each>
															<xsl:for-each select="ns1:effectiveTime">
																<effectiveTime>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</effectiveTime>
															</xsl:for-each>
															<xsl:for-each select="ns1:priorityCode">
																<priorityCode>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</priorityCode>
															</xsl:for-each>
															<xsl:for-each select="ns1:repeatNumber">
																<repeatNumber>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</repeatNumber>
															</xsl:for-each>
															<xsl:for-each select="ns1:languageCode">
																<languageCode>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</languageCode>
															</xsl:for-each>
															<xsl:for-each select="ns1:interpretationCode">
																<interpretationCode>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</interpretationCode>
															</xsl:for-each>
															<xsl:for-each select="ns1:methodCode">
																<methodCode>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</methodCode>
															</xsl:for-each>
															<xsl:for-each select="ns1:targetSiteCode">
																<targetSiteCode>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</targetSiteCode>
															</xsl:for-each>
															<xsl:for-each select="ns1:subject">
																<subject>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</subject>
															</xsl:for-each>
															<xsl:for-each select="ns1:specimen">
																<specimen>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</specimen>
															</xsl:for-each>
															<xsl:for-each select="ns1:performer">
																<performer>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</performer>
															</xsl:for-each>
															<xsl:for-each select="ns1:author">
																<author>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</author>
															</xsl:for-each>
															<xsl:for-each select="ns1:informant">
																<informant>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</informant>
															</xsl:for-each>
															<xsl:for-each select="ns1:participant">
																<participant>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</participant>
															</xsl:for-each>
															<xsl:for-each select="ns1:entryRelationship">
																<entryRelationship>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</entryRelationship>
															</xsl:for-each>
															<xsl:for-each select="ns1:reference">
																<reference>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</reference>
															</xsl:for-each>
															<xsl:for-each select="ns1:precondition">
																<precondition>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</precondition>
															</xsl:for-each>
															<xsl:for-each select="ns1:referenceRange">
																<referenceRange>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</referenceRange>
															</xsl:for-each>
														</observation>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:observationMedia">
														<observationMedia>
															<xsl:sequence select="(./@node(), ./node())"/>
														</observationMedia>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:organizer">
														<organizer>
															<xsl:sequence select="(./@node(), ./node())"/>
														</organizer>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:procedure">
														<procedure>
															<xsl:sequence select="(./@node(), ./node())"/>
														</procedure>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:regionOfInterest">
														<regionOfInterest>
															<xsl:sequence select="(./@node(), ./node())"/>
														</regionOfInterest>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:substanceAdministration">
														<substanceAdministration>
															<xsl:sequence select="(./@node(), ./node())"/>
														</substanceAdministration>
													</xsl:for-each>
													<xsl:for-each select="$var540_resultof_mapAdvanceDirectiveStatus/ns1:supply">
														<supply>
															<xsl:sequence select="(./@node(), ./node())"/>
														</supply>
													</xsl:for-each>
												</entryRelationship>
											</xsl:if>
										</observation>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:procedures">
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.12'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'47519-4'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Procedures'"/>
								</title>
								<xsl:variable name="var575" as="node()?">
									<xsl:call-template name="user:proceduresNarrative">
										<xsl:with-param name="procedures" as="node()">
											<ns0:procedures xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:procedures>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var575">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:procedure">
									<entry>
										<procedure>
											<xsl:attribute name="classCode" namespace="" select="'PROC'"/>
											<xsl:attribute name="moodCode" namespace="" select="'EVN'"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.29'"/>
											</templateId>
											<xsl:for-each select="ns0:procedureID">
												<xsl:variable name="var576_select_extension" as="item()*" select="@extension"/>
												<xsl:variable name="var577_select_root" as="item()*" select="@root"/>
												<xsl:variable name="var578_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<id>
													<xsl:if test="fn:exists($var578_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var578_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var577_select_root)">
														<xsl:attribute name="root" namespace="" select="fn:string($var577_select_root)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var576_select_extension)">
														<xsl:attribute name="extension" namespace="" select="fn:string($var576_select_extension)"/>
													</xsl:if>
												</id>
											</xsl:for-each>
											<xsl:for-each select="ns0:procedureType">
												<xsl:variable name="var579_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var580_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var581_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var582_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var583_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<code>
													<xsl:if test="fn:exists($var582_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var582_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var581_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var581_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var580_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var580_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var583_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var583_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var579_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var579_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:sequence select="fn:string(.)"/>
														</originalText>
													</xsl:for-each>
													<xsl:for-each select="ns0:qualifier">
														<xsl:variable name="var584_select_code" as="item()*" select="ns0:name/@code"/>
														<xsl:variable name="var585_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
														<xsl:variable name="var586_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
														<xsl:variable name="var587_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
														<xsl:variable name="var588_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
														<xsl:variable name="var589_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
														<xsl:variable name="var590_select_displayName" as="item()*" select="ns0:name/@displayName"/>
														<xsl:variable name="var591_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
														<xsl:variable name="var592_select_code" as="item()*" select="ns0:value/@code"/>
														<xsl:variable name="var593_select_displayName" as="item()*" select="ns0:value/@displayName"/>
														<qualifier>
															<name>
																<xsl:if test="fn:exists($var587_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var587_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var584_select_code)">
																	<xsl:attribute name="code" namespace="" select="fn:string($var584_select_code)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var586_select_codeSystem)">
																	<xsl:attribute name="codeSystem" namespace="" select="fn:string($var586_select_codeSystem)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var588_select_codeSystemName)">
																	<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var588_select_codeSystemName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var590_select_displayName)">
																	<xsl:attribute name="displayName" namespace="" select="fn:string($var590_select_displayName)"/>
																</xsl:if>
																<xsl:for-each select="ns0:name/ns0:originalText">
																	<originalText>
																		<xsl:sequence select="fn:string(.)"/>
																	</originalText>
																</xsl:for-each>
																<xsl:for-each select="ns0:name/ns0:qualifier">
																	<qualifier>
																		<xsl:sequence select="()"/>
																	</qualifier>
																</xsl:for-each>
															</name>
															<value>
																<xsl:if test="fn:exists($var589_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var589_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var592_select_code)">
																	<xsl:attribute name="code" namespace="" select="fn:string($var592_select_code)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var585_select_codeSystem)">
																	<xsl:attribute name="codeSystem" namespace="" select="fn:string($var585_select_codeSystem)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var591_select_codeSystemName)">
																	<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var591_select_codeSystemName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var593_select_displayName)">
																	<xsl:attribute name="displayName" namespace="" select="fn:string($var593_select_displayName)"/>
																</xsl:if>
																<xsl:for-each select="ns0:value/ns0:originalText">
																	<originalText>
																		<xsl:sequence select="fn:string(.)"/>
																	</originalText>
																</xsl:for-each>
																<xsl:for-each select="ns0:value/ns0:qualifier">
																	<qualifier>
																		<xsl:sequence select="()"/>
																	</qualifier>
																</xsl:for-each>
															</value>
														</qualifier>
													</xsl:for-each>
												</code>
											</xsl:for-each>
											<statusCode>
												<xsl:attribute name="code" namespace="" select="'completed'"/>
											</statusCode>
											<xsl:for-each select="ns0:procedureDateTime">
												<xsl:variable name="var594_select_value" as="item()*" select="@value"/>
												<xsl:variable name="var595_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<effectiveTime>
													<xsl:if test="fn:exists($var595_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var595_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var594_select_value)">
														<xsl:attribute name="value" namespace="" select="fn:string($var594_select_value)"/>
													</xsl:if>
													<xsl:for-each select="ns0:low">
														<xsl:variable name="var596_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var597_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<low>
															<xsl:if test="fn:exists($var597_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var597_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var596_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var596_select_value)"/>
															</xsl:if>
														</low>
													</xsl:for-each>
													<xsl:for-each select="ns0:width">
														<xsl:variable name="var598_select_unit" as="item()*" select="@unit"/>
														<xsl:variable name="var599_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var600_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<width>
															<xsl:if test="fn:exists($var600_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var600_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var599_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var599_select_value)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var598_select_unit)">
																<xsl:attribute name="unit" namespace="" select="fn:string($var598_select_unit)"/>
															</xsl:if>
														</width>
													</xsl:for-each>
													<xsl:for-each select="ns0:high">
														<xsl:variable name="var601_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var602_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<high>
															<xsl:if test="fn:exists($var602_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var602_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var601_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var601_select_value)"/>
															</xsl:if>
														</high>
													</xsl:for-each>
													<xsl:for-each select="ns0:center">
														<center>
															<xsl:call-template name="tbf:tbf1_TS">
																<xsl:with-param name="input" select="." as="node()"/>
															</xsl:call-template>
														</center>
													</xsl:for-each>
												</effectiveTime>
											</xsl:for-each>
											<xsl:for-each select="ns0:bodySite">
												<xsl:variable name="var603_select_displayName" as="item()*" select="@displayName"/>
												<xsl:variable name="var604_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var605_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var606_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var607_select_codeSystem" as="item()*" select="@codeSystem"/>
												<targetSiteCode>
													<xsl:if test="fn:exists($var606_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var606_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var605_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var605_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var607_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var607_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var604_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var604_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var603_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var603_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:sequence select="fn:string(.)"/>
														</originalText>
													</xsl:for-each>
													<xsl:for-each select="ns0:qualifier">
														<xsl:variable name="var608_select_code" as="item()*" select="ns0:value/@code"/>
														<xsl:variable name="var609_select_displayName" as="item()*" select="ns0:value/@displayName"/>
														<xsl:variable name="var610_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
														<xsl:variable name="var611_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
														<xsl:variable name="var612_select_code" as="item()*" select="ns0:name/@code"/>
														<xsl:variable name="var613_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
														<xsl:variable name="var614_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
														<xsl:variable name="var615_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
														<xsl:variable name="var616_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
														<xsl:variable name="var617_select_displayName" as="item()*" select="ns0:name/@displayName"/>
														<qualifier>
															<name>
																<xsl:if test="fn:exists($var616_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var616_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var612_select_code)">
																	<xsl:attribute name="code" namespace="" select="fn:string($var612_select_code)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var611_select_codeSystem)">
																	<xsl:attribute name="codeSystem" namespace="" select="fn:string($var611_select_codeSystem)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var613_select_codeSystemName)">
																	<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var613_select_codeSystemName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var617_select_displayName)">
																	<xsl:attribute name="displayName" namespace="" select="fn:string($var617_select_displayName)"/>
																</xsl:if>
																<xsl:for-each select="ns0:name/ns0:originalText">
																	<originalText>
																		<xsl:sequence select="fn:string(.)"/>
																	</originalText>
																</xsl:for-each>
																<xsl:for-each select="ns0:name/ns0:qualifier">
																	<qualifier>
																		<xsl:sequence select="()"/>
																	</qualifier>
																</xsl:for-each>
															</name>
															<value>
																<xsl:if test="fn:exists($var615_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var615_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var608_select_code)">
																	<xsl:attribute name="code" namespace="" select="fn:string($var608_select_code)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var610_select_codeSystem)">
																	<xsl:attribute name="codeSystem" namespace="" select="fn:string($var610_select_codeSystem)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var614_select_codeSystemName)">
																	<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var614_select_codeSystemName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var609_select_displayName)">
																	<xsl:attribute name="displayName" namespace="" select="fn:string($var609_select_displayName)"/>
																</xsl:if>
																<xsl:for-each select="ns0:value/ns0:originalText">
																	<originalText>
																		<xsl:sequence select="fn:string(.)"/>
																	</originalText>
																</xsl:for-each>
																<xsl:for-each select="ns0:value/ns0:qualifier">
																	<qualifier>
																		<xsl:sequence select="()"/>
																	</qualifier>
																</xsl:for-each>
															</value>
														</qualifier>
													</xsl:for-each>
												</targetSiteCode>
											</xsl:for-each>
											<xsl:for-each select="ns0:procedureProvider">
												<performer>
													<assignedEntity>
														<representedOrganization>
															<xsl:for-each select="ns0:organizationID">
																<xsl:variable name="var618_select_extension" as="item()*" select="@extension"/>
																<xsl:variable name="var619_select_root" as="item()*" select="@root"/>
																<xsl:variable name="var620_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<id>
																	<xsl:if test="fn:exists($var620_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var620_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var619_select_root)">
																		<xsl:attribute name="root" namespace="" select="fn:string($var619_select_root)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var618_select_extension)">
																		<xsl:attribute name="extension" namespace="" select="fn:string($var618_select_extension)"/>
																	</xsl:if>
																</id>
															</xsl:for-each>
															<xsl:for-each select="ns0:organizationName">
																<xsl:variable name="var621_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<name>
																	<xsl:if test="fn:exists($var621_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var621_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</name>
															</xsl:for-each>
															<xsl:for-each select="ns0:organizationTelecom">
																<xsl:variable name="var622_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var623_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<telecom>
																	<xsl:if test="fn:exists($var623_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var623_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var622_select_value)">
																		<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var622_select_value)))"/>
																	</xsl:if>
																</telecom>
															</xsl:for-each>
															<xsl:for-each select="ns0:organizationAddress">
																<xsl:variable name="var624_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<addr>
																	<xsl:if test="fn:exists($var624_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var624_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:for-each select="ns0:state">
																		<state>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</state>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:city">
																		<city>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</city>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:postalCode">
																		<postalCode>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</postalCode>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:streetAddressLine">
																		<streetAddressLine>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</streetAddressLine>
																	</xsl:for-each>
																</addr>
															</xsl:for-each>
														</representedOrganization>
													</assignedEntity>
												</performer>
											</xsl:for-each>
										</procedure>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:insuranceProviders">
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.9'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'48768-6'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Payers'"/>
								</title>
								<xsl:variable name="var625" as="node()?">
									<xsl:call-template name="user:insuranceProvidersNarrative">
										<xsl:with-param name="insuranceProviders" as="node()">
											<ns0:insuranceProviders xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:insuranceProviders>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var625">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:insuranceProvider">
									<xsl:variable name="var626" as="xs:string" select="'ACT'"/>
									<xsl:variable name="var627_select_extension" as="item()*" select="ns0:resultID/@extension"/>
									<xsl:variable name="var628_select_root" as="item()*" select="ns0:resultID/@root"/>
									<xsl:variable name="var629_select_nullFlavor" as="item()*" select="ns0:resultID/@nullFlavor"/>
									<xsl:variable name="var630_select_nullFlavor" as="item()*" select="ns0:memberInformation/ns0:patientName/@nullFlavor"/>
									<entry>
										<act>
											<xsl:attribute name="classCode" namespace="" select="$var626"/>
											<xsl:attribute name="moodCode" namespace="" select="'EVN'"/>
											<templateId>
												<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.26'"/>
											</templateId>
											<id>
												<xsl:if test="fn:exists($var629_select_nullFlavor)">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var629_select_nullFlavor)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var628_select_root)">
													<xsl:attribute name="root" namespace="" select="fn:string($var628_select_root)"/>
												</xsl:if>
												<xsl:if test="fn:exists($var627_select_extension)">
													<xsl:attribute name="extension" namespace="" select="fn:string($var627_select_extension)"/>
												</xsl:if>
											</id>
											<xsl:for-each select="ns0:healthInsuranceType">
												<xsl:variable name="var631_select_codeSystem" as="item()*" select="@codeSystem"/>
												<xsl:variable name="var632_select_code" as="item()*" select="@code"/>
												<xsl:variable name="var633_select_nullFlavor" as="item()*" select="@nullFlavor"/>
												<xsl:variable name="var634_select_codeSystemName" as="item()*" select="@codeSystemName"/>
												<xsl:variable name="var635_select_displayName" as="item()*" select="@displayName"/>
												<code>
													<xsl:if test="fn:exists($var633_select_nullFlavor)">
														<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var633_select_nullFlavor)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var632_select_code)">
														<xsl:attribute name="code" namespace="" select="fn:string($var632_select_code)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var631_select_codeSystem)">
														<xsl:attribute name="codeSystem" namespace="" select="fn:string($var631_select_codeSystem)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var634_select_codeSystemName)">
														<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var634_select_codeSystemName)"/>
													</xsl:if>
													<xsl:if test="fn:exists($var635_select_displayName)">
														<xsl:attribute name="displayName" namespace="" select="fn:string($var635_select_displayName)"/>
													</xsl:if>
													<xsl:for-each select="ns0:originalText">
														<originalText>
															<xsl:sequence select="fn:string(.)"/>
														</originalText>
													</xsl:for-each>
													<xsl:for-each select="ns0:qualifier">
														<xsl:variable name="var636_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
														<xsl:variable name="var637_select_displayName" as="item()*" select="ns0:name/@displayName"/>
														<xsl:variable name="var638_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
														<xsl:variable name="var639_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
														<xsl:variable name="var640_select_displayName" as="item()*" select="ns0:value/@displayName"/>
														<xsl:variable name="var641_select_code" as="item()*" select="ns0:name/@code"/>
														<xsl:variable name="var642_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
														<xsl:variable name="var643_select_code" as="item()*" select="ns0:value/@code"/>
														<xsl:variable name="var644_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
														<xsl:variable name="var645_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
														<qualifier>
															<name>
																<xsl:if test="fn:exists($var645_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var645_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var641_select_code)">
																	<xsl:attribute name="code" namespace="" select="fn:string($var641_select_code)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var642_select_codeSystem)">
																	<xsl:attribute name="codeSystem" namespace="" select="fn:string($var642_select_codeSystem)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var644_select_codeSystemName)">
																	<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var644_select_codeSystemName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var637_select_displayName)">
																	<xsl:attribute name="displayName" namespace="" select="fn:string($var637_select_displayName)"/>
																</xsl:if>
																<xsl:for-each select="ns0:name/ns0:originalText">
																	<originalText>
																		<xsl:sequence select="fn:string(.)"/>
																	</originalText>
																</xsl:for-each>
																<xsl:for-each select="ns0:name/ns0:qualifier">
																	<qualifier>
																		<xsl:sequence select="()"/>
																	</qualifier>
																</xsl:for-each>
															</name>
															<value>
																<xsl:if test="fn:exists($var638_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var638_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var643_select_code)">
																	<xsl:attribute name="code" namespace="" select="fn:string($var643_select_code)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var636_select_codeSystem)">
																	<xsl:attribute name="codeSystem" namespace="" select="fn:string($var636_select_codeSystem)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var639_select_codeSystemName)">
																	<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var639_select_codeSystemName)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var640_select_displayName)">
																	<xsl:attribute name="displayName" namespace="" select="fn:string($var640_select_displayName)"/>
																</xsl:if>
																<xsl:for-each select="ns0:value/ns0:originalText">
																	<originalText>
																		<xsl:sequence select="fn:string(.)"/>
																	</originalText>
																</xsl:for-each>
																<xsl:for-each select="ns0:value/ns0:qualifier">
																	<qualifier>
																		<xsl:sequence select="()"/>
																	</qualifier>
																</xsl:for-each>
															</value>
														</qualifier>
													</xsl:for-each>
												</code>
											</xsl:for-each>
											<statusCode>
												<xsl:attribute name="code" namespace="" select="'completed'"/>
											</statusCode>
											<performer>
												<xsl:attribute name="typeCode" namespace="" select="'PRF'"/>
												<assignedEntity>
													<xsl:for-each select="ns0:payer/ns0:organizationID">
														<xsl:variable name="var646_select_root" as="item()*" select="@root"/>
														<xsl:variable name="var647_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<xsl:variable name="var648_select_extension" as="item()*" select="@extension"/>
														<id>
															<xsl:if test="fn:exists($var647_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var647_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var646_select_root)">
																<xsl:attribute name="root" namespace="" select="fn:string($var646_select_root)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var648_select_extension)">
																<xsl:attribute name="extension" namespace="" select="fn:string($var648_select_extension)"/>
															</xsl:if>
														</id>
													</xsl:for-each>
													<xsl:for-each select="ns0:financialResponsibilityPartyType">
														<xsl:variable name="var649_select_codeSystemName" as="item()*" select="@codeSystemName"/>
														<xsl:variable name="var650_select_codeSystem" as="item()*" select="@codeSystem"/>
														<xsl:variable name="var651_select_code" as="item()*" select="@code"/>
														<xsl:variable name="var652_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<xsl:variable name="var653_select_displayName" as="item()*" select="@displayName"/>
														<code>
															<xsl:if test="fn:exists($var652_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var652_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var651_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var651_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var650_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var650_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var649_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var649_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var653_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var653_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:qualifier">
																<xsl:variable name="var654_select_code" as="item()*" select="ns0:value/@code"/>
																<xsl:variable name="var655_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																<xsl:variable name="var656_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																<xsl:variable name="var657_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																<xsl:variable name="var658_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																<xsl:variable name="var659_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																<xsl:variable name="var660_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																<xsl:variable name="var661_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																<xsl:variable name="var662_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																<xsl:variable name="var663_select_code" as="item()*" select="ns0:name/@code"/>
																<qualifier>
																	<name>
																		<xsl:if test="fn:exists($var655_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var655_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var663_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var663_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var658_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var658_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var660_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var660_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var659_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var659_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:name/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:name/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</name>
																	<value>
																		<xsl:if test="fn:exists($var661_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var661_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var654_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var654_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var662_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var662_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var657_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var657_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var656_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var656_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:value/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:value/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</value>
																</qualifier>
															</xsl:for-each>
														</code>
													</xsl:for-each>
													<xsl:for-each select="ns0:payer/ns0:organizationAddress">
														<xsl:variable name="var664_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<addr>
															<xsl:if test="fn:exists($var664_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var664_select_nullFlavor)"/>
															</xsl:if>
															<xsl:for-each select="ns0:state">
																<state>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</state>
															</xsl:for-each>
															<xsl:for-each select="ns0:city">
																<city>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</city>
															</xsl:for-each>
															<xsl:for-each select="ns0:postalCode">
																<postalCode>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</postalCode>
															</xsl:for-each>
															<xsl:for-each select="ns0:streetAddressLine">
																<streetAddressLine>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</streetAddressLine>
															</xsl:for-each>
														</addr>
													</xsl:for-each>
													<xsl:for-each select="ns0:payer/ns0:organizationTelecom">
														<xsl:variable name="var665_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var666_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<telecom>
															<xsl:if test="fn:exists($var666_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var666_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var665_select_value)">
																<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var665_select_value)))"/>
															</xsl:if>
														</telecom>
													</xsl:for-each>
													<representedOrganization>
														<xsl:for-each select="ns0:payer/ns0:organizationName">
															<xsl:variable name="var667_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<name>
																<xsl:if test="fn:exists($var667_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var667_select_nullFlavor)"/>
																</xsl:if>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</name>
														</xsl:for-each>
													</representedOrganization>
												</assignedEntity>
											</performer>
											<xsl:for-each select="ns0:guarantorInformation">
												<performer>
													<xsl:for-each select="ns0:responsibilityEffectiveDate">
														<xsl:variable name="var668_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var669_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<time>
															<xsl:if test="fn:exists($var669_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var669_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var668_select_value)">
																<xsl:attribute name="value" namespace="" select="fn:string($var668_select_value)"/>
															</xsl:if>
															<xsl:for-each select="ns0:low">
																<xsl:variable name="var670_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var671_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<low>
																	<xsl:if test="fn:exists($var671_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var671_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var670_select_value)">
																		<xsl:attribute name="value" namespace="" select="fn:string($var670_select_value)"/>
																	</xsl:if>
																</low>
															</xsl:for-each>
															<xsl:for-each select="ns0:width">
																<xsl:variable name="var672_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var673_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<xsl:variable name="var674_select_unit" as="item()*" select="@unit"/>
																<width>
																	<xsl:if test="fn:exists($var673_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var673_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var672_select_value)">
																		<xsl:attribute name="value" namespace="" select="fn:string($var672_select_value)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var674_select_unit)">
																		<xsl:attribute name="unit" namespace="" select="fn:string($var674_select_unit)"/>
																	</xsl:if>
																</width>
															</xsl:for-each>
															<xsl:for-each select="ns0:high">
																<xsl:variable name="var675_select_value" as="item()*" select="@value"/>
																<xsl:variable name="var676_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<high>
																	<xsl:if test="fn:exists($var676_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var676_select_nullFlavor)"/>
																	</xsl:if>
																	<xsl:if test="fn:exists($var675_select_value)">
																		<xsl:attribute name="value" namespace="" select="fn:string($var675_select_value)"/>
																	</xsl:if>
																</high>
															</xsl:for-each>
															<xsl:for-each select="ns0:center">
																<center>
																	<xsl:call-template name="tbf:tbf1_TS">
																		<xsl:with-param name="input" select="." as="node()"/>
																	</xsl:call-template>
																</center>
															</xsl:for-each>
														</time>
													</xsl:for-each>
													<assignedEntity>
														<code>
															<xsl:attribute name="code" namespace="" select="''"/>
															<xsl:attribute name="codeSystem" namespace="" select="''"/>
														</code>
														<xsl:for-each select="ns0:partyAddress">
															<xsl:variable name="var677_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<addr>
																<xsl:if test="fn:exists($var677_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var677_select_nullFlavor)"/>
																</xsl:if>
																<xsl:for-each select="ns0:state">
																	<state>
																		<xsl:for-each select="node()[./self::text()]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</state>
																</xsl:for-each>
																<xsl:for-each select="ns0:city">
																	<city>
																		<xsl:for-each select="node()[./self::text()]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</city>
																</xsl:for-each>
																<xsl:for-each select="ns0:postalCode">
																	<postalCode>
																		<xsl:for-each select="node()[./self::text()]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</postalCode>
																</xsl:for-each>
																<xsl:for-each select="ns0:streetAddressLine">
																	<streetAddressLine>
																		<xsl:for-each select="node()[./self::text()]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</streetAddressLine>
																</xsl:for-each>
															</addr>
														</xsl:for-each>
														<xsl:for-each select="ns0:partyPhone">
															<xsl:variable name="var678_select_value" as="item()*" select="@value"/>
															<xsl:variable name="var679_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<telecom>
																<xsl:if test="fn:exists($var679_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var679_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var678_select_value)">
																	<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var678_select_value)))"/>
																</xsl:if>
															</telecom>
														</xsl:for-each>
														<assignedPerson>
															<xsl:for-each select="ns0:partyName">
																<xsl:variable name="var680_select_nullFlavor" as="item()*" select="@nullFlavor"/>
																<name>
																	<xsl:if test="fn:exists($var680_select_nullFlavor)">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var680_select_nullFlavor)"/>
																	</xsl:if>
																	<family>
																		<xsl:for-each select="ns0:family/node()[./self::text()]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</family>
																	<given>
																		<xsl:for-each select="ns0:given/node()[./self::text()]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</given>
																	<xsl:for-each select="ns0:prefix">
																		<prefix>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</prefix>
																	</xsl:for-each>
																	<xsl:for-each select="ns0:suffix">
																		<suffix>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</suffix>
																	</xsl:for-each>
																</name>
															</xsl:for-each>
														</assignedPerson>
													</assignedEntity>
												</performer>
											</xsl:for-each>
											<participant>
												<xsl:attribute name="typeCode" namespace="" select="'COV'"/>
												<xsl:for-each select="ns0:memberInformation/ns0:healthPlanCoverageDates">
													<xsl:variable name="var681_select_value" as="item()*" select="@value"/>
													<xsl:variable name="var682_select_nullFlavor" as="item()*" select="@nullFlavor"/>
													<time>
														<xsl:if test="fn:exists($var682_select_nullFlavor)">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var682_select_nullFlavor)"/>
														</xsl:if>
														<xsl:if test="fn:exists($var681_select_value)">
															<xsl:attribute name="value" namespace="" select="fn:string($var681_select_value)"/>
														</xsl:if>
														<xsl:for-each select="ns0:low">
															<xsl:variable name="var683_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<xsl:variable name="var684_select_value" as="item()*" select="@value"/>
															<low>
																<xsl:if test="fn:exists($var683_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var683_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var684_select_value)">
																	<xsl:attribute name="value" namespace="" select="fn:string($var684_select_value)"/>
																</xsl:if>
															</low>
														</xsl:for-each>
														<xsl:for-each select="ns0:width">
															<xsl:variable name="var685_select_unit" as="item()*" select="@unit"/>
															<xsl:variable name="var686_select_value" as="item()*" select="@value"/>
															<xsl:variable name="var687_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<width>
																<xsl:if test="fn:exists($var687_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var687_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var686_select_value)">
																	<xsl:attribute name="value" namespace="" select="fn:string($var686_select_value)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var685_select_unit)">
																	<xsl:attribute name="unit" namespace="" select="fn:string($var685_select_unit)"/>
																</xsl:if>
															</width>
														</xsl:for-each>
														<xsl:for-each select="ns0:high">
															<xsl:variable name="var688_select_value" as="item()*" select="@value"/>
															<xsl:variable name="var689_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<high>
																<xsl:if test="fn:exists($var689_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var689_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var688_select_value)">
																	<xsl:attribute name="value" namespace="" select="fn:string($var688_select_value)"/>
																</xsl:if>
															</high>
														</xsl:for-each>
														<xsl:for-each select="ns0:center">
															<center>
																<xsl:call-template name="tbf:tbf1_TS">
																	<xsl:with-param name="input" select="." as="node()"/>
																</xsl:call-template>
															</center>
														</xsl:for-each>
													</time>
												</xsl:for-each>
												<participantRole>
													<xsl:attribute name="classCode" namespace="" select="'PAT'"/>
													<xsl:for-each select="ns0:memberInformation/ns0:memberID">
														<xsl:variable name="var690_select_root" as="item()*" select="@root"/>
														<xsl:variable name="var691_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<xsl:variable name="var692_select_extension" as="item()*" select="@extension"/>
														<id>
															<xsl:if test="fn:exists($var691_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var691_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var690_select_root)">
																<xsl:attribute name="root" namespace="" select="fn:string($var690_select_root)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var692_select_extension)">
																<xsl:attribute name="extension" namespace="" select="fn:string($var692_select_extension)"/>
															</xsl:if>
														</id>
													</xsl:for-each>
													<xsl:for-each select="ns0:memberInformation/ns0:patientRelationshipToSubscriber">
														<xsl:variable name="var693_select_code" as="item()*" select="@code"/>
														<xsl:variable name="var694_select_displayName" as="item()*" select="@displayName"/>
														<xsl:variable name="var695_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<xsl:variable name="var696_select_codeSystemName" as="item()*" select="@codeSystemName"/>
														<xsl:variable name="var697_select_codeSystem" as="item()*" select="@codeSystem"/>
														<code>
															<xsl:if test="fn:exists($var695_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var695_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var693_select_code)">
																<xsl:attribute name="code" namespace="" select="fn:string($var693_select_code)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var697_select_codeSystem)">
																<xsl:attribute name="codeSystem" namespace="" select="fn:string($var697_select_codeSystem)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var696_select_codeSystemName)">
																<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var696_select_codeSystemName)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var694_select_displayName)">
																<xsl:attribute name="displayName" namespace="" select="fn:string($var694_select_displayName)"/>
															</xsl:if>
															<xsl:for-each select="ns0:originalText">
																<originalText>
																	<xsl:sequence select="fn:string(.)"/>
																</originalText>
															</xsl:for-each>
															<xsl:for-each select="ns0:qualifier">
																<xsl:variable name="var698_select_nullFlavor" as="item()*" select="ns0:name/@nullFlavor"/>
																<xsl:variable name="var699_select_codeSystemName" as="item()*" select="ns0:value/@codeSystemName"/>
																<xsl:variable name="var700_select_nullFlavor" as="item()*" select="ns0:value/@nullFlavor"/>
																<xsl:variable name="var701_select_displayName" as="item()*" select="ns0:name/@displayName"/>
																<xsl:variable name="var702_select_displayName" as="item()*" select="ns0:value/@displayName"/>
																<xsl:variable name="var703_select_codeSystemName" as="item()*" select="ns0:name/@codeSystemName"/>
																<xsl:variable name="var704_select_code" as="item()*" select="ns0:value/@code"/>
																<xsl:variable name="var705_select_code" as="item()*" select="ns0:name/@code"/>
																<xsl:variable name="var706_select_codeSystem" as="item()*" select="ns0:value/@codeSystem"/>
																<xsl:variable name="var707_select_codeSystem" as="item()*" select="ns0:name/@codeSystem"/>
																<qualifier>
																	<name>
																		<xsl:if test="fn:exists($var698_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var698_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var705_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var705_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var707_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var707_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var703_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var703_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var701_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var701_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:name/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:name/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</name>
																	<value>
																		<xsl:if test="fn:exists($var700_select_nullFlavor)">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var700_select_nullFlavor)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var704_select_code)">
																			<xsl:attribute name="code" namespace="" select="fn:string($var704_select_code)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var706_select_codeSystem)">
																			<xsl:attribute name="codeSystem" namespace="" select="fn:string($var706_select_codeSystem)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var699_select_codeSystemName)">
																			<xsl:attribute name="codeSystemName" namespace="" select="fn:string($var699_select_codeSystemName)"/>
																		</xsl:if>
																		<xsl:if test="fn:exists($var702_select_displayName)">
																			<xsl:attribute name="displayName" namespace="" select="fn:string($var702_select_displayName)"/>
																		</xsl:if>
																		<xsl:for-each select="ns0:value/ns0:originalText">
																			<originalText>
																				<xsl:sequence select="fn:string(.)"/>
																			</originalText>
																		</xsl:for-each>
																		<xsl:for-each select="ns0:value/ns0:qualifier">
																			<qualifier>
																				<xsl:sequence select="()"/>
																			</qualifier>
																		</xsl:for-each>
																	</value>
																</qualifier>
															</xsl:for-each>
														</code>
													</xsl:for-each>
													<xsl:for-each select="ns0:memberInformation/ns0:patientAddress">
														<xsl:variable name="var708_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<addr>
															<xsl:if test="fn:exists($var708_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var708_select_nullFlavor)"/>
															</xsl:if>
															<xsl:for-each select="ns0:state">
																<state>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</state>
															</xsl:for-each>
															<xsl:for-each select="ns0:city">
																<city>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</city>
															</xsl:for-each>
															<xsl:for-each select="ns0:postalCode">
																<postalCode>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</postalCode>
															</xsl:for-each>
															<xsl:for-each select="ns0:streetAddressLine">
																<streetAddressLine>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</streetAddressLine>
															</xsl:for-each>
														</addr>
													</xsl:for-each>
													<xsl:for-each select="ns0:memberInformation/ns0:patientPhone">
														<xsl:variable name="var709_select_value" as="item()*" select="@value"/>
														<xsl:variable name="var710_select_nullFlavor" as="item()*" select="@nullFlavor"/>
														<telecom>
															<xsl:if test="fn:exists($var710_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var710_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var709_select_value)">
																<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var709_select_value)))"/>
															</xsl:if>
														</telecom>
													</xsl:for-each>
													<playingEntity>
														<name>
															<xsl:if test="fn:exists($var630_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var630_select_nullFlavor)"/>
															</xsl:if>
															<family>
																<xsl:for-each select="ns0:memberInformation/ns0:patientName/ns0:family/node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</family>
															<given>
																<xsl:for-each select="ns0:memberInformation/ns0:patientName/ns0:given/node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</given>
															<xsl:for-each select="ns0:memberInformation/ns0:patientName/ns0:prefix">
																<prefix>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</prefix>
															</xsl:for-each>
															<xsl:for-each select="ns0:memberInformation/ns0:patientName/ns0:suffix">
																<suffix>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</suffix>
															</xsl:for-each>
														</name>
													</playingEntity>
												</participantRole>
											</participant>
											<xsl:for-each select="ns0:subscriberInformation">
												<xsl:variable name="var711_select_nullFlavor" as="item()*" select="ns0:subscriberID/@nullFlavor"/>
												<xsl:variable name="var712_select_nullFlavor" as="item()*" select="ns0:subscriberName/@nullFlavor"/>
												<xsl:variable name="var713_select_nullFlavor" as="item()*" select="ns0:subscriberAddress/@nullFlavor"/>
												<xsl:variable name="var714_select_root" as="item()*" select="ns0:subscriberID/@root"/>
												<xsl:variable name="var715_select_extension" as="item()*" select="ns0:subscriberID/@extension"/>
												<participant>
													<xsl:attribute name="typeCode" namespace="" select="'HLD'"/>
													<participantRole>
														<id>
															<xsl:if test="fn:exists($var711_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var711_select_nullFlavor)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var714_select_root)">
																<xsl:attribute name="root" namespace="" select="fn:string($var714_select_root)"/>
															</xsl:if>
															<xsl:if test="fn:exists($var715_select_extension)">
																<xsl:attribute name="extension" namespace="" select="fn:string($var715_select_extension)"/>
															</xsl:if>
														</id>
														<addr>
															<xsl:if test="fn:exists($var713_select_nullFlavor)">
																<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var713_select_nullFlavor)"/>
															</xsl:if>
															<xsl:for-each select="ns0:subscriberAddress/ns0:state">
																<state>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</state>
															</xsl:for-each>
															<xsl:for-each select="ns0:subscriberAddress/ns0:city">
																<city>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</city>
															</xsl:for-each>
															<xsl:for-each select="ns0:subscriberAddress/ns0:postalCode">
																<postalCode>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</postalCode>
															</xsl:for-each>
															<xsl:for-each select="ns0:subscriberAddress/ns0:streetAddressLine">
																<streetAddressLine>
																	<xsl:for-each select="node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</streetAddressLine>
															</xsl:for-each>
														</addr>
														<xsl:for-each select="ns0:subscriberPhone">
															<xsl:variable name="var716_select_value" as="item()*" select="@value"/>
															<xsl:variable name="var717_select_nullFlavor" as="item()*" select="@nullFlavor"/>
															<telecom>
																<xsl:if test="fn:exists($var717_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var717_select_nullFlavor)"/>
																</xsl:if>
																<xsl:if test="fn:exists($var716_select_value)">
																	<xsl:attribute name="value" namespace="" select="xs:string(xs:anyURI(fn:string($var716_select_value)))"/>
																</xsl:if>
															</telecom>
														</xsl:for-each>
														<playingEntity>
															<name>
																<xsl:if test="fn:exists($var712_select_nullFlavor)">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string($var712_select_nullFlavor)"/>
																</xsl:if>
																<family>
																	<xsl:for-each select="ns0:subscriberName/ns0:family/node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</family>
																<given>
																	<xsl:for-each select="ns0:subscriberName/ns0:given/node()[./self::text()]">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:for-each>
																</given>
																<xsl:for-each select="ns0:subscriberName/ns0:prefix">
																	<prefix>
																		<xsl:for-each select="node()[./self::text()]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</prefix>
																</xsl:for-each>
																<xsl:for-each select="ns0:subscriberName/ns0:suffix">
																	<suffix>
																		<xsl:for-each select="node()[./self::text()]">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:for-each>
																	</suffix>
																</xsl:for-each>
															</name>
														</playingEntity>
													</participantRole>
												</participant>
											</xsl:for-each>
											<xsl:for-each select="ns0:healthPlanName">
												<entryRelationship>
													<xsl:attribute name="typeCode" namespace="" select="'REFR'"/>
													<act>
														<xsl:attribute name="classCode" namespace="" select="$var626"/>
														<xsl:attribute name="moodCode" namespace="" select="'DEF'"/>
														<id>
															<xsl:attribute name="nullFlavor" namespace="" select="'NI'"/>
														</id>
														<code>
															<xsl:attribute name="nullFlavor" namespace="" select="'NA'"/>
														</code>
														<text>
															<xsl:for-each select="node()[./self::text()]">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:for-each>
														</text>
													</act>
												</entryRelationship>
											</xsl:for-each>
										</act>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:pregnancies">
						<component>
							<xsl:sequence select="()"/>
						</component>
					</xsl:for-each>
					<xsl:for-each select="ns0:greenCCD/ns0:body/ns0:conditions">
						<component>
							<section>
								<templateId>
									<xsl:attribute name="root" namespace="" select="'2.16.840.1.113883.10.20.1.11'"/>
								</templateId>
								<code>
									<xsl:attribute name="code" namespace="" select="'11450-4'"/>
									<xsl:attribute name="codeSystem" namespace="" select="$var1"/>
								</code>
								<title>
									<xsl:sequence select="'Problems'"/>
								</title>
								<xsl:variable name="var718" as="node()?">
									<xsl:call-template name="user:conditionsNarrative">
										<xsl:with-param name="conditions" as="node()">
											<ns0:conditions xsl:exclude-result-prefixes="ns0">
												<xsl:sequence select="(./@node(), ./node())"/>
											</ns0:conditions>
										</xsl:with-param>
									</xsl:call-template>
								</xsl:variable>
								<xsl:for-each select="$var718">
									<text>
										<xsl:for-each select="@ID">
											<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@language">
											<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="@styleCode">
											<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
										</xsl:for-each>
										<xsl:for-each select="@mediaType">
											<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
										</xsl:for-each>
										<xsl:for-each select="node()">
											<xsl:if test="self::text()">
												<xsl:sequence select="fn:string(.)"/>
											</xsl:if>
											<xsl:if test="self::ns1:content">
												<content>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="@revised">
														<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:caption">
																								<caption>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</caption>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</content>
											</xsl:if>
											<xsl:if test="self::ns1:linkHtml">
												<linkHtml>
													<xsl:for-each select="@name">
														<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@href">
														<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rel">
														<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@rev">
														<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@title">
														<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:caption">
																					<caption>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</caption>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
													</xsl:for-each>
												</linkHtml>
											</xsl:if>
											<xsl:if test="self::ns1:sub">
												<sub>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sub>
											</xsl:if>
											<xsl:if test="self::ns1:sup">
												<sup>
													<xsl:for-each select="node()[./self::text()]">
														<xsl:sequence select="fn:string(.)"/>
													</xsl:for-each>
												</sup>
											</xsl:if>
											<xsl:if test="self::ns1:br">
												<br>
													<xsl:sequence select="()"/>
												</br>
											</xsl:if>
											<xsl:if test="self::ns1:footnote">
												<footnote>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
														<xsl:if test="self::ns1:paragraph">
															<paragraph>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:caption">
																		<caption>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</caption>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</paragraph>
														</xsl:if>
														<xsl:if test="self::ns1:list">
															<list>
																<xsl:sequence select="(./@node(), ./node())"/>
															</list>
														</xsl:if>
														<xsl:if test="self::ns1:table">
															<table>
																<xsl:sequence select="(./@node(), ./node())"/>
															</table>
														</xsl:if>
													</xsl:for-each>
												</footnote>
											</xsl:if>
											<xsl:if test="self::ns1:footnoteRef">
												<footnoteRef>
													<xsl:sequence select="(./@node(), ./node())"/>
												</footnoteRef>
											</xsl:if>
											<xsl:if test="self::ns1:renderMultiMedia">
												<renderMultiMedia>
													<xsl:sequence select="(./@node(), ./node())"/>
												</renderMultiMedia>
											</xsl:if>
											<xsl:if test="self::ns1:paragraph">
												<paragraph>
													<xsl:for-each select="@ID">
														<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@language">
														<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
													</xsl:for-each>
													<xsl:for-each select="@styleCode">
														<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
													</xsl:for-each>
													<xsl:for-each select="node()">
														<xsl:if test="self::text()">
															<xsl:sequence select="fn:string(.)"/>
														</xsl:if>
														<xsl:if test="self::ns1:caption">
															<caption>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="@revised">
																										<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:content">
																											<content>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</content>
																										</xsl:if>
																										<xsl:if test="self::ns1:linkHtml">
																											<linkHtml>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</linkHtml>
																										</xsl:if>
																										<xsl:if test="self::ns1:sub">
																											<sub>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sub>
																										</xsl:if>
																										<xsl:if test="self::ns1:sup">
																											<sup>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</sup>
																										</xsl:if>
																										<xsl:if test="self::ns1:br">
																											<br>
																												<xsl:sequence select="()"/>
																											</br>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																										<xsl:if test="self::ns1:renderMultiMedia">
																											<renderMultiMedia>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</renderMultiMedia>
																										</xsl:if>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="@name">
																										<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@href">
																										<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rel">
																										<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@rev">
																										<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@title">
																										<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@ID">
																										<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@language">
																										<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																									</xsl:for-each>
																									<xsl:for-each select="@styleCode">
																										<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																									</xsl:for-each>
																									<xsl:for-each select="node()">
																										<xsl:if test="self::text()">
																											<xsl:sequence select="fn:string(.)"/>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnote">
																											<footnote>
																												<xsl:for-each select="node()[./self::text()]">
																													<xsl:sequence select="fn:string(.)"/>
																												</xsl:for-each>
																											</footnote>
																										</xsl:if>
																										<xsl:if test="self::ns1:footnoteRef">
																											<footnoteRef>
																												<xsl:sequence select="(./@node(), ./node())"/>
																											</footnoteRef>
																										</xsl:if>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</caption>
														</xsl:if>
														<xsl:if test="self::ns1:content">
															<content>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="@revised">
																	<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																							<xsl:if test="self::ns1:paragraph">
																								<paragraph>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</paragraph>
																							</xsl:if>
																							<xsl:if test="self::ns1:list">
																								<list>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</list>
																							</xsl:if>
																							<xsl:if test="self::ns1:table">
																								<table>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</table>
																							</xsl:if>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																</xsl:for-each>
															</content>
														</xsl:if>
														<xsl:if test="self::ns1:linkHtml">
															<linkHtml>
																<xsl:for-each select="@name">
																	<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@href">
																	<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rel">
																	<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@rev">
																	<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@title">
																	<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnote">
																		<footnote>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="@revised">
																							<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:content">
																								<content>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</content>
																							</xsl:if>
																							<xsl:if test="self::ns1:linkHtml">
																								<linkHtml>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</linkHtml>
																							</xsl:if>
																							<xsl:if test="self::ns1:sub">
																								<sub>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sub>
																							</xsl:if>
																							<xsl:if test="self::ns1:sup">
																								<sup>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</sup>
																							</xsl:if>
																							<xsl:if test="self::ns1:br">
																								<br>
																									<xsl:sequence select="()"/>
																								</br>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																							<xsl:if test="self::ns1:renderMultiMedia">
																								<renderMultiMedia>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</renderMultiMedia>
																							</xsl:if>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																				<xsl:if test="self::ns1:paragraph">
																					<paragraph>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</paragraph>
																				</xsl:if>
																				<xsl:if test="self::ns1:list">
																					<list>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</list>
																				</xsl:if>
																				<xsl:if test="self::ns1:table">
																					<table>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</table>
																				</xsl:if>
																			</xsl:for-each>
																		</footnote>
																	</xsl:if>
																	<xsl:if test="self::ns1:footnoteRef">
																		<footnoteRef>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</footnoteRef>
																	</xsl:if>
																</xsl:for-each>
															</linkHtml>
														</xsl:if>
														<xsl:if test="self::ns1:sub">
															<sub>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sub>
														</xsl:if>
														<xsl:if test="self::ns1:sup">
															<sup>
																<xsl:for-each select="node()[./self::text()]">
																	<xsl:sequence select="fn:string(.)"/>
																</xsl:for-each>
															</sup>
														</xsl:if>
														<xsl:if test="self::ns1:br">
															<br>
																<xsl:sequence select="()"/>
															</br>
														</xsl:if>
														<xsl:if test="self::ns1:footnote">
															<footnote>
																<xsl:for-each select="@ID">
																	<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@language">
																	<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@styleCode">
																	<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																</xsl:for-each>
																<xsl:for-each select="node()">
																	<xsl:if test="self::text()">
																		<xsl:sequence select="fn:string(.)"/>
																	</xsl:if>
																	<xsl:if test="self::ns1:content">
																		<content>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="@revised">
																				<xsl:attribute name="revised" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:content">
																					<content>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</content>
																				</xsl:if>
																				<xsl:if test="self::ns1:linkHtml">
																					<linkHtml>
																						<xsl:for-each select="@name">
																							<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@href">
																							<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rel">
																							<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@rev">
																							<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@title">
																							<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@ID">
																							<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@language">
																							<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																						</xsl:for-each>
																						<xsl:for-each select="@styleCode">
																							<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																						</xsl:for-each>
																						<xsl:for-each select="node()">
																							<xsl:if test="self::text()">
																								<xsl:sequence select="fn:string(.)"/>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnote">
																								<footnote>
																									<xsl:for-each select="node()[./self::text()]">
																										<xsl:sequence select="fn:string(.)"/>
																									</xsl:for-each>
																								</footnote>
																							</xsl:if>
																							<xsl:if test="self::ns1:footnoteRef">
																								<footnoteRef>
																									<xsl:sequence select="(./@node(), ./node())"/>
																								</footnoteRef>
																							</xsl:if>
																						</xsl:for-each>
																					</linkHtml>
																				</xsl:if>
																				<xsl:if test="self::ns1:sub">
																					<sub>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sub>
																				</xsl:if>
																				<xsl:if test="self::ns1:sup">
																					<sup>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</sup>
																				</xsl:if>
																				<xsl:if test="self::ns1:br">
																					<br>
																						<xsl:sequence select="()"/>
																					</br>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																				<xsl:if test="self::ns1:renderMultiMedia">
																					<renderMultiMedia>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</renderMultiMedia>
																				</xsl:if>
																			</xsl:for-each>
																		</content>
																	</xsl:if>
																	<xsl:if test="self::ns1:linkHtml">
																		<linkHtml>
																			<xsl:for-each select="@name">
																				<xsl:attribute name="name" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@href">
																				<xsl:attribute name="href" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rel">
																				<xsl:attribute name="rel" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@rev">
																				<xsl:attribute name="rev" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@title">
																				<xsl:attribute name="title" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@ID">
																				<xsl:attribute name="ID" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@language">
																				<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																			</xsl:for-each>
																			<xsl:for-each select="@styleCode">
																				<xsl:attribute name="styleCode" namespace="" select="fn:string-join(fn:tokenize(fn:string(.), ' '), ' ')"/>
																			</xsl:for-each>
																			<xsl:for-each select="node()">
																				<xsl:if test="self::text()">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnote">
																					<footnote>
																						<xsl:for-each select="node()[./self::text()]">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:for-each>
																					</footnote>
																				</xsl:if>
																				<xsl:if test="self::ns1:footnoteRef">
																					<footnoteRef>
																						<xsl:sequence select="(./@node(), ./node())"/>
																					</footnoteRef>
																				</xsl:if>
																			</xsl:for-each>
																		</linkHtml>
																	</xsl:if>
																	<xsl:if test="self::ns1:sub">
																		<sub>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sub>
																	</xsl:if>
																	<xsl:if test="self::ns1:sup">
																		<sup>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</sup>
																	</xsl:if>
																	<xsl:if test="self::ns1:br">
																		<br>
																			<xsl:sequence select="()"/>
																		</br>
																	</xsl:if>
																	<xsl:if test="self::ns1:renderMultiMedia">
																		<renderMultiMedia>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</renderMultiMedia>
																	</xsl:if>
																	<xsl:if test="self::ns1:paragraph">
																		<paragraph>
																			<xsl:for-each select="node()[./self::text()]">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:for-each>
																		</paragraph>
																	</xsl:if>
																	<xsl:if test="self::ns1:list">
																		<list>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</list>
																	</xsl:if>
																	<xsl:if test="self::ns1:table">
																		<table>
																			<xsl:sequence select="(./@node(), ./node())"/>
																		</table>
																	</xsl:if>
																</xsl:for-each>
															</footnote>
														</xsl:if>
														<xsl:if test="self::ns1:footnoteRef">
															<footnoteRef>
																<xsl:sequence select="(./@node(), ./node())"/>
															</footnoteRef>
														</xsl:if>
														<xsl:if test="self::ns1:renderMultiMedia">
															<renderMultiMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</renderMultiMedia>
														</xsl:if>
													</xsl:for-each>
												</paragraph>
											</xsl:if>
											<xsl:if test="self::ns1:list">
												<list>
													<xsl:sequence select="(./@node(), ./node())"/>
												</list>
											</xsl:if>
											<xsl:if test="self::ns1:table">
												<table>
													<xsl:sequence select="(./@node(), ./node())"/>
												</table>
											</xsl:if>
										</xsl:for-each>
									</text>
								</xsl:for-each>
								<xsl:for-each select="ns0:condition">
									<xsl:variable name="var719_resultof_mapCondition" as="node()?">
										<xsl:call-template name="user:mapCondition">
											<xsl:with-param name="condition" as="node()">
												<ns0:condition xsl:exclude-result-prefixes="ns0">
													<xsl:sequence select="(./@node(), ./node())"/>
												</ns0:condition>
											</xsl:with-param>
										</xsl:call-template>
									</xsl:variable>
									<entry>
										<xsl:if test="fn:exists($var719_resultof_mapCondition)">
											<act>
												<xsl:for-each select="$var719_resultof_mapCondition/@nullFlavor">
													<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/@classCode">
													<xsl:attribute name="classCode" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/@moodCode">
													<xsl:attribute name="moodCode" namespace="" select="fn:string(.)"/>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/@negationInd">
													<xsl:attribute name="negationInd" namespace="" select="xs:string(xs:boolean(fn:string(.)))"/>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:realmCode">
													<realmCode>
														<xsl:sequence select="(./@node(), ./node())"/>
													</realmCode>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:typeId">
													<typeId>
														<xsl:sequence select="(./@node(), ./node())"/>
													</typeId>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:templateId">
													<templateId>
														<xsl:sequence select="(./@node(), ./node())"/>
													</templateId>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:id">
													<id>
														<xsl:sequence select="(./@node(), ./node())"/>
													</id>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:code">
													<code>
														<xsl:sequence select="(./@node(), ./node())"/>
													</code>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:text">
													<text>
														<xsl:for-each select="@nullFlavor">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@representation">
															<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@mediaType">
															<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@language">
															<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@compression">
															<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@integrityCheck">
															<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:for-each select="@integrityCheckAlgorithm">
															<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="node()">
															<xsl:if test="self::text()">
																<xsl:sequence select="fn:string(.)"/>
															</xsl:if>
															<xsl:if test="self::ns1:reference">
																<reference>
																	<xsl:sequence select="(./@node(), ./node())"/>
																</reference>
															</xsl:if>
															<xsl:if test="self::ns1:thumbnail">
																<thumbnail>
																	<xsl:for-each select="@nullFlavor">
																		<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@representation">
																		<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@mediaType">
																		<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@language">
																		<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@compression">
																		<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="@integrityCheck">
																		<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
																	</xsl:for-each>
																	<xsl:for-each select="@integrityCheckAlgorithm">
																		<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
																	</xsl:for-each>
																	<xsl:for-each select="node()">
																		<xsl:if test="self::text()">
																			<xsl:sequence select="fn:string(.)"/>
																		</xsl:if>
																		<xsl:if test="self::ns1:reference">
																			<reference>
																				<xsl:sequence select="(./@node(), ./node())"/>
																			</reference>
																		</xsl:if>
																		<xsl:if test="self::ns1:thumbnail">
																			<thumbnail>
																				<xsl:for-each select="node()[./self::text()]">
																					<xsl:sequence select="fn:string(.)"/>
																				</xsl:for-each>
																			</thumbnail>
																		</xsl:if>
																	</xsl:for-each>
																</thumbnail>
															</xsl:if>
														</xsl:for-each>
													</text>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:statusCode">
													<statusCode>
														<xsl:sequence select="(./@node(), ./node())"/>
													</statusCode>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:effectiveTime">
													<effectiveTime>
														<xsl:sequence select="(./@node(), ./node())"/>
													</effectiveTime>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:priorityCode">
													<priorityCode>
														<xsl:sequence select="(./@node(), ./node())"/>
													</priorityCode>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:languageCode">
													<languageCode>
														<xsl:sequence select="(./@node(), ./node())"/>
													</languageCode>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:subject">
													<subject>
														<xsl:sequence select="(./@node(), ./node())"/>
													</subject>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:specimen">
													<specimen>
														<xsl:sequence select="(./@node(), ./node())"/>
													</specimen>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:performer">
													<performer>
														<xsl:sequence select="(./@node(), ./node())"/>
													</performer>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:author">
													<author>
														<xsl:sequence select="(./@node(), ./node())"/>
													</author>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:informant">
													<informant>
														<xsl:sequence select="(./@node(), ./node())"/>
													</informant>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:participant">
													<participant>
														<xsl:sequence select="(./@node(), ./node())"/>
													</participant>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:entryRelationship">
													<entryRelationship>
														<xsl:for-each select="@nullFlavor">
															<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@typeCode">
															<xsl:attribute name="typeCode" namespace="" select="fn:string(.)"/>
														</xsl:for-each>
														<xsl:for-each select="@inversionInd">
															<xsl:attribute name="inversionInd" namespace="" select="xs:string(xs:boolean(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:for-each select="@contextConductionInd">
															<xsl:attribute name="contextConductionInd" namespace="" select="xs:string(xs:boolean(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:for-each select="@negationInd">
															<xsl:attribute name="negationInd" namespace="" select="xs:string(xs:boolean(fn:string(.)))"/>
														</xsl:for-each>
														<xsl:for-each select="ns1:realmCode">
															<realmCode>
																<xsl:sequence select="(./@node(), ./node())"/>
															</realmCode>
														</xsl:for-each>
														<xsl:for-each select="ns1:typeId">
															<typeId>
																<xsl:sequence select="(./@node(), ./node())"/>
															</typeId>
														</xsl:for-each>
														<xsl:for-each select="ns1:templateId">
															<templateId>
																<xsl:sequence select="(./@node(), ./node())"/>
															</templateId>
														</xsl:for-each>
														<xsl:for-each select="ns1:sequenceNumber">
															<sequenceNumber>
																<xsl:sequence select="(./@node(), ./node())"/>
															</sequenceNumber>
														</xsl:for-each>
														<xsl:for-each select="ns1:seperatableInd">
															<seperatableInd>
																<xsl:sequence select="(./@node(), ./node())"/>
															</seperatableInd>
														</xsl:for-each>
														<xsl:for-each select="ns1:act">
															<act>
																<xsl:sequence select="(./@node(), ./node())"/>
															</act>
														</xsl:for-each>
														<xsl:for-each select="ns1:encounter">
															<encounter>
																<xsl:sequence select="(./@node(), ./node())"/>
															</encounter>
														</xsl:for-each>
														<xsl:for-each select="ns1:observation">
															<observation>
																<xsl:for-each select="@nullFlavor">
																	<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@classCode">
																	<xsl:attribute name="classCode" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@moodCode">
																	<xsl:attribute name="moodCode" namespace="" select="fn:string(.)"/>
																</xsl:for-each>
																<xsl:for-each select="@negationInd">
																	<xsl:attribute name="negationInd" namespace="" select="xs:string(xs:boolean(fn:string(.)))"/>
																</xsl:for-each>
																<xsl:for-each select="ns1:realmCode">
																	<realmCode>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</realmCode>
																</xsl:for-each>
																<xsl:for-each select="ns1:typeId">
																	<typeId>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</typeId>
																</xsl:for-each>
																<xsl:for-each select="ns1:templateId">
																	<templateId>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</templateId>
																</xsl:for-each>
																<xsl:for-each select="ns1:id">
																	<id>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</id>
																</xsl:for-each>
																<xsl:for-each select="ns1:code">
																	<code>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</code>
																</xsl:for-each>
																<xsl:for-each select="ns1:derivationExpr">
																	<derivationExpr>
																		<xsl:for-each select="@nullFlavor">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@representation">
																			<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@mediaType">
																			<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@language">
																			<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@compression">
																			<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@integrityCheck">
																			<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:for-each select="@integrityCheckAlgorithm">
																			<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="node()">
																			<xsl:if test="self::text()">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:if>
																			<xsl:if test="self::ns1:reference">
																				<reference>
																					<xsl:sequence select="(./@node(), ./node())"/>
																				</reference>
																			</xsl:if>
																			<xsl:if test="self::ns1:thumbnail">
																				<thumbnail>
																					<xsl:for-each select="@nullFlavor">
																						<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@representation">
																						<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@mediaType">
																						<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@language">
																						<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@compression">
																						<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@integrityCheck">
																						<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:for-each select="@integrityCheckAlgorithm">
																						<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="node()">
																						<xsl:if test="self::text()">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:if>
																						<xsl:if test="self::ns1:reference">
																							<reference>
																								<xsl:sequence select="(./@node(), ./node())"/>
																							</reference>
																						</xsl:if>
																						<xsl:if test="self::ns1:thumbnail">
																							<thumbnail>
																								<xsl:for-each select="node()[./self::text()]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</thumbnail>
																						</xsl:if>
																					</xsl:for-each>
																				</thumbnail>
																			</xsl:if>
																		</xsl:for-each>
																	</derivationExpr>
																</xsl:for-each>
																<xsl:for-each select="ns1:text">
																	<text>
																		<xsl:for-each select="@nullFlavor">
																			<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@representation">
																			<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@mediaType">
																			<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@language">
																			<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@compression">
																			<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="@integrityCheck">
																			<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
																		</xsl:for-each>
																		<xsl:for-each select="@integrityCheckAlgorithm">
																			<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
																		</xsl:for-each>
																		<xsl:for-each select="node()">
																			<xsl:if test="self::text()">
																				<xsl:sequence select="fn:string(.)"/>
																			</xsl:if>
																			<xsl:if test="self::ns1:reference">
																				<reference>
																					<xsl:sequence select="(./@node(), ./node())"/>
																				</reference>
																			</xsl:if>
																			<xsl:if test="self::ns1:thumbnail">
																				<thumbnail>
																					<xsl:for-each select="@nullFlavor">
																						<xsl:attribute name="nullFlavor" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@representation">
																						<xsl:attribute name="representation" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@mediaType">
																						<xsl:attribute name="mediaType" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@language">
																						<xsl:attribute name="language" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@compression">
																						<xsl:attribute name="compression" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="@integrityCheck">
																						<xsl:attribute name="integrityCheck" namespace="" select="xs:string(xs:base64Binary(fn:string(.)))"/>
																					</xsl:for-each>
																					<xsl:for-each select="@integrityCheckAlgorithm">
																						<xsl:attribute name="integrityCheckAlgorithm" namespace="" select="fn:string(.)"/>
																					</xsl:for-each>
																					<xsl:for-each select="node()">
																						<xsl:if test="self::text()">
																							<xsl:sequence select="fn:string(.)"/>
																						</xsl:if>
																						<xsl:if test="self::ns1:reference">
																							<reference>
																								<xsl:sequence select="(./@node(), ./node())"/>
																							</reference>
																						</xsl:if>
																						<xsl:if test="self::ns1:thumbnail">
																							<thumbnail>
																								<xsl:for-each select="node()[./self::text()]">
																									<xsl:sequence select="fn:string(.)"/>
																								</xsl:for-each>
																							</thumbnail>
																						</xsl:if>
																					</xsl:for-each>
																				</thumbnail>
																			</xsl:if>
																		</xsl:for-each>
																	</text>
																</xsl:for-each>
																<xsl:for-each select="ns1:statusCode">
																	<statusCode>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</statusCode>
																</xsl:for-each>
																<xsl:for-each select="ns1:effectiveTime">
																	<effectiveTime>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</effectiveTime>
																</xsl:for-each>
																<xsl:for-each select="ns1:priorityCode">
																	<priorityCode>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</priorityCode>
																</xsl:for-each>
																<xsl:for-each select="ns1:repeatNumber">
																	<repeatNumber>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</repeatNumber>
																</xsl:for-each>
																<xsl:for-each select="ns1:languageCode">
																	<languageCode>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</languageCode>
																</xsl:for-each>
																<xsl:for-each select="ns1:interpretationCode">
																	<interpretationCode>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</interpretationCode>
																</xsl:for-each>
																<xsl:for-each select="ns1:methodCode">
																	<methodCode>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</methodCode>
																</xsl:for-each>
																<xsl:for-each select="ns1:targetSiteCode">
																	<targetSiteCode>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</targetSiteCode>
																</xsl:for-each>
																<xsl:for-each select="ns1:subject">
																	<subject>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</subject>
																</xsl:for-each>
																<xsl:for-each select="ns1:specimen">
																	<specimen>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</specimen>
																</xsl:for-each>
																<xsl:for-each select="ns1:performer">
																	<performer>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</performer>
																</xsl:for-each>
																<xsl:for-each select="ns1:author">
																	<author>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</author>
																</xsl:for-each>
																<xsl:for-each select="ns1:informant">
																	<informant>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</informant>
																</xsl:for-each>
																<xsl:for-each select="ns1:participant">
																	<participant>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</participant>
																</xsl:for-each>
																<xsl:for-each select="ns1:entryRelationship">
																	<entryRelationship>
																		<xsl:sequence select="()"/>
																	</entryRelationship>
																</xsl:for-each>
																<xsl:for-each select="ns1:reference">
																	<reference>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</reference>
																</xsl:for-each>
																<xsl:for-each select="ns1:precondition">
																	<precondition>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</precondition>
																</xsl:for-each>
																<xsl:for-each select="ns1:referenceRange">
																	<referenceRange>
																		<xsl:sequence select="(./@node(), ./node())"/>
																	</referenceRange>
																</xsl:for-each>
															</observation>
														</xsl:for-each>
														<xsl:for-each select="ns1:observationMedia">
															<observationMedia>
																<xsl:sequence select="(./@node(), ./node())"/>
															</observationMedia>
														</xsl:for-each>
														<xsl:for-each select="ns1:organizer">
															<organizer>
																<xsl:sequence select="(./@node(), ./node())"/>
															</organizer>
														</xsl:for-each>
														<xsl:for-each select="ns1:procedure">
															<procedure>
																<xsl:sequence select="(./@node(), ./node())"/>
															</procedure>
														</xsl:for-each>
														<xsl:for-each select="ns1:regionOfInterest">
															<regionOfInterest>
																<xsl:sequence select="(./@node(), ./node())"/>
															</regionOfInterest>
														</xsl:for-each>
														<xsl:for-each select="ns1:substanceAdministration">
															<substanceAdministration>
																<xsl:sequence select="(./@node(), ./node())"/>
															</substanceAdministration>
														</xsl:for-each>
														<xsl:for-each select="ns1:supply">
															<supply>
																<xsl:sequence select="(./@node(), ./node())"/>
															</supply>
														</xsl:for-each>
													</entryRelationship>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:reference">
													<reference>
														<xsl:sequence select="(./@node(), ./node())"/>
													</reference>
												</xsl:for-each>
												<xsl:for-each select="$var719_resultof_mapCondition/ns1:precondition">
													<precondition>
														<xsl:sequence select="(./@node(), ./node())"/>
													</precondition>
												</xsl:for-each>
											</act>
										</xsl:if>
									</entry>
								</xsl:for-each>
							</section>
						</component>
					</xsl:for-each>
				</structuredBody>
			</component>
		</ClinicalDocument>
	</xsl:template>
</xsl:stylesheet>
